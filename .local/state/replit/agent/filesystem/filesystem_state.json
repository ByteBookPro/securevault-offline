{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# SecureVault Offline - Password & Subscription Manager\n\n## Overview\n\nSecureVault Offline is a client-side focused password and subscription management application built with a React frontend and minimal Express backend. The application implements an offline-first architecture where all sensitive data is encrypted and stored locally in the browser's IndexedDB, ensuring complete user privacy and security. The system includes password generation utilities, subscription tracking with renewal alerts, and a modern UI built with shadcn/ui components.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development patterns\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: React Context API for authentication and vault state management\n- **UI Framework**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **Data Fetching**: TanStack Query for server state management (minimal usage due to offline nature)\n\n### Backend Architecture\n- **Server**: Express.js with TypeScript providing minimal API endpoints\n- **Development**: Vite for development server with hot module replacement\n- **Build System**: ESBuild for production server bundling, Vite for client bundling\n- **Session Management**: Basic session handling with potential for PostgreSQL session storage\n\n### Data Storage Solutions\n- **Primary Storage**: Browser IndexedDB for all encrypted user data (passwords, subscriptions, vault metadata)\n- **Encryption**: Web Crypto API with AES-GCM encryption, PBKDF2 key derivation\n- **Database Schema**: Drizzle ORM with PostgreSQL schema definitions (primarily for user accounts if needed)\n- **Local Storage**: Encrypted vault with client-side only access to sensitive data\n\n### Security & Encryption\n- **Offline-First Security**: All sensitive data encrypted locally using Web Crypto API\n- **Key Derivation**: PBKDF2 with 100,000 iterations for master password hashing\n- **Encryption Standard**: AES-256-GCM with random IV generation for each encryption operation\n- **Master Password**: Single point of authentication for vault access with auto-lock functionality\n\n### Authentication & Authorization\n- **Authentication Flow**: Master password verification against locally stored vault\n- **Session Management**: Context-based authentication state with automatic vault locking\n- **Biometric Support**: Designed to leverage device secure storage (Keychain/Keystore) when available\n- **No Server Authentication**: Primary authentication is local vault unlock, minimal server user accounts\n\n### Core Features Architecture\n- **Password Management**: CRUD operations with client-side encryption, password strength analysis, and secure generation\n- **Subscription Tracking**: Local storage of subscription data with renewal date calculations and notification scheduling\n- **Search & Filtering**: Client-side search across encrypted data with category and strength-based filtering\n- **Data Export/Import**: Encrypted backup functionality for cross-device data transfer\n\n## External Dependencies\n\n### UI & Styling\n- **Radix UI**: Comprehensive set of accessible UI primitives for components\n- **Tailwind CSS**: Utility-first CSS framework for responsive design and theming\n- **Lucide React**: Icon library for consistent iconography throughout the application\n- **class-variance-authority**: Type-safe component variant styling system\n\n### Development & Build Tools\n- **Vite**: Fast development server and build tool with TypeScript support\n- **ESBuild**: High-performance bundler for server-side code compilation\n- **TypeScript**: Static type checking across the entire application stack\n\n### Data Management\n- **Drizzle ORM**: Type-safe database toolkit with PostgreSQL dialect support\n- **Drizzle-Zod**: Schema validation integration between Drizzle and Zod\n- **Zod**: Runtime type validation for data schemas and form validation\n\n### Database & Storage\n- **Neon Database**: Serverless PostgreSQL for potential user account storage\n- **IndexedDB**: Browser-native database for encrypted local data storage\n- **Web Crypto API**: Browser-native cryptographic operations for data encryption\n\n### Utilities & Libraries\n- **date-fns**: Date manipulation and formatting for subscription tracking\n- **React Hook Form**: Form state management with resolver integration\n- **TanStack Query**: Server state management and caching (minimal usage)\n- **Wouter**: Lightweight routing solution for React applications\n\n### Development Extensions\n- **Replit Integration**: Development plugins for Replit environment including error overlays and dev banners\n- **PostCSS**: CSS processing with Tailwind CSS and Autoprefixer plugins","size_bytes":4819},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Fira Code\", \"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2846},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Minimal server routes - most functionality is client-side\n  \n  // Health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", message: \"SecureVault server is running\" });\n  });\n\n  // Extension API endpoints (requires authentication in production)\n\n  // Middleware to authenticate extension requests\n  const authenticateExtension = (req: any, res: any, next: any) => {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({ error: \"Authentication token required\" });\n    }\n    \n    const token = authHeader.substring(7);\n    const tokenData = extensionTokens.get(token);\n    \n    if (!tokenData) {\n      return res.status(401).json({ error: \"Invalid authentication token\" });\n    }\n    \n    if (Date.now() > tokenData.expiresAt) {\n      extensionTokens.delete(token);\n      return res.status(401).json({ error: \"Authentication token expired\" });\n    }\n    \n    // Add extension info to request\n    req.extensionId = tokenData.extensionId;\n    req.extensionName = tokenData.name;\n    \n    next();\n  };\n  \n  // Get passwords for a specific domain (requires authentication)\n  app.get(\"/api/extension/passwords\", authenticateExtension, (req: any, res) => {\n    const { domain } = req.query;\n    \n    if (!domain || typeof domain !== 'string') {\n      return res.status(400).json({ error: \"Domain parameter is required\" });\n    }\n    \n    // TODO: In a production system, this would:\n    // 1. Check if the main vault application is unlocked\n    // 2. Query the actual encrypted password database\n    // 3. Filter passwords matching the domain\n    // 4. Return only necessary fields (no plaintext passwords without explicit user action)\n    \n    // For now, return mock data that simulates the filtering\n    const mockPasswords = [\n      {\n        id: `mock-${domain}-1`,\n        name: `Login for ${domain}`,\n        url: `https://${domain}`,\n        username: \"user@example.com\", \n        // Note: In production, password would be encrypted and require separate unlock\n        category: \"personal\",\n        lastUsed: new Date().toISOString()\n      }\n    ];\n    \n    res.json({ \n      success: true,\n      passwords: mockPasswords,\n      extensionId: req.extensionId,\n      message: \"Authenticated request - production would require vault unlock verification\" \n    });\n  });\n  \n  // Sync extension with vault\n  app.post(\"/api/extension/sync\", (req, res) => {\n    const { extensionId, timestamp } = req.body;\n    \n    // For now, return success\n    // In production, this would sync with the actual vault\n    res.json({\n      success: true,\n      synced: true,\n      timestamp: new Date().toISOString(),\n      message: \"Mock sync - requires secure vault integration\"\n    });\n  });\n  \n  // In-memory storage for pairing codes and tokens (in production, use Redis or database)\n  const pairingCodes = new Map<string, { expiresAt: number, used: boolean }>();\n  const extensionTokens = new Map<string, { \n    extensionId: string, \n    token: string, \n    expiresAt: number, \n    pairedAt: string,\n    name: string \n  }>();\n\n  // Generate pairing code\n  app.post(\"/api/extension/generate-pairing-code\", (req, res) => {\n    const { code, expiresIn = 300 } = req.body; // Default 5 minutes\n    \n    if (!code) {\n      return res.status(400).json({ error: \"Code is required\" });\n    }\n    \n    const expiresAt = Date.now() + (expiresIn * 1000);\n    pairingCodes.set(code, { expiresAt, used: false });\n    \n    // Clean up expired codes\n    setTimeout(() => {\n      pairingCodes.delete(code);\n    }, expiresIn * 1000);\n    \n    res.json({ \n      success: true, \n      code, \n      expiresAt: new Date(expiresAt).toISOString() \n    });\n  });\n\n  // Pair extension using pairing code\n  app.post(\"/api/extension/pair\", (req, res) => {\n    const { extensionId, pairingCode, extensionName = \"SecureVault Extension\" } = req.body;\n    \n    if (!extensionId || !pairingCode) {\n      return res.status(400).json({ error: \"Extension ID and pairing code are required\" });\n    }\n    \n    const codeData = pairingCodes.get(pairingCode);\n    \n    if (!codeData) {\n      return res.status(404).json({ error: \"Invalid pairing code\" });\n    }\n    \n    if (codeData.used) {\n      return res.status(409).json({ error: \"Pairing code already used\" });\n    }\n    \n    if (Date.now() > codeData.expiresAt) {\n      pairingCodes.delete(pairingCode);\n      return res.status(410).json({ error: \"Pairing code expired\" });\n    }\n    \n    // Generate secure authentication token\n    const token = generateSecureToken();\n    const tokenExpiresAt = Date.now() + (24 * 60 * 60 * 1000); // 24 hours\n    \n    extensionTokens.set(token, {\n      extensionId,\n      token,\n      expiresAt: tokenExpiresAt,\n      pairedAt: new Date().toISOString(),\n      name: extensionName\n    });\n    \n    // Mark pairing code as used\n    codeData.used = true;\n    \n    res.json({\n      success: true,\n      token,\n      expiresAt: new Date(tokenExpiresAt).toISOString(),\n      message: \"Extension paired successfully\"\n    });\n  });\n\n  // Get paired extensions/devices\n  app.get(\"/api/extension/paired-devices\", (req, res) => {\n    const devices = Array.from(extensionTokens.values()).map(tokenData => ({\n      id: tokenData.extensionId,\n      name: tokenData.name,\n      pairedAt: tokenData.pairedAt,\n      expiresAt: new Date(tokenData.expiresAt).toISOString()\n    }));\n    \n    res.json({ success: true, devices });\n  });\n\n  // Revoke extension pairing\n  app.post(\"/api/extension/revoke-pairing\", (req, res) => {\n    const { extensionId } = req.body;\n    \n    if (!extensionId) {\n      return res.status(400).json({ error: \"Extension ID is required\" });\n    }\n    \n    // Find and remove the token\n    let removed = false;\n    extensionTokens.forEach((data, token) => {\n      if (data.extensionId === extensionId && !removed) {\n        extensionTokens.delete(token);\n        removed = true;\n      }\n    });\n    \n    if (removed) {\n      res.json({ success: true, message: \"Extension access revoked\" });\n    } else {\n      res.status(404).json({ error: \"Extension not found\" });\n    }\n  });\n\n  // Helper function to generate secure tokens\n  function generateSecureToken(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < 64; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  }\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":6750},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// This app is primarily client-side focused with local storage\n// Server storage is minimal and only for user accounts if needed\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1059},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, decimal, jsonb, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\n// Password entries stored in IndexedDB (client-side only)\nexport const passwordEntrySchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Site name is required\"),\n  url: z.string().url().optional().or(z.literal(\"\")),\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n  category: z.string().optional(),\n  notes: z.string().optional(),\n  createdAt: z.date().default(() => new Date()),\n  updatedAt: z.date().default(() => new Date()),\n  lastUsed: z.date().optional(),\n});\n\n// Subscription entries stored in IndexedDB (client-side only)\nexport const subscriptionEntrySchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Service name is required\"),\n  plan: z.string().optional(),\n  cost: z.number().positive(\"Cost must be positive\"),\n  currency: z.string().default(\"USD\"),\n  billingCycle: z.enum([\"monthly\", \"yearly\", \"weekly\", \"daily\"]).default(\"monthly\"),\n  nextBillingDate: z.date(),\n  reminderDays: z.number().default(7),\n  category: z.string().optional(),\n  notes: z.string().optional(),\n  isActive: z.boolean().default(true),\n  createdAt: z.date().default(() => new Date()),\n  updatedAt: z.date().default(() => new Date()),\n});\n\n// Notes entries stored in IndexedDB (client-side only)\nexport const noteEntrySchema = z.object({\n  id: z.string(),\n  title: z.string().min(1, \"Title is required\"),\n  content: z.string(), // Rich markdown content\n  notebook: z.string().default(\"Default\"), // Organization folder/notebook\n  tags: z.array(z.string()).default([]), // Tags for filtering/searching\n  isPinned: z.boolean().default(false),\n  createdAt: z.date().default(() => new Date()),\n  updatedAt: z.date().default(() => new Date()),\n});\n\n// Expense entries stored in IndexedDB (client-side only)\nexport const expenseEntrySchema = z.object({\n  id: z.string(),\n  title: z.string().min(1, \"Title is required\"),\n  amount: z.number().positive(\"Amount must be positive\"),\n  currency: z.string().default(\"USD\"),\n  category: z.string().min(1, \"Category is required\"),\n  date: z.date().default(() => new Date()),\n  notes: z.string().optional(),\n  isRecurring: z.boolean().default(false),\n  recurringFrequency: z.enum([\"daily\", \"weekly\", \"monthly\", \"yearly\"]).optional(),\n  nextDueDate: z.date().optional(),\n  tags: z.array(z.string()).default([]),\n  createdAt: z.date().default(() => new Date()),\n  updatedAt: z.date().default(() => new Date()),\n});\n\n// Reminder entries stored in IndexedDB (client-side only)\nexport const reminderEntrySchema = z.object({\n  id: z.string(),\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  dueDate: z.date(),\n  dueTime: z.string().optional(), // HH:MM format\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]).default(\"medium\"),\n  category: z.string().default(\"Personal\"),\n  isCompleted: z.boolean().default(false),\n  completedAt: z.date().optional(),\n  isRecurring: z.boolean().default(false),\n  recurringFrequency: z.enum([\"daily\", \"weekly\", \"monthly\", \"yearly\"]).optional(),\n  nextReminderDate: z.date().optional(),\n  tags: z.array(z.string()).default([]),\n  color: z.string().default(\"#6366f1\"), // Color for calendar display\n  notificationEnabled: z.boolean().default(true),\n  subscriptionId: z.string().optional(), // Link to subscription for renewal reminders\n  createdAt: z.date().default(() => new Date()),\n  updatedAt: z.date().default(() => new Date()),\n});\n\n// KDF configuration schema\nexport const kdfConfigSchema = z.object({\n  algorithm: z.literal(\"PBKDF2\"),\n  iterations: z.number().positive(),\n  hash: z.enum([\"SHA-256\", \"SHA-512\"]),\n});\n\n// Vault metadata stored in IndexedDB\nexport const vaultMetadataSchema = z.object({\n  id: z.string().default(\"vault\"),\n  encryptionSalt: z.string(),\n  kdfConfig: kdfConfigSchema.optional(), // KDF configuration for this vault\n  createdAt: z.date(),\n  lastUnlocked: z.date(),\n  passwordCount: z.number().default(0),\n  subscriptionCount: z.number().default(0),\n  noteCount: z.number().default(0),\n  expenseCount: z.number().default(0),\n  reminderCount: z.number().default(0),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type PasswordEntry = z.infer<typeof passwordEntrySchema>;\nexport type SubscriptionEntry = z.infer<typeof subscriptionEntrySchema>;\nexport type NoteEntry = z.infer<typeof noteEntrySchema>;\nexport type ExpenseEntry = z.infer<typeof expenseEntrySchema>;\nexport type ReminderEntry = z.infer<typeof reminderEntrySchema>;\nexport type KDFConfig = z.infer<typeof kdfConfigSchema>;\nexport type VaultMetadata = z.infer<typeof vaultMetadataSchema>;\n\n// Categories for passwords and subscriptions\nexport const PASSWORD_CATEGORIES = [\n  \"Social Media\",\n  \"Finance\",\n  \"Work\",\n  \"Personal\",\n  \"Shopping\",\n  \"Entertainment\",\n  \"Email\",\n  \"Gaming\",\n  \"Education\",\n  \"Other\"\n] as const;\n\nexport const SUBSCRIPTION_CATEGORIES = [\n  \"Streaming\",\n  \"Software\",\n  \"Cloud Storage\",\n  \"Music\",\n  \"Productivity\",\n  \"Gaming\",\n  \"News\",\n  \"Finance\",\n  \"Fitness\",\n  \"Other\"\n] as const;\n\nexport const NOTE_NOTEBOOKS = [\n  \"Default\",\n  \"Work\",\n  \"Personal\",\n  \"Ideas\",\n  \"Projects\",\n  \"Research\",\n  \"Meeting Notes\",\n  \"Travel\",\n  \"Recipes\",\n  \"Other\"\n] as const;\n\nexport const EXPENSE_CATEGORIES = [\n  \"Food & Dining\",\n  \"Transportation\",\n  \"Shopping\",\n  \"Entertainment\",\n  \"Bills & Utilities\",\n  \"Healthcare\",\n  \"Travel\",\n  \"Education\",\n  \"Business\",\n  \"Home & Garden\",\n  \"Personal Care\",\n  \"Insurance\",\n  \"Investments\",\n  \"Gifts & Donations\",\n  \"Other\"\n] as const;\n\nexport const REMINDER_CATEGORIES = [\n  \"Personal\",\n  \"Work\",\n  \"Healthcare\",\n  \"Bills & Payments\",\n  \"Appointments\",\n  \"Events\",\n  \"Travel\",\n  \"Shopping\",\n  \"Subscriptions\",\n  \"Tasks\",\n  \"Birthdays\",\n  \"Maintenance\",\n  \"Education\",\n  \"Fitness\",\n  \"Other\"\n] as const;\n\nexport const REMINDER_COLORS = [\n  \"#6366f1\", // Indigo\n  \"#8b5cf6\", // Violet  \n  \"#06b6d4\", // Cyan\n  \"#10b981\", // Emerald\n  \"#f59e0b\", // Amber\n  \"#ef4444\", // Red\n  \"#ec4899\", // Pink\n  \"#84cc16\", // Lime\n  \"#f97316\", // Orange\n  \"#6b7280\"  // Gray\n] as const;\n","size_bytes":6584},"client/src/App.tsx":{"content":"import { Switch, Route, Link } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/contexts/auth-context\";\nimport { VaultProvider } from \"@/contexts/vault-context\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Passwords from \"@/pages/passwords\";\nimport Subscriptions from \"@/pages/subscriptions\";\nimport Notes from \"@/pages/notes\";\nimport Expenses from \"@/pages/expenses\";\nimport Reminders from \"@/pages/reminders\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Lock, Search, RefreshCw, Settings, Bookmark, Key, BarChart3, Upload, Download, BookOpen, DollarSign, Bell } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { PasswordGeneratorModal } from \"@/components/password-generator-modal\";\nimport { ImportExportModal } from \"@/components/import-export-modal\";\nimport { ExtensionPairingModal } from \"@/components/extension-pairing-modal\";\nimport { SecuritySettingsModal } from \"@/components/security-settings-modal\";\nimport { PWAOfflineIndicator } from \"@/components/pwa-offline-indicator\";\nimport { PWAInstallPrompt } from \"@/components/pwa-install-prompt\";\nimport { useVault } from \"@/contexts/vault-context\";\n\n// Main Layout Component for authenticated users\nfunction MainLayout({ children }: { children: React.ReactNode }) {\n  const { logout } = useAuth();\n  const { searchQuery, setSearchQuery, stats } = useVault();\n  const [showGenerator, setShowGenerator] = useState(false);\n  const [showImportExport, setShowImportExport] = useState(false);\n  const [showExtensionPairing, setShowExtensionPairing] = useState(false);\n  const [showSecuritySettings, setShowSecuritySettings] = useState(false);\n\n  const handleLockVault = () => {\n    logout();\n  };\n\n  const navItems = [\n    { id: 'dashboard', label: 'Dashboard', icon: BarChart3, count: null },\n    { id: 'passwords', label: 'Passwords', icon: Key, count: stats.totalPasswords },\n    { id: 'subscriptions', label: 'Subscriptions', icon: Bookmark, count: stats.activeSubscriptions },\n    { id: 'notes', label: 'Notes', icon: BookOpen, count: stats.totalNotes },\n    { id: 'expenses', label: 'Expenses', icon: DollarSign, count: stats.totalExpenses },\n    { id: 'reminders', label: 'Reminders', icon: Bell, count: stats.totalReminders },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border px-4 lg:px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n              <Lock className=\"w-5 h-5 text-primary-foreground\" />\n            </div>\n            <h1 className=\"text-xl font-semibold text-foreground\">SecureVault</h1>\n          </div>\n\n          <div className=\"flex items-center gap-3\">\n            {/* Search */}\n            <div className=\"hidden sm:flex relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search passwords, subscriptions, notes...\"\n                className=\"w-64 pl-10 pr-4 py-2\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                data-testid=\"global-search\"\n              />\n              <Search className=\"w-4 h-4 text-muted-foreground absolute left-3 top-1/2 transform -translate-y-1/2\" />\n            </div>\n\n            {/* Actions */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"p-2 hover:bg-secondary rounded-lg\"\n              data-testid=\"sync-button\"\n            >\n              <RefreshCw className=\"w-5 h-5\" />\n            </Button>\n\n            <SecuritySettingsModal\n              trigger={\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"p-2 hover:bg-secondary rounded-lg\"\n                  data-testid=\"settings-button\"\n                >\n                  <Settings className=\"w-5 h-5\" />\n                </Button>\n              }\n              onSettingsChanged={(kdfConfig) => {\n                console.log('Security settings updated:', kdfConfig);\n              }}\n            />\n\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleLockVault}\n              className=\"p-2 hover:bg-secondary rounded-lg\"\n              data-testid=\"lock-vault-button\"\n            >\n              <Lock className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"flex h-[calc(100vh-73px)]\">\n        {/* Sidebar */}\n        <nav className=\"w-64 bg-card border-r border-border p-4 space-y-2\">\n          <div className=\"space-y-1\">\n            {navItems.map((item) => (\n              <Link key={item.id} href={item.id === 'dashboard' ? '/' : `/${item.id}`}>\n                <Button\n                  variant=\"ghost\"\n                  className={`w-full justify-start gap-3 px-3 py-2 hover:bg-secondary text-foreground`}\n                  data-testid={`nav-${item.id}`}\n                >\n                  <item.icon className=\"w-5 h-5\" />\n                  {item.label}\n                  {item.count !== null && (\n                    <span className=\"ml-auto bg-muted text-muted-foreground text-xs px-2 py-1 rounded-full\">\n                      {item.count}\n                    </span>\n                  )}\n                </Button>\n              </Link>\n            ))}\n          </div>\n\n          <hr className=\"border-border\" />\n\n          <div className=\"space-y-1\">\n            <h3 className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide px-3\">\n              Tools\n            </h3>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start gap-3 px-3 py-2 hover:bg-secondary text-foreground\"\n              onClick={() => setShowGenerator(true)}\n              data-testid=\"nav-password-generator\"\n            >\n              <RefreshCw className=\"w-5 h-5\" />\n              Password Generator\n            </Button>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start gap-3 px-3 py-2 hover:bg-secondary text-foreground\"\n              onClick={() => setShowImportExport(true)}\n              data-testid=\"nav-import-export\"\n            >\n              <Upload className=\"w-5 h-5\" />\n              Import / Export\n            </Button>\n            <Button\n              variant=\"ghost\"\n              className=\"w-full justify-start gap-3 px-3 py-2 hover:bg-secondary text-foreground\"\n              onClick={() => setShowExtensionPairing(true)}\n              data-testid=\"nav-extension-pairing\"\n            >\n              <Settings className=\"w-5 h-5\" />\n              Browser Extension\n            </Button>\n          </div>\n        </nav>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-auto\">\n          <div className=\"p-6\">\n            {children}\n          </div>\n        </main>\n      </div>\n\n      <PasswordGeneratorModal\n        open={showGenerator}\n        onOpenChange={setShowGenerator}\n      />\n      <ImportExportModal\n        open={showImportExport}\n        onOpenChange={setShowImportExport}\n      />\n      <ExtensionPairingModal\n        open={showExtensionPairing}\n        onOpenChange={setShowExtensionPairing}\n      />\n    </div>\n  );\n}\n\n// Router Component\nfunction Router() {\n  const { isUnlocked, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mb-4 mx-auto\">\n            <Lock className=\"w-8 h-8 text-primary-foreground\" />\n          </div>\n          <p className=\"text-muted-foreground\">Loading SecureVault...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isUnlocked ? (\n        <Route path=\"/\" component={Login} />\n      ) : (\n        <>\n          <Route path=\"/\" component={() => (\n            <MainLayout>\n              <Dashboard />\n            </MainLayout>\n          )} />\n          <Route path=\"/passwords\" component={() => (\n            <MainLayout>\n              <Passwords />\n            </MainLayout>\n          )} />\n          <Route path=\"/subscriptions\" component={() => (\n            <MainLayout>\n              <Subscriptions />\n            </MainLayout>\n          )} />\n          <Route path=\"/notes\" component={() => (\n            <MainLayout>\n              <Notes />\n            </MainLayout>\n          )} />\n          <Route path=\"/expenses\" component={() => (\n            <MainLayout>\n              <Expenses />\n            </MainLayout>\n          )} />\n          <Route path=\"/reminders\" component={() => (\n            <MainLayout>\n              <Reminders />\n            </MainLayout>\n          )} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <VaultProvider>\n            <Toaster />\n            <Router />\n            {/* PWA Components */}\n            <PWAOfflineIndicator />\n            <PWAInstallPrompt />\n          </VaultProvider>\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":9775},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222, 47%, 11%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222, 47%, 11%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(160, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222, 84%, 5%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222, 47%, 11%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Fira Code', Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05);\n  --shadow-sm: 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1), 0px 1px 2px 0px hsl(0, 0%, 0%, 0.06);\n  --shadow: 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1), 0px 1px 2px 0px hsl(0, 0%, 0%, 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(0, 0%, 0%, 0.1), 0px 2px 4px -1px hsl(0, 0%, 0%, 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0, 0%, 0%, 0.1), 0px 4px 6px -2px hsl(0, 0%, 0%, 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0, 0%, 0%, 0.1), 0px 10px 10px -5px hsl(0, 0%, 0%, 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0, 0%, 0%, 0.25);\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 5%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 5%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(217, 33%, 18%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 33%, 18%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 33%, 18%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 33%, 18%);\n  --input: hsl(217, 33%, 18%);\n  --ring: hsl(224, 76%, 94%);\n  --sidebar: hsl(222, 84%, 5%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(217, 33%, 18%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217, 33%, 18%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  .password-dots {\n    font-family: monospace;\n    letter-spacing: 2px;\n  }\n\n  .strength-meter {\n    height: 4px;\n    border-radius: 2px;\n    transition: all 0.3s ease;\n  }\n\n  .service-logo {\n    width: 32px;\n    height: 32px;\n    border-radius: 8px;\n    object-fit: cover;\n  }\n}\n\n.gradient-bg {\n  background: linear-gradient(135deg, hsl(210, 40%, 98%) 0%, hsl(220, 70%, 95%) 100%);\n}\n\n.dark .gradient-bg {\n  background: linear-gradient(135deg, hsl(222, 84%, 5%) 0%, hsl(217, 33%, 18%) 100%);\n}\n\n/* PWA Mobile Optimizations */\n@layer base {\n  html {\n    /* Prevent zoom on input focus on iOS */\n    -webkit-text-size-adjust: 100%;\n    text-size-adjust: 100%;\n    \n    /* Smooth scrolling for better UX */\n    scroll-behavior: smooth;\n  }\n  \n  body {\n    /* Prevent overscroll bounce on iOS */\n    overscroll-behavior: none;\n    \n    /* Optimize scrolling performance */\n    -webkit-overflow-scrolling: touch;\n    \n    /* Prevent text selection on UI elements */\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  /* Allow text selection on content areas */\n  input, textarea, [contenteditable=\"true\"], .text-selectable {\n    -webkit-user-select: text;\n    -moz-user-select: text;\n    user-select: text;\n  }\n  \n  /* Optimize tap highlights */\n  button, [role=\"button\"], input, select, textarea {\n    -webkit-tap-highlight-color: transparent;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  /* Prevent zoom on double tap for iOS */\n  * {\n    touch-action: manipulation;\n  }\n}\n\n/* PWA Safe Areas for notched devices */\n@layer utilities {\n  .safe-top {\n    padding-top: env(safe-area-inset-top);\n  }\n  \n  .safe-bottom {\n    padding-bottom: env(safe-area-inset-bottom);\n  }\n  \n  .safe-left {\n    padding-left: env(safe-area-inset-left);\n  }\n  \n  .safe-right {\n    padding-right: env(safe-area-inset-right);\n  }\n  \n  .safe-area {\n    padding-top: env(safe-area-inset-top);\n    padding-bottom: env(safe-area-inset-bottom);\n    padding-left: env(safe-area-inset-left);\n    padding-right: env(safe-area-inset-right);\n  }\n}\n\n/* PWA Loading States */\n@layer components {\n  .pwa-loading {\n    @apply animate-pulse bg-muted rounded;\n  }\n  \n  .pwa-offline {\n    @apply bg-orange-50 border-orange-200 dark:bg-orange-950 dark:border-orange-800;\n  }\n  \n  .pwa-update-available {\n    @apply bg-blue-50 border-blue-200 dark:bg-blue-950 dark:border-blue-800;\n  }\n}\n\n/* Mobile-first responsive breakpoints optimization */\n@layer utilities {\n  /* Touch-friendly sizing */\n  .touch-target {\n    min-height: 44px;\n    min-width: 44px;\n  }\n  \n  /* Mobile viewport optimization */\n  .mobile-viewport {\n    min-height: 100vh;\n    min-height: 100dvh; /* Dynamic viewport height for mobile */\n  }\n  \n  /* Prevent horizontal scroll on mobile */\n  .mobile-container {\n    max-width: 100vw;\n    overflow-x: hidden;\n  }\n}\n\n/* PWA Install animation */\n@keyframes pwa-slide-up {\n  from {\n    transform: translateY(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n@keyframes pwa-fade-in {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n.pwa-install-prompt {\n  animation: pwa-slide-up 0.3s ease-out;\n}\n\n.pwa-offline-indicator {\n  animation: pwa-fade-in 0.2s ease-out;\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n  :root {\n    --border: 2px;\n    --radius: 4px;\n  }\n  \n  button, input, select, textarea {\n    border-width: 2px;\n  }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n  \n  .pwa-install-prompt,\n  .pwa-offline-indicator {\n    animation: none;\n  }\n}\n","size_bytes":7097},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n// Initialize PWA service early\nimport \"./lib/pwa\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":209},"client/src/components/add-password-modal.tsx":{"content":"import { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Eye, EyeOff, Wand2 } from 'lucide-react';\nimport { PASSWORD_CATEGORIES } from '@shared/schema';\nimport { useVault } from '@/contexts/vault-context';\nimport { useToast } from '@/hooks/use-toast';\nimport { PasswordStrengthMeter } from '@/components/ui/password-strength-meter';\nimport { PasswordGeneratorModal } from './password-generator-modal';\n\ninterface AddPasswordModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function AddPasswordModal({ open, onOpenChange }: AddPasswordModalProps) {\n  const { addPassword } = useVault();\n  const { toast } = useToast();\n  \n  const [formData, setFormData] = useState({\n    name: '',\n    url: '',\n    username: '',\n    password: '',\n    category: '',\n    notes: '',\n  });\n  \n  const [showPassword, setShowPassword] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showGenerator, setShowGenerator] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.name || !formData.username || !formData.password) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      await addPassword(formData);\n      toast({\n        title: \"Success\",\n        description: \"Password saved successfully\",\n      });\n      \n      // Reset form\n      setFormData({\n        name: '',\n        url: '',\n        username: '',\n        password: '',\n        category: '',\n        notes: '',\n      });\n      onOpenChange(false);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save password\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleGeneratedPassword = (password: string) => {\n    setFormData(prev => ({ ...prev, password }));\n  };\n\n  return (\n    <>\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"sm:max-w-lg\" data-testid=\"add-password-modal\">\n          <DialogHeader>\n            <DialogTitle>Add New Password</DialogTitle>\n          </DialogHeader>\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"site-name\">Site/Service Name *</Label>\n              <Input\n                id=\"site-name\"\n                placeholder=\"e.g., Google, Facebook, Banking\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                required\n                data-testid=\"input-site-name\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"site-url\">Website URL</Label>\n              <Input\n                id=\"site-url\"\n                type=\"url\"\n                placeholder=\"https://example.com\"\n                value={formData.url}\n                onChange={(e) => setFormData(prev => ({ ...prev, url: e.target.value }))}\n                data-testid=\"input-site-url\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username/Email *</Label>\n              <Input\n                id=\"username\"\n                placeholder=\"your.email@example.com\"\n                value={formData.username}\n                onChange={(e) => setFormData(prev => ({ ...prev, username: e.target.value }))}\n                required\n                data-testid=\"input-username\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password *</Label>\n              <div className=\"flex gap-2\">\n                <div className=\"relative flex-1\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder=\"Enter or generate password\"\n                    value={formData.password}\n                    onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}\n                    required\n                    className=\"pr-10\"\n                    data-testid=\"input-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    data-testid=\"toggle-password-visibility\"\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                    )}\n                  </Button>\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setShowGenerator(true)}\n                  data-testid=\"generate-password-button\"\n                >\n                  <Wand2 className=\"h-4 w-4 mr-2\" />\n                  Generate\n                </Button>\n              </div>\n              \n              {formData.password && (\n                <PasswordStrengthMeter password={formData.password} />\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"category\">Category</Label>\n              <Select\n                value={formData.category}\n                onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}\n              >\n                <SelectTrigger data-testid=\"select-category\">\n                  <SelectValue placeholder=\"Select Category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {PASSWORD_CATEGORIES.map((category) => (\n                    <SelectItem key={category} value={category}>\n                      {category}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"notes\">Notes (Optional)</Label>\n              <Textarea\n                id=\"notes\"\n                placeholder=\"Any additional notes or security questions...\"\n                value={formData.notes}\n                onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n                rows={3}\n                className=\"resize-none\"\n                data-testid=\"textarea-notes\"\n              />\n            </div>\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                className=\"flex-1\"\n                data-testid=\"cancel-button\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"flex-1\"\n                disabled={isSubmitting}\n                data-testid=\"save-password-button\"\n              >\n                {isSubmitting ? \"Saving...\" : \"Save Password\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      <PasswordGeneratorModal\n        open={showGenerator}\n        onOpenChange={setShowGenerator}\n        onPasswordGenerated={handleGeneratedPassword}\n      />\n    </>\n  );\n}\n","size_bytes":7982},"client/src/components/add-subscription-modal.tsx":{"content":"import { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Calendar } from '@/components/ui/calendar';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { CalendarIcon } from 'lucide-react';\nimport { format } from 'date-fns';\nimport { SUBSCRIPTION_CATEGORIES } from '@shared/schema';\nimport { useVault } from '@/contexts/vault-context';\nimport { useToast } from '@/hooks/use-toast';\nimport { cn } from '@/lib/utils';\n\ninterface AddSubscriptionModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function AddSubscriptionModal({ open, onOpenChange }: AddSubscriptionModalProps) {\n  const { addSubscription } = useVault();\n  const { toast } = useToast();\n  \n  const [formData, setFormData] = useState({\n    name: '',\n    plan: '',\n    cost: '',\n    currency: 'USD',\n    billingCycle: 'monthly' as 'monthly' | 'yearly' | 'weekly' | 'daily',\n    nextBillingDate: undefined as Date | undefined,\n    reminderDays: '7',\n    category: '',\n    notes: '',\n  });\n  \n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.name || !formData.cost || !formData.nextBillingDate) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const cost = parseFloat(formData.cost);\n    if (isNaN(cost) || cost <= 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid cost\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const reminderDays = parseInt(formData.reminderDays);\n    if (isNaN(reminderDays) || reminderDays < 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid reminder days\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      await addSubscription({\n        name: formData.name,\n        plan: formData.plan || undefined,\n        cost,\n        currency: formData.currency,\n        billingCycle: formData.billingCycle,\n        nextBillingDate: formData.nextBillingDate,\n        reminderDays,\n        category: formData.category || undefined,\n        notes: formData.notes || undefined,\n        isActive: true,\n      });\n      \n      toast({\n        title: \"Success\",\n        description: \"Subscription saved successfully\",\n      });\n      \n      // Reset form\n      setFormData({\n        name: '',\n        plan: '',\n        cost: '',\n        currency: 'USD',\n        billingCycle: 'monthly',\n        nextBillingDate: undefined,\n        reminderDays: '7',\n        category: '',\n        notes: '',\n      });\n      onOpenChange(false);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save subscription\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-lg max-h-[90vh] overflow-y-auto\" data-testid=\"add-subscription-modal\">\n        <DialogHeader>\n          <DialogTitle>Add New Subscription</DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"service-name\">Service Name *</Label>\n            <Input\n              id=\"service-name\"\n              placeholder=\"e.g., Netflix, Spotify, Adobe\"\n              value={formData.name}\n              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n              required\n              data-testid=\"input-service-name\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"plan\">Plan/Package Name</Label>\n            <Input\n              id=\"plan\"\n              placeholder=\"e.g., Premium, Pro, Basic\"\n              value={formData.plan}\n              onChange={(e) => setFormData(prev => ({ ...prev, plan: e.target.value }))}\n              data-testid=\"input-plan\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"cost\">Cost *</Label>\n              <Input\n                id=\"cost\"\n                type=\"number\"\n                step=\"0.01\"\n                min=\"0\"\n                placeholder=\"9.99\"\n                value={formData.cost}\n                onChange={(e) => setFormData(prev => ({ ...prev, cost: e.target.value }))}\n                required\n                data-testid=\"input-cost\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"currency\">Currency</Label>\n              <Select\n                value={formData.currency}\n                onValueChange={(value) => setFormData(prev => ({ ...prev, currency: value }))}\n              >\n                <SelectTrigger data-testid=\"select-currency\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"USD\">USD</SelectItem>\n                  <SelectItem value=\"EUR\">EUR</SelectItem>\n                  <SelectItem value=\"GBP\">GBP</SelectItem>\n                  <SelectItem value=\"CAD\">CAD</SelectItem>\n                  <SelectItem value=\"AUD\">AUD</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"billing-cycle\">Billing Cycle</Label>\n            <Select\n              value={formData.billingCycle}\n              onValueChange={(value: 'monthly' | 'yearly' | 'weekly' | 'daily') => \n                setFormData(prev => ({ ...prev, billingCycle: value }))\n              }\n            >\n              <SelectTrigger data-testid=\"select-billing-cycle\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"monthly\">Monthly</SelectItem>\n                <SelectItem value=\"yearly\">Yearly</SelectItem>\n                <SelectItem value=\"weekly\">Weekly</SelectItem>\n                <SelectItem value=\"daily\">Daily</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Next Billing Date *</Label>\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  className={cn(\n                    \"w-full justify-start text-left font-normal\",\n                    !formData.nextBillingDate && \"text-muted-foreground\"\n                  )}\n                  data-testid=\"billing-date-trigger\"\n                >\n                  <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                  {formData.nextBillingDate ? (\n                    format(formData.nextBillingDate, \"PPP\")\n                  ) : (\n                    \"Pick a date\"\n                  )}\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                <Calendar\n                  mode=\"single\"\n                  selected={formData.nextBillingDate}\n                  onSelect={(date) => setFormData(prev => ({ ...prev, nextBillingDate: date }))}\n                  initialFocus\n                />\n              </PopoverContent>\n            </Popover>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"reminder-days\">Reminder Days</Label>\n            <Input\n              id=\"reminder-days\"\n              type=\"number\"\n              min=\"0\"\n              placeholder=\"7\"\n              value={formData.reminderDays}\n              onChange={(e) => setFormData(prev => ({ ...prev, reminderDays: e.target.value }))}\n              data-testid=\"input-reminder-days\"\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              How many days before billing date to remind you\n            </p>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"category\">Category</Label>\n            <Select\n              value={formData.category}\n              onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}\n            >\n              <SelectTrigger data-testid=\"select-category\">\n                <SelectValue placeholder=\"Select Category\" />\n              </SelectTrigger>\n              <SelectContent>\n                {SUBSCRIPTION_CATEGORIES.map((category) => (\n                  <SelectItem key={category} value={category}>\n                    {category}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"notes\">Notes (Optional)</Label>\n            <Textarea\n              id=\"notes\"\n              placeholder=\"Any additional notes...\"\n              value={formData.notes}\n              onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n              rows={3}\n              className=\"resize-none\"\n              data-testid=\"textarea-notes\"\n            />\n          </div>\n\n          <div className=\"flex gap-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              className=\"flex-1\"\n              data-testid=\"cancel-button\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"flex-1\"\n              disabled={isSubmitting}\n              data-testid=\"save-subscription-button\"\n            >\n              {isSubmitting ? \"Saving...\" : \"Save Subscription\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10306},"client/src/components/password-generator-modal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Slider } from '@/components/ui/slider';\nimport { Copy, RefreshCw, Check } from 'lucide-react';\nimport { PasswordGenerator, PasswordOptions } from '@/lib/password-generator';\nimport { PasswordStrengthMeter } from '@/components/ui/password-strength-meter';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface PasswordGeneratorModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onPasswordGenerated?: (password: string) => void;\n}\n\nexport function PasswordGeneratorModal({ \n  open, \n  onOpenChange, \n  onPasswordGenerated \n}: PasswordGeneratorModalProps) {\n  const { toast } = useToast();\n  const [password, setPassword] = useState('');\n  const [copied, setCopied] = useState(false);\n  const [options, setOptions] = useState<PasswordOptions>({\n    length: 16,\n    includeUppercase: true,\n    includeLowercase: true,\n    includeNumbers: true,\n    includeSymbols: true,\n    excludeSimilar: false,\n  });\n\n  useEffect(() => {\n    if (open) {\n      generatePassword();\n    }\n  }, [open, options]);\n\n  const generatePassword = () => {\n    try {\n      const newPassword = PasswordGenerator.generate(options);\n      setPassword(newPassword);\n      setCopied(false);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate password. Please check your options.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const copyPassword = async () => {\n    try {\n      await navigator.clipboard.writeText(password);\n      setCopied(true);\n      toast({\n        title: \"Copied\",\n        description: \"Password copied to clipboard\",\n      });\n      setTimeout(() => setCopied(false), 2000);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy password\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const usePassword = () => {\n    onPasswordGenerated?.(password);\n    onOpenChange(false);\n    toast({\n      title: \"Password Applied\",\n      description: \"Generated password has been applied to your form\",\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-lg\" data-testid=\"password-generator-modal\">\n        <DialogHeader>\n          <DialogTitle>Password Generator</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Generated Password Display */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"generated-password\">Generated Password</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                id=\"generated-password\"\n                value={password}\n                readOnly\n                className=\"font-mono text-sm\"\n                data-testid=\"generated-password-input\"\n              />\n              <Button\n                size=\"icon\"\n                variant=\"outline\"\n                onClick={copyPassword}\n                data-testid=\"copy-password-button\"\n              >\n                {copied ? (\n                  <Check className=\"h-4 w-4 text-green-600\" />\n                ) : (\n                  <Copy className=\"h-4 w-4\" />\n                )}\n              </Button>\n              <Button\n                size=\"icon\"\n                variant=\"outline\"\n                onClick={generatePassword}\n                data-testid=\"regenerate-password-button\"\n              >\n                <RefreshCw className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Password Length */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <Label>Length</Label>\n              <span className=\"text-sm font-medium text-primary\" data-testid=\"length-value\">\n                {options.length}\n              </span>\n            </div>\n            <Slider\n              value={[options.length]}\n              onValueChange={(value) => \n                setOptions(prev => ({ ...prev, length: value[0] }))\n              }\n              max={50}\n              min={8}\n              step={1}\n              className=\"w-full\"\n              data-testid=\"length-slider\"\n            />\n          </div>\n\n          {/* Character Type Options */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"uppercase\"\n                checked={options.includeUppercase}\n                onCheckedChange={(checked) =>\n                  setOptions(prev => ({ ...prev, includeUppercase: Boolean(checked) }))\n                }\n                data-testid=\"uppercase-checkbox\"\n              />\n              <Label htmlFor=\"uppercase\" className=\"text-sm\">\n                Uppercase (A-Z)\n              </Label>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"lowercase\"\n                checked={options.includeLowercase}\n                onCheckedChange={(checked) =>\n                  setOptions(prev => ({ ...prev, includeLowercase: Boolean(checked) }))\n                }\n                data-testid=\"lowercase-checkbox\"\n              />\n              <Label htmlFor=\"lowercase\" className=\"text-sm\">\n                Lowercase (a-z)\n              </Label>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"numbers\"\n                checked={options.includeNumbers}\n                onCheckedChange={(checked) =>\n                  setOptions(prev => ({ ...prev, includeNumbers: Boolean(checked) }))\n                }\n                data-testid=\"numbers-checkbox\"\n              />\n              <Label htmlFor=\"numbers\" className=\"text-sm\">\n                Numbers (0-9)\n              </Label>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"symbols\"\n                checked={options.includeSymbols}\n                onCheckedChange={(checked) =>\n                  setOptions(prev => ({ ...prev, includeSymbols: Boolean(checked) }))\n                }\n                data-testid=\"symbols-checkbox\"\n              />\n              <Label htmlFor=\"symbols\" className=\"text-sm\">\n                Symbols (!@#$)\n              </Label>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"exclude-similar\"\n              checked={options.excludeSimilar}\n              onCheckedChange={(checked) =>\n                setOptions(prev => ({ ...prev, excludeSimilar: Boolean(checked) }))\n              }\n              data-testid=\"exclude-similar-checkbox\"\n            />\n            <Label htmlFor=\"exclude-similar\" className=\"text-sm\">\n              Exclude similar characters (0,O,l,I)\n            </Label>\n          </div>\n\n          {/* Password Strength */}\n          <PasswordStrengthMeter password={password} />\n\n          {/* Actions */}\n          <div className=\"flex gap-3 pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              className=\"flex-1\"\n              data-testid=\"cancel-button\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={usePassword}\n              className=\"flex-1\"\n              data-testid=\"use-password-button\"\n            >\n              Use Password\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7864},"client/src/contexts/auth-context.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { vaultStorage } from '@/lib/storage';\n\ninterface AuthContextType {\n  isUnlocked: boolean;\n  vaultExists: boolean;\n  login: (masterPassword: string) => Promise<boolean>;\n  createVault: (masterPassword: string) => Promise<void>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [isUnlocked, setIsUnlocked] = useState(false);\n  const [vaultExists, setVaultExists] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    initializeAuth();\n  }, []);\n\n  const initializeAuth = async () => {\n    try {\n      await vaultStorage.init();\n      const exists = await vaultStorage.vaultExists();\n      setVaultExists(exists);\n    } catch (error) {\n      console.error('Failed to initialize auth:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (masterPassword: string): Promise<boolean> => {\n    try {\n      const success = await vaultStorage.unlockVault(masterPassword);\n      if (success) {\n        setIsUnlocked(true);\n      }\n      return success;\n    } catch (error) {\n      console.error('Login failed:', error);\n      return false;\n    }\n  };\n\n  const createVault = async (masterPassword: string): Promise<void> => {\n    try {\n      await vaultStorage.createVault(masterPassword);\n      setVaultExists(true);\n      setIsUnlocked(true);\n    } catch (error) {\n      console.error('Failed to create vault:', error);\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    setIsUnlocked(false);\n    // Clear encryption key from storage\n    vaultStorage.setEncryptionKey(null as any);\n  };\n\n  const value: AuthContextType = {\n    isUnlocked,\n    vaultExists,\n    login,\n    createVault,\n    logout,\n    isLoading,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":2236},"client/src/contexts/vault-context.tsx":{"content":"import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { PasswordEntry, SubscriptionEntry, NoteEntry, ExpenseEntry, ReminderEntry, KDFConfig } from '@shared/schema';\nimport { vaultStorage } from '@/lib/storage';\nimport { KDFConfig as CryptoKDFConfig } from '@/lib/crypto';\nimport { useAuth } from './auth-context';\nimport type { ParserConfig } from '@/lib/csv-parsers';\n\ninterface VaultContextType {\n  passwords: PasswordEntry[];\n  subscriptions: SubscriptionEntry[];\n  notes: NoteEntry[];\n  expenses: ExpenseEntry[];\n  reminders: ReminderEntry[];\n  stats: {\n    totalPasswords: number;\n    activeSubscriptions: number;\n    totalNotes: number;\n    totalExpenses: number;\n    totalReminders: number;\n    upcomingReminders: number;\n    overdueReminders: number;\n    monthlySpend: number;\n    monthlyExpenses: number;\n    weakPasswords: number;\n  };\n  searchQuery: string;\n  setSearchQuery: (query: string) => void;\n  refreshData: () => Promise<void>;\n  addPassword: (password: Omit<PasswordEntry, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;\n  updatePassword: (id: string, updates: Partial<PasswordEntry>) => Promise<void>;\n  deletePassword: (id: string) => Promise<void>;\n  addSubscription: (subscription: Omit<SubscriptionEntry, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;\n  updateSubscription: (id: string, updates: Partial<SubscriptionEntry>) => Promise<void>;\n  deleteSubscription: (id: string) => Promise<void>;\n  addNote: (note: Omit<NoteEntry, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;\n  updateNote: (id: string, updates: Partial<NoteEntry>) => Promise<void>;\n  deleteNote: (id: string) => Promise<void>;\n  addExpense: (expense: Omit<ExpenseEntry, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;\n  updateExpense: (id: string, updates: Partial<ExpenseEntry>) => Promise<void>;\n  deleteExpense: (id: string) => Promise<void>;\n  addReminder: (reminder: Omit<ReminderEntry, 'id' | 'createdAt' | 'updatedAt'>) => Promise<void>;\n  updateReminder: (id: string, updates: Partial<ReminderEntry>) => Promise<void>;\n  deleteReminder: (id: string) => Promise<void>;\n  exportVault: (password: string) => Promise<string>;\n  importVault: (data: string, password: string) => Promise<void>;\n  importPasswordsFromCSV: (csvContent: string, parserId: string) => Promise<{ imported: number; skipped: number }>;\n  getAvailableCSVParsers: () => ParserConfig[];\n  getKDFConfig: () => Promise<CryptoKDFConfig | null>;\n  updateKDFConfig: (masterPassword: string, newKdfConfig: CryptoKDFConfig, onProgress?: (progress: number) => void) => Promise<void>;\n  isLoading: boolean;\n}\n\nconst VaultContext = createContext<VaultContextType | undefined>(undefined);\n\nexport function VaultProvider({ children }: { children: React.ReactNode }) {\n  const { isUnlocked } = useAuth();\n  const [passwords, setPasswords] = useState<PasswordEntry[]>([]);\n  const [subscriptions, setSubscriptions] = useState<SubscriptionEntry[]>([]);\n  const [notes, setNotes] = useState<NoteEntry[]>([]);\n  const [expenses, setExpenses] = useState<ExpenseEntry[]>([]);\n  const [reminders, setReminders] = useState<ReminderEntry[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (isUnlocked) {\n      refreshData();\n    } else {\n      setPasswords([]);\n      setSubscriptions([]);\n      setNotes([]);\n      setExpenses([]);\n      setReminders([]);\n    }\n  }, [isUnlocked]);\n\n  const refreshData = async () => {\n    if (!isUnlocked) return;\n\n    setIsLoading(true);\n    try {\n      const [passwordsData, subscriptionsData, notesData, expensesData, remindersData] = await Promise.all([\n        vaultStorage.getAllPasswords(),\n        vaultStorage.getAllSubscriptions(),\n        vaultStorage.getAllNotes(),\n        vaultStorage.getAllExpenses(),\n        vaultStorage.getAllReminders(),\n      ]);\n\n      setPasswords(passwordsData);\n      setSubscriptions(subscriptionsData);\n      setNotes(notesData);\n      setExpenses(expensesData);\n      setReminders(remindersData);\n    } catch (error) {\n      console.error('Failed to refresh vault data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const addPassword = async (passwordData: Omit<PasswordEntry, 'id' | 'createdAt' | 'updatedAt'>) => {\n    const password: PasswordEntry = {\n      ...passwordData,\n      id: crypto.randomUUID(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    await vaultStorage.savePassword(password);\n    await refreshData();\n  };\n\n  const updatePassword = async (id: string, updates: Partial<PasswordEntry>) => {\n    const existing = passwords.find(p => p.id === id);\n    if (!existing) return;\n\n    const updated: PasswordEntry = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n\n    await vaultStorage.savePassword(updated);\n    await refreshData();\n  };\n\n  const deletePassword = async (id: string) => {\n    await vaultStorage.deletePassword(id);\n    await refreshData();\n  };\n\n  const addSubscription = async (subscriptionData: Omit<SubscriptionEntry, 'id' | 'createdAt' | 'updatedAt'>) => {\n    const subscription: SubscriptionEntry = {\n      ...subscriptionData,\n      id: crypto.randomUUID(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    await vaultStorage.saveSubscription(subscription);\n    await refreshData();\n  };\n\n  const updateSubscription = async (id: string, updates: Partial<SubscriptionEntry>) => {\n    const existing = subscriptions.find(s => s.id === id);\n    if (!existing) return;\n\n    const updated: SubscriptionEntry = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n\n    await vaultStorage.saveSubscription(updated);\n    await refreshData();\n  };\n\n  const deleteSubscription = async (id: string) => {\n    await vaultStorage.deleteSubscription(id);\n    await refreshData();\n  };\n\n  const addNote = async (noteData: Omit<NoteEntry, 'id' | 'createdAt' | 'updatedAt'>) => {\n    const note: NoteEntry = {\n      ...noteData,\n      id: crypto.randomUUID(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    await vaultStorage.saveNote(note);\n    await refreshData();\n  };\n\n  const updateNote = async (id: string, updates: Partial<NoteEntry>) => {\n    const existing = notes.find(n => n.id === id);\n    if (!existing) return;\n\n    const updated: NoteEntry = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n\n    await vaultStorage.saveNote(updated);\n    await refreshData();\n  };\n\n  const deleteNote = async (id: string) => {\n    await vaultStorage.deleteNote(id);\n    await refreshData();\n  };\n\n  const addExpense = async (expenseData: Omit<ExpenseEntry, 'id' | 'createdAt' | 'updatedAt'>) => {\n    const expense: ExpenseEntry = {\n      ...expenseData,\n      id: crypto.randomUUID(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    await vaultStorage.saveExpense(expense);\n    await refreshData();\n  };\n\n  const updateExpense = async (id: string, updates: Partial<ExpenseEntry>) => {\n    const existing = expenses.find(e => e.id === id);\n    if (!existing) return;\n\n    const updated: ExpenseEntry = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n\n    await vaultStorage.saveExpense(updated);\n    await refreshData();\n  };\n\n  const deleteExpense = async (id: string) => {\n    await vaultStorage.deleteExpense(id);\n    await refreshData();\n  };\n\n  const addReminder = async (reminderData: Omit<ReminderEntry, 'id' | 'createdAt' | 'updatedAt'>) => {\n    const reminder: ReminderEntry = {\n      ...reminderData,\n      id: crypto.randomUUID(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    await vaultStorage.saveReminder(reminder);\n    await refreshData();\n  };\n\n  const updateReminder = async (id: string, updates: Partial<ReminderEntry>) => {\n    const existing = reminders.find(r => r.id === id);\n    if (!existing) return;\n\n    const updated: ReminderEntry = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n\n    await vaultStorage.saveReminder(updated);\n    await refreshData();\n  };\n\n  const deleteReminder = async (id: string) => {\n    await vaultStorage.deleteReminder(id);\n    await refreshData();\n  };\n\n  const exportVault = async (password: string): Promise<string> => {\n    return await vaultStorage.exportVault(password);\n  };\n\n  const importVault = async (data: string, password: string): Promise<void> => {\n    await vaultStorage.importVault(data, password);\n    await refreshData();\n  };\n\n  const getKDFConfig = async (): Promise<CryptoKDFConfig | null> => {\n    return await vaultStorage.getKDFConfig();\n  };\n\n  const updateKDFConfig = async (masterPassword: string, newKdfConfig: CryptoKDFConfig, onProgress?: (progress: number) => void): Promise<void> => {\n    await vaultStorage.reencryptVault(masterPassword, newKdfConfig, onProgress);\n    // Refresh data after re-encryption\n    await refreshData();\n  };\n\n  const importPasswordsFromCSV = async (csvContent: string, parserId: string): Promise<{ imported: number; skipped: number }> => {\n    const result = await vaultStorage.importPasswordsFromCSV(csvContent, parserId);\n    await refreshData();\n    return result;\n  };\n\n  const getAvailableCSVParsers = () => {\n    return vaultStorage.getAvailableCSVParsers();\n  };\n\n  // Calculate stats\n  const stats = {\n    totalPasswords: passwords.length,\n    activeSubscriptions: subscriptions.filter(s => s.isActive).length,\n    totalNotes: notes.length,\n    totalExpenses: expenses.length,\n    totalReminders: reminders.length,\n    upcomingReminders: reminders.filter(r => {\n      if (r.isCompleted) return false;\n      const now = new Date();\n      const dueDate = new Date(r.dueDate);\n      const weekFromNow = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);\n      return dueDate >= now && dueDate <= weekFromNow;\n    }).length,\n    overdueReminders: reminders.filter(r => {\n      if (r.isCompleted) return false;\n      const now = new Date();\n      const dueDate = new Date(r.dueDate);\n      return dueDate < now;\n    }).length,\n    monthlySpend: subscriptions\n      .filter(s => s.isActive)\n      .reduce((total, s) => {\n        let monthlyAmount = s.cost;\n        if (s.billingCycle === 'yearly') monthlyAmount /= 12;\n        else if (s.billingCycle === 'weekly') monthlyAmount *= 4.33;\n        else if (s.billingCycle === 'daily') monthlyAmount *= 30;\n        return total + monthlyAmount;\n      }, 0),\n    monthlyExpenses: expenses\n      .filter(e => {\n        const expenseDate = new Date(e.date);\n        const currentMonth = new Date();\n        return expenseDate.getMonth() === currentMonth.getMonth() && \n               expenseDate.getFullYear() === currentMonth.getFullYear();\n      })\n      .reduce((total, e) => total + e.amount, 0),\n    weakPasswords: passwords.filter(p => {\n      // Basic weak password detection\n      return p.password.length < 8 || \n             !/[A-Z]/.test(p.password) || \n             !/[a-z]/.test(p.password) || \n             !/[0-9]/.test(p.password);\n    }).length,\n  };\n\n  const value: VaultContextType = {\n    passwords,\n    subscriptions,\n    notes,\n    expenses,\n    reminders,\n    stats,\n    searchQuery,\n    setSearchQuery,\n    refreshData,\n    addPassword,\n    updatePassword,\n    deletePassword,\n    addSubscription,\n    updateSubscription,\n    deleteSubscription,\n    addNote,\n    updateNote,\n    deleteNote,\n    addExpense,\n    updateExpense,\n    deleteExpense,\n    addReminder,\n    updateReminder,\n    deleteReminder,\n    exportVault,\n    importVault,\n    importPasswordsFromCSV,\n    getAvailableCSVParsers,\n    getKDFConfig,\n    updateKDFConfig,\n    isLoading,\n  };\n\n  return (\n    <VaultContext.Provider value={value}>\n      {children}\n    </VaultContext.Provider>\n  );\n}\n\nexport function useVault() {\n  const context = useContext(VaultContext);\n  if (context === undefined) {\n    throw new Error('useVault must be used within a VaultProvider');\n  }\n  return context;\n}\n","size_bytes":11997},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/crypto.ts":{"content":"// Crypto utilities for client-side encryption using Web Crypto API\n\n// KDF configuration types\nexport type KDFConfig = {\n  algorithm: 'PBKDF2';\n  iterations: number;\n  hash: 'SHA-256' | 'SHA-512';\n};\n\nexport class CryptoService {\n  private static readonly ALGORITHM = 'AES-GCM';\n  private static readonly KEY_LENGTH = 256;\n  private static readonly IV_LENGTH = 12;\n  private static readonly SALT_LENGTH = 16;\n  \n  // Key derivation configuration - can be customized per vault\n  private static readonly DEFAULT_KDF_CONFIG: KDFConfig = {\n    algorithm: 'PBKDF2',\n    iterations: 600000, // Increased from 100k to 600k (OWASP 2023 recommendation)\n    hash: 'SHA-256'\n  };\n  \n  // Enhanced KDF configuration options\n  public static readonly KDF_PRESETS: Record<string, KDFConfig> = {\n    // Standard security for most users\n    standard: { algorithm: 'PBKDF2', iterations: 600000, hash: 'SHA-256' },\n    \n    // High security for sensitive data\n    high: { algorithm: 'PBKDF2', iterations: 1000000, hash: 'SHA-256' },\n    \n    // Maximum security (slower but most secure)\n    maximum: { algorithm: 'PBKDF2', iterations: 2000000, hash: 'SHA-512' },\n    \n    // Fast option for development/testing\n    fast: { algorithm: 'PBKDF2', iterations: 100000, hash: 'SHA-256' }\n  };\n\n  // Generate a random salt\n  static generateSalt(): Uint8Array {\n    return crypto.getRandomValues(new Uint8Array(this.SALT_LENGTH));\n  }\n\n  // Generate a random IV\n  static generateIV(): Uint8Array {\n    return crypto.getRandomValues(new Uint8Array(this.IV_LENGTH));\n  }\n\n  // Derive key from master password using configurable KDF settings\n  static async deriveKey(\n    masterPassword: string, \n    salt: Uint8Array,\n    kdfConfig: KDFConfig = this.DEFAULT_KDF_CONFIG\n  ): Promise<CryptoKey> {\n    const encoder = new TextEncoder();\n    const passwordBuffer = encoder.encode(masterPassword);\n\n    const baseKey = await crypto.subtle.importKey(\n      'raw',\n      passwordBuffer,\n      kdfConfig.algorithm,\n      false,\n      ['deriveKey']\n    );\n\n    return crypto.subtle.deriveKey(\n      {\n        name: kdfConfig.algorithm,\n        salt: salt,\n        iterations: kdfConfig.iterations,\n        hash: kdfConfig.hash\n      },\n      baseKey,\n      {\n        name: this.ALGORITHM,\n        length: this.KEY_LENGTH\n      },\n      false,\n      ['encrypt', 'decrypt']\n    );\n  }\n\n  // Encrypt data\n  static async encrypt(data: string, key: CryptoKey): Promise<{ encrypted: ArrayBuffer; iv: Uint8Array }> {\n    const encoder = new TextEncoder();\n    const dataBuffer = encoder.encode(data);\n    const iv = this.generateIV();\n\n    const encrypted = await crypto.subtle.encrypt(\n      {\n        name: this.ALGORITHM,\n        iv: iv\n      },\n      key,\n      dataBuffer\n    );\n\n    return { encrypted, iv };\n  }\n\n  // Decrypt data\n  static async decrypt(encryptedData: ArrayBuffer, key: CryptoKey, iv: Uint8Array): Promise<string> {\n    const decrypted = await crypto.subtle.decrypt(\n      {\n        name: this.ALGORITHM,\n        iv: iv\n      },\n      key,\n      encryptedData\n    );\n\n    const decoder = new TextDecoder();\n    return decoder.decode(decrypted);\n  }\n\n  // Convert ArrayBuffer to base64 string for storage\n  static arrayBufferToBase64(buffer: ArrayBuffer): string {\n    const bytes = new Uint8Array(buffer);\n    let binary = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binary);\n  }\n\n  // Convert base64 string back to ArrayBuffer\n  static base64ToArrayBuffer(base64: string): ArrayBuffer {\n    const binary = atob(base64);\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n      bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes.buffer;\n  }\n\n  // Convert Uint8Array to base64 string\n  static uint8ArrayToBase64(uint8Array: Uint8Array): string {\n    let binary = '';\n    for (let i = 0; i < uint8Array.byteLength; i++) {\n      binary += String.fromCharCode(uint8Array[i]);\n    }\n    return btoa(binary);\n  }\n\n  // Convert base64 string to Uint8Array\n  static base64ToUint8Array(base64: string): Uint8Array {\n    const binary = atob(base64);\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n      bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n  }\n\n  // Benchmark KDF performance for different settings\n  static async benchmarkKDF(\n    testPassword: string = 'test-password-123',\n    testSalt?: Uint8Array\n  ): Promise<{ preset: string; config: any; timeMs: number }[]> {\n    const salt = testSalt || this.generateSalt();\n    const results: { preset: string; config: any; timeMs: number }[] = [];\n    \n    for (const [presetName, config] of Object.entries(this.KDF_PRESETS)) {\n      const startTime = performance.now();\n      \n      try {\n        await this.deriveKey(testPassword, salt, config);\n        const endTime = performance.now();\n        const timeMs = Math.round(endTime - startTime);\n        \n        results.push({\n          preset: presetName,\n          config: { ...config },\n          timeMs\n        });\n      } catch (error) {\n        console.error(`KDF benchmark failed for preset ${presetName}:`, error);\n        results.push({\n          preset: presetName,\n          config: { ...config },\n          timeMs: -1 // Error indicator\n        });\n      }\n    }\n    \n    return results.sort((a, b) => a.timeMs - b.timeMs);\n  }\n\n  // Test password strength and recommend appropriate KDF preset\n  static recommendKDFPreset(password: string): {\n    preset: keyof typeof CryptoService.KDF_PRESETS;\n    reason: string;\n    config: typeof CryptoService.KDF_PRESETS[keyof typeof CryptoService.KDF_PRESETS];\n  } {\n    const length = password.length;\n    const hasUpper = /[A-Z]/.test(password);\n    const hasLower = /[a-z]/.test(password);\n    const hasNumbers = /\\d/.test(password);\n    const hasSymbols = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n    \n    const complexityScore = [hasUpper, hasLower, hasNumbers, hasSymbols].filter(Boolean).length;\n    \n    // Strong password (long + complex) = standard KDF is sufficient\n    if (length >= 16 && complexityScore >= 3) {\n      return {\n        preset: 'standard',\n        reason: 'Strong password detected - standard security level recommended',\n        config: this.KDF_PRESETS.standard\n      };\n    }\n    \n    // Medium password = high security KDF\n    if (length >= 12 && complexityScore >= 2) {\n      return {\n        preset: 'high',\n        reason: 'Medium strength password - higher security KDF recommended',\n        config: this.KDF_PRESETS.high\n      };\n    }\n    \n    // Weak password = maximum security KDF\n    return {\n      preset: 'maximum',\n      reason: 'Weak password detected - maximum security KDF strongly recommended',\n      config: this.KDF_PRESETS.maximum\n    };\n  }\n\n  // Enhanced key derivation with automatic timing and progress callback\n  static async deriveKeyWithProgress(\n    masterPassword: string,\n    salt: Uint8Array,\n    kdfConfig: KDFConfig = this.DEFAULT_KDF_CONFIG,\n    onProgress?: (progress: number) => void\n  ): Promise<{ key: CryptoKey; timeMs: number }> {\n    const startTime = performance.now();\n    \n    // Simulate progress updates for long-running operations\n    let progressInterval: NodeJS.Timeout | undefined;\n    if (onProgress && kdfConfig.iterations > 500000) {\n      let progress = 0;\n      progressInterval = setInterval(() => {\n        progress = Math.min(progress + Math.random() * 15, 95);\n        onProgress(progress);\n      }, 100);\n    }\n    \n    try {\n      const key = await this.deriveKey(masterPassword, salt, kdfConfig);\n      const endTime = performance.now();\n      const timeMs = Math.round(endTime - startTime);\n      \n      if (progressInterval) {\n        clearInterval(progressInterval);\n        onProgress?.(100);\n      }\n      \n      return { key, timeMs };\n    } catch (error) {\n      if (progressInterval) {\n        clearInterval(progressInterval);\n      }\n      throw error;\n    }\n  }\n}\n","size_bytes":7982},"client/src/lib/password-generator.ts":{"content":"export interface PasswordOptions {\n  length: number;\n  includeUppercase: boolean;\n  includeLowercase: boolean;\n  includeNumbers: boolean;\n  includeSymbols: boolean;\n  excludeSimilar: boolean;\n}\n\nexport class PasswordGenerator {\n  private static readonly UPPERCASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  private static readonly LOWERCASE = 'abcdefghijklmnopqrstuvwxyz';\n  private static readonly NUMBERS = '0123456789';\n  private static readonly SYMBOLS = '!@#$%^&*()_+-=[]{}|;:,.<>?';\n  private static readonly SIMILAR = '0O1lI';\n\n  /**\n   * Generates a cryptographically secure random integer between 0 and max-1\n   * Uses rejection sampling to avoid modulo bias\n   */\n  private static secureRandomInt(max: number): number {\n    if (max <= 0) throw new Error('Max must be greater than 0');\n    \n    const range = Math.floor(0x100000000 / max) * max; // Largest multiple of max <= 2^32\n    let randomValue;\n    \n    do {\n      randomValue = crypto.getRandomValues(new Uint32Array(1))[0];\n    } while (randomValue >= range);\n    \n    return randomValue % max;\n  }\n\n  static generate(options: PasswordOptions): string {\n    let charset = '';\n    let password = '';\n    \n    // Build character set based on options\n    if (options.includeUppercase) {\n      charset += this.UPPERCASE;\n    }\n    if (options.includeLowercase) {\n      charset += this.LOWERCASE;\n    }\n    if (options.includeNumbers) {\n      charset += this.NUMBERS;\n    }\n    if (options.includeSymbols) {\n      charset += this.SYMBOLS;\n    }\n\n    // Remove similar characters if requested\n    if (options.excludeSimilar) {\n      charset = charset.split('').filter(char => !this.SIMILAR.includes(char)).join('');\n    }\n\n    if (charset.length === 0) {\n      throw new Error('At least one character type must be selected');\n    }\n\n    // Generate password using cryptographically secure random selection\n    for (let i = 0; i < options.length; i++) {\n      password += charset[this.secureRandomInt(charset.length)];\n    }\n\n    // Ensure at least one character from each selected type\n    password = this.ensureCharacterTypes(password, options);\n\n    return password;\n  }\n\n  private static ensureCharacterTypes(password: string, options: PasswordOptions): string {\n    const chars = password.split('');\n    \n    // Create filtered character sets based on excludeSimilar option\n    const filteredUppercase = options.excludeSimilar ? \n      this.UPPERCASE.split('').filter(char => !this.SIMILAR.includes(char)).join('') : this.UPPERCASE;\n    const filteredLowercase = options.excludeSimilar ? \n      this.LOWERCASE.split('').filter(char => !this.SIMILAR.includes(char)).join('') : this.LOWERCASE;\n    const filteredNumbers = options.excludeSimilar ? \n      this.NUMBERS.split('').filter(char => !this.SIMILAR.includes(char)).join('') : this.NUMBERS;\n    const filteredSymbols = options.excludeSimilar ? \n      this.SYMBOLS.split('').filter(char => !this.SIMILAR.includes(char)).join('') : this.SYMBOLS;\n\n    // Check what types are present\n    let hasUppercase = false;\n    let hasLowercase = false;\n    let hasNumbers = false;\n    let hasSymbols = false;\n\n    for (const char of chars) {\n      if (filteredUppercase.includes(char)) hasUppercase = true;\n      if (filteredLowercase.includes(char)) hasLowercase = true;\n      if (filteredNumbers.includes(char)) hasNumbers = true;\n      if (filteredSymbols.includes(char)) hasSymbols = true;\n    }\n\n    // Collect missing types and their corresponding character sets\n    const missingTypes: { charset: string; type: string }[] = [];\n    \n    if (options.includeUppercase && !hasUppercase && filteredUppercase.length > 0) {\n      missingTypes.push({ charset: filteredUppercase, type: 'uppercase' });\n    }\n    if (options.includeLowercase && !hasLowercase && filteredLowercase.length > 0) {\n      missingTypes.push({ charset: filteredLowercase, type: 'lowercase' });\n    }\n    if (options.includeNumbers && !hasNumbers && filteredNumbers.length > 0) {\n      missingTypes.push({ charset: filteredNumbers, type: 'numbers' });\n    }\n    if (options.includeSymbols && !hasSymbols && filteredSymbols.length > 0) {\n      missingTypes.push({ charset: filteredSymbols, type: 'symbols' });\n    }\n\n    // If we have more missing types than password length, we need to prioritize\n    // Place one character of each type deterministically to avoid infinite loops\n    if (missingTypes.length > 0) {\n      const availableIndices = Array.from({ length: chars.length }, (_, i) => i);\n      \n      // Shuffle indices for random placement\n      for (let i = availableIndices.length - 1; i > 0; i--) {\n        const j = this.secureRandomInt(i + 1);\n        [availableIndices[i], availableIndices[j]] = [availableIndices[j], availableIndices[i]];\n      }\n\n      // Place characters for missing types, reusing indices if necessary\n      for (let i = 0; i < missingTypes.length; i++) {\n        const indexToReplace = availableIndices[i % availableIndices.length];\n        const randomChar = missingTypes[i].charset[this.secureRandomInt(missingTypes[i].charset.length)];\n        chars[indexToReplace] = randomChar;\n      }\n    }\n\n    return chars.join('');\n  }\n\n  static calculateStrength(password: string): {\n    score: number;\n    level: 'weak' | 'medium' | 'strong' | 'very-strong';\n    feedback: string[];\n  } {\n    let score = 0;\n    const feedback: string[] = [];\n\n    // Length scoring\n    if (password.length >= 8) score += 20;\n    else feedback.push('Use at least 8 characters');\n\n    if (password.length >= 12) score += 20;\n    else if (password.length >= 8) feedback.push('Consider using 12+ characters');\n\n    if (password.length >= 16) score += 10;\n\n    // Character type scoring\n    if (/[a-z]/.test(password)) score += 15;\n    else feedback.push('Include lowercase letters');\n\n    if (/[A-Z]/.test(password)) score += 15;\n    else feedback.push('Include uppercase letters');\n\n    if (/[0-9]/.test(password)) score += 10;\n    else feedback.push('Include numbers');\n\n    if (/[^A-Za-z0-9]/.test(password)) score += 10;\n    else feedback.push('Include symbols');\n\n    // Complexity bonus\n    const uniqueChars = new Set(password).size;\n    if (uniqueChars > password.length * 0.7) score += 10;\n\n    // Penalty for common patterns\n    if (/(.)\\1{2,}/.test(password)) {\n      score -= 10;\n      feedback.push('Avoid repeating characters');\n    }\n\n    if (/123|abc|qwerty/i.test(password)) {\n      score -= 15;\n      feedback.push('Avoid common patterns');\n    }\n\n    score = Math.max(0, Math.min(100, score));\n\n    let level: 'weak' | 'medium' | 'strong' | 'very-strong';\n    if (score < 30) level = 'weak';\n    else if (score < 60) level = 'medium';\n    else if (score < 80) level = 'strong';\n    else level = 'very-strong';\n\n    return { score, level, feedback };\n  }\n}\n","size_bytes":6759},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/storage.ts":{"content":"import { PasswordEntry, SubscriptionEntry, NoteEntry, ExpenseEntry, ReminderEntry, VaultMetadata, KDFConfig } from '@shared/schema';\nimport { CryptoService, KDFConfig as CryptoKDFConfig } from './crypto';\nimport { PASSWORD_MANAGER_PARSERS, type ParserConfig } from './csv-parsers';\n\nexport class VaultStorage {\n  private dbName = 'SecureVault';\n  private version = 1;\n  private db: IDBDatabase | null = null;\n  private encryptionKey: CryptoKey | null = null;\n\n  // Initialize IndexedDB\n  async init(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.version);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve();\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // Create object stores\n        if (!db.objectStoreNames.contains('passwords')) {\n          db.createObjectStore('passwords', { keyPath: 'id' });\n        }\n\n        if (!db.objectStoreNames.contains('subscriptions')) {\n          db.createObjectStore('subscriptions', { keyPath: 'id' });\n        }\n\n        if (!db.objectStoreNames.contains('notes')) {\n          db.createObjectStore('notes', { keyPath: 'id' });\n        }\n\n        if (!db.objectStoreNames.contains('expenses')) {\n          db.createObjectStore('expenses', { keyPath: 'id' });\n        }\n\n        if (!db.objectStoreNames.contains('reminders')) {\n          db.createObjectStore('reminders', { keyPath: 'id' });\n        }\n\n        if (!db.objectStoreNames.contains('metadata')) {\n          db.createObjectStore('metadata', { keyPath: 'id' });\n        }\n\n        if (!db.objectStoreNames.contains('encrypted_data')) {\n          db.createObjectStore('encrypted_data', { keyPath: 'id' });\n        }\n      };\n    });\n  }\n\n  // Set encryption key\n  setEncryptionKey(key: CryptoKey): void {\n    this.encryptionKey = key;\n  }\n\n  // Check if vault exists\n  async vaultExists(): Promise<boolean> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const metadata = await this.getMetadata();\n    return metadata !== null;\n  }\n\n  // Create new vault with optional KDF configuration\n  async createVault(masterPassword: string, kdfConfig?: CryptoKDFConfig): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    // Use provided KDF config or fall back to default\n    const config = kdfConfig || CryptoService.KDF_PRESETS.standard;\n    \n    const salt = CryptoService.generateSalt();\n    const key = await CryptoService.deriveKey(masterPassword, salt, config);\n    this.encryptionKey = key;\n\n    const metadata: VaultMetadata = {\n      id: 'vault',\n      encryptionSalt: CryptoService.uint8ArrayToBase64(salt),\n      kdfConfig: {\n        algorithm: config.algorithm,\n        iterations: config.iterations,\n        hash: config.hash,\n      },\n      createdAt: new Date(),\n      lastUnlocked: new Date(),\n      passwordCount: 0,\n      subscriptionCount: 0,\n      noteCount: 0,\n      expenseCount: 0,\n      reminderCount: 0,\n    };\n\n    await this.saveMetadata(metadata);\n    \n    // Create password verification entry for future authentication\n    await this.createPasswordVerificationEntry(key);\n  }\n\n  // Unlock vault with master password\n  async unlockVault(masterPassword: string): Promise<boolean> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    try {\n      const metadata = await this.getMetadata();\n      if (!metadata) return false;\n\n      const salt = CryptoService.base64ToUint8Array(metadata.encryptionSalt);\n      \n      // Use stored KDF configuration or fall back to legacy default (100k iterations)\n      const kdfConfig = metadata.kdfConfig ? {\n        algorithm: metadata.kdfConfig.algorithm,\n        iterations: metadata.kdfConfig.iterations,\n        hash: metadata.kdfConfig.hash,\n      } : {\n        algorithm: 'PBKDF2' as const,\n        iterations: 100000, // Original default before KDF upgrade\n        hash: 'SHA-256' as const\n      };\n      \n      const key = await CryptoService.deriveKey(masterPassword, salt, kdfConfig);\n      \n      // Test the key by trying to decrypt existing data or verification entry\n      const testEntry = await this.getPasswordVerificationEntry();\n      \n      if (testEntry) {\n        // Try to decrypt existing verification entry\n        try {\n          const encrypted = CryptoService.base64ToArrayBuffer(testEntry.data);\n          const iv = CryptoService.base64ToUint8Array(testEntry.iv);\n          const decrypted = await CryptoService.decrypt(encrypted, key, iv);\n          \n          // Check if decrypted data matches expected test string\n          if (decrypted !== 'VAULT_PASSWORD_VERIFICATION') {\n            return false; // Wrong password - decryption succeeded but content is wrong\n          }\n        } catch (error) {\n          console.error('Password verification failed:', error);\n          return false; // Wrong password - decryption failed\n        }\n      } else {\n        // No verification entry exists - this is a legacy vault\n        // Try to decrypt existing encrypted entries to validate the password\n        const canDecryptData = await this.hasDecryptableEntryWithKey(key);\n        \n        if (!canDecryptData) {\n          // Can't validate password - either wrong password or empty vault\n          // For security, we require explicit vault creation, not automatic unlock\n          return false;\n        }\n        \n        // Password is valid - create verification entry for future use\n        await this.createPasswordVerificationEntry(key);\n      }\n\n      this.encryptionKey = key;\n\n      // Update last unlocked time\n      metadata.lastUnlocked = new Date();\n      await this.saveMetadata(metadata);\n\n      return true;\n    } catch (error) {\n      console.error('Failed to unlock vault:', error);\n      return false;\n    }\n  }\n\n  // Save metadata\n  private async saveMetadata(metadata: VaultMetadata): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['metadata'], 'readwrite');\n      const store = transaction.objectStore('metadata');\n      const request = store.put(metadata);\n\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // Get metadata\n  private async getMetadata(): Promise<VaultMetadata | null> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['metadata'], 'readonly');\n      const store = transaction.objectStore('metadata');\n      const request = store.get('vault');\n\n      request.onsuccess = () => resolve(request.result || null);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // Encrypt and store data\n  private async encryptAndStore(storeName: string, data: any): Promise<void> {\n    if (!this.db || !this.encryptionKey) throw new Error('Database or encryption key not available');\n\n    const jsonData = JSON.stringify(data);\n    const { encrypted, iv } = await CryptoService.encrypt(jsonData, this.encryptionKey);\n\n    const encryptedEntry = {\n      id: data.id,\n      data: CryptoService.arrayBufferToBase64(encrypted),\n      iv: CryptoService.uint8ArrayToBase64(iv),\n    };\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['encrypted_data'], 'readwrite');\n      const store = transaction.objectStore('encrypted_data');\n      const request = store.put({ ...encryptedEntry, store: storeName });\n\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // Decrypt and retrieve data\n  private async decryptAndRetrieve(storeName: string, id: string): Promise<any | null> {\n    if (!this.db || !this.encryptionKey) throw new Error('Database or encryption key not available');\n\n    return new Promise(async (resolve, reject) => {\n      const transaction = this.db!.transaction(['encrypted_data'], 'readonly');\n      const store = transaction.objectStore('encrypted_data');\n      const request = store.get(id);\n\n      request.onsuccess = async () => {\n        const result = request.result;\n        if (!result || result.store !== storeName) {\n          resolve(null);\n          return;\n        }\n\n        try {\n          const encrypted = CryptoService.base64ToArrayBuffer(result.data);\n          const iv = CryptoService.base64ToUint8Array(result.iv);\n          const decrypted = await CryptoService.decrypt(encrypted, this.encryptionKey!, iv);\n          resolve(JSON.parse(decrypted));\n        } catch (error) {\n          reject(error);\n        }\n      };\n\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // Get all encrypted entries for a store\n  private async getAllEncrypted(storeName: string): Promise<any[]> {\n    if (!this.db || !this.encryptionKey) throw new Error('Database or encryption key not available');\n\n    return new Promise(async (resolve, reject) => {\n      const transaction = this.db!.transaction(['encrypted_data'], 'readonly');\n      const store = transaction.objectStore('encrypted_data');\n      const request = store.getAll();\n\n      request.onsuccess = async () => {\n        const results = request.result.filter(item => item.store === storeName);\n        const decryptedItems = [];\n\n        for (const result of results) {\n          try {\n            const encrypted = CryptoService.base64ToArrayBuffer(result.data);\n            const iv = CryptoService.base64ToUint8Array(result.iv);\n            const decrypted = await CryptoService.decrypt(encrypted, this.encryptionKey!, iv);\n            decryptedItems.push(JSON.parse(decrypted));\n          } catch (error) {\n            console.error('Failed to decrypt item:', error);\n          }\n        }\n\n        resolve(decryptedItems);\n      };\n\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // Password operations\n  async savePassword(password: PasswordEntry): Promise<void> {\n    await this.encryptAndStore('passwords', password);\n    await this.updatePasswordCount();\n  }\n\n  async getPassword(id: string): Promise<PasswordEntry | null> {\n    return this.decryptAndRetrieve('passwords', id);\n  }\n\n  async getAllPasswords(): Promise<PasswordEntry[]> {\n    return this.getAllEncrypted('passwords');\n  }\n\n  async deletePassword(id: string): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['encrypted_data'], 'readwrite');\n      const store = transaction.objectStore('encrypted_data');\n      const request = store.delete(id);\n\n      request.onsuccess = async () => {\n        await this.updatePasswordCount();\n        resolve();\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // Subscription operations\n  async saveSubscription(subscription: SubscriptionEntry): Promise<void> {\n    await this.encryptAndStore('subscriptions', subscription);\n    await this.updateSubscriptionCount();\n  }\n\n  async getSubscription(id: string): Promise<SubscriptionEntry | null> {\n    return this.decryptAndRetrieve('subscriptions', id);\n  }\n\n  async getAllSubscriptions(): Promise<SubscriptionEntry[]> {\n    return this.getAllEncrypted('subscriptions');\n  }\n\n  async deleteSubscription(id: string): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['encrypted_data'], 'readwrite');\n      const store = transaction.objectStore('encrypted_data');\n      const request = store.delete(id);\n\n      request.onsuccess = async () => {\n        await this.updateSubscriptionCount();\n        resolve();\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // Notes methods\n  async saveNote(note: NoteEntry): Promise<void> {\n    await this.encryptAndStore('notes', note);\n    await this.updateNoteCount();\n  }\n\n  async getNote(id: string): Promise<NoteEntry | null> {\n    return this.decryptAndRetrieve('notes', id);\n  }\n\n  async getAllNotes(): Promise<NoteEntry[]> {\n    return this.getAllEncrypted('notes');\n  }\n\n  async deleteNote(id: string): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['encrypted_data'], 'readwrite');\n      const store = transaction.objectStore('encrypted_data');\n      const request = store.delete(id);\n\n      request.onsuccess = async () => {\n        await this.updateNoteCount();\n        resolve();\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // Expense methods\n  async saveExpense(expense: ExpenseEntry): Promise<void> {\n    await this.encryptAndStore('expenses', expense);\n    await this.updateExpenseCount();\n  }\n\n  async getExpense(id: string): Promise<ExpenseEntry | null> {\n    return this.decryptAndRetrieve('expenses', id);\n  }\n\n  async getAllExpenses(): Promise<ExpenseEntry[]> {\n    return this.getAllEncrypted('expenses');\n  }\n\n  async deleteExpense(id: string): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['encrypted_data'], 'readwrite');\n      const store = transaction.objectStore('encrypted_data');\n      const request = store.delete(id);\n\n      request.onsuccess = async () => {\n        await this.updateExpenseCount();\n        resolve();\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // Reminder methods\n  async saveReminder(reminder: ReminderEntry): Promise<void> {\n    await this.encryptAndStore('reminders', reminder);\n    await this.updateReminderCount();\n  }\n\n  async getReminder(id: string): Promise<ReminderEntry | null> {\n    return this.decryptAndRetrieve('reminders', id);\n  }\n\n  async getAllReminders(): Promise<ReminderEntry[]> {\n    return this.getAllEncrypted('reminders');\n  }\n\n  async deleteReminder(id: string): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['encrypted_data'], 'readwrite');\n      const store = transaction.objectStore('encrypted_data');\n      const request = store.delete(id);\n\n      request.onsuccess = async () => {\n        await this.updateReminderCount();\n        resolve();\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // Update counts in metadata\n  private async updatePasswordCount(): Promise<void> {\n    const passwords = await this.getAllPasswords();\n    const metadata = await this.getMetadata();\n    if (metadata) {\n      metadata.passwordCount = passwords.length;\n      await this.saveMetadata(metadata);\n    }\n  }\n\n  private async updateSubscriptionCount(): Promise<void> {\n    const subscriptions = await this.getAllSubscriptions();\n    const metadata = await this.getMetadata();\n    if (metadata) {\n      metadata.subscriptionCount = subscriptions.length;\n      await this.saveMetadata(metadata);\n    }\n  }\n\n  private async updateNoteCount(): Promise<void> {\n    const notes = await this.getAllNotes();\n    const metadata = await this.getMetadata();\n    if (metadata) {\n      metadata.noteCount = notes.length;\n      await this.saveMetadata(metadata);\n    }\n  }\n\n  private async updateExpenseCount(): Promise<void> {\n    const expenses = await this.getAllExpenses();\n    const metadata = await this.getMetadata();\n    if (metadata) {\n      metadata.expenseCount = expenses.length;\n      await this.saveMetadata(metadata);\n    }\n  }\n\n  private async updateReminderCount(): Promise<void> {\n    const reminders = await this.getAllReminders();\n    const metadata = await this.getMetadata();\n    if (metadata) {\n      metadata.reminderCount = reminders.length;\n      await this.saveMetadata(metadata);\n    }\n  }\n\n  // Export vault data\n  async exportVault(exportPassword: string): Promise<string> {\n    const passwords = await this.getAllPasswords();\n    const subscriptions = await this.getAllSubscriptions();\n    const metadata = await this.getMetadata();\n\n    const exportData = {\n      passwords,\n      subscriptions,\n      metadata,\n      exportedAt: new Date().toISOString(),\n    };\n\n    const salt = CryptoService.generateSalt();\n    const key = await CryptoService.deriveKey(exportPassword, salt);\n    const { encrypted, iv } = await CryptoService.encrypt(JSON.stringify(exportData), key);\n\n    const encryptedExport = {\n      version: 1,\n      salt: CryptoService.uint8ArrayToBase64(salt),\n      iv: CryptoService.uint8ArrayToBase64(iv),\n      data: CryptoService.arrayBufferToBase64(encrypted),\n    };\n\n    return JSON.stringify(encryptedExport);\n  }\n\n  // Import vault data\n  async importVault(encryptedData: string, importPassword: string): Promise<void> {\n    try {\n      const encryptedExport = JSON.parse(encryptedData);\n      \n      const salt = CryptoService.base64ToUint8Array(encryptedExport.salt);\n      const iv = CryptoService.base64ToUint8Array(encryptedExport.iv);\n      const data = CryptoService.base64ToArrayBuffer(encryptedExport.data);\n\n      const key = await CryptoService.deriveKey(importPassword, salt);\n      const decrypted = await CryptoService.decrypt(data, key, iv);\n      const importData = JSON.parse(decrypted);\n\n      // Import passwords\n      for (const password of importData.passwords) {\n        await this.savePassword(password);\n      }\n\n      // Import subscriptions\n      for (const subscription of importData.subscriptions) {\n        await this.saveSubscription(subscription);\n      }\n\n    } catch (error) {\n      throw new Error('Failed to import vault data. Please check your import password.');\n    }\n  }\n\n  // Import passwords from CSV\n  async importPasswordsFromCSV(csvContent: string, parserId: string): Promise<{ imported: number; skipped: number }> {\n    const parser = PASSWORD_MANAGER_PARSERS.find(p => p.id === parserId);\n    if (!parser) {\n      throw new Error('Unknown password manager format');\n    }\n\n    let passwords: PasswordEntry[];\n    try {\n      passwords = parser.parser(csvContent);\n    } catch (error) {\n      throw new Error(`Failed to parse CSV file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    if (passwords.length === 0) {\n      throw new Error('No valid passwords found in CSV file');\n    }\n\n    // Fetch existing passwords once for efficient duplicate checking\n    const existingPasswords = await this.getAllPasswords();\n    const existingKeys = new Set(\n      existingPasswords.map(p => `${p.name.toLowerCase()}::${p.username.toLowerCase()}`)\n    );\n\n    let imported = 0;\n    let skipped = 0;\n    const importedKeys = new Set<string>();\n\n    for (const password of passwords) {\n      try {\n        // Create duplicate check key\n        const duplicateKey = `${password.name.toLowerCase()}::${password.username.toLowerCase()}`;\n        \n        // Check against existing passwords and already imported passwords\n        if (existingKeys.has(duplicateKey) || importedKeys.has(duplicateKey)) {\n          skipped++;\n          continue;\n        }\n\n        await this.savePassword(password);\n        importedKeys.add(duplicateKey);\n        imported++;\n      } catch (error) {\n        console.warn('Failed to import password:', password.name, error);\n        skipped++;\n      }\n    }\n\n    return { imported, skipped };\n  }\n\n  // Get available CSV parsers\n  getAvailableCSVParsers(): ParserConfig[] {\n    return PASSWORD_MANAGER_PARSERS;\n  }\n\n  // Password verification methods for authentication\n  private async getPasswordVerificationEntry(): Promise<{ data: string; iv: string } | null> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['encrypted_data'], 'readonly');\n      const store = transaction.objectStore('encrypted_data');\n      const request = store.get('password_verification');\n\n      request.onsuccess = () => {\n        const result = request.result;\n        if (result && result.store === 'verification') {\n          resolve({ data: result.data, iv: result.iv });\n        } else {\n          resolve(null);\n        }\n      };\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  private async createPasswordVerificationEntry(key: CryptoKey): Promise<void> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    const testString = 'VAULT_PASSWORD_VERIFICATION';\n    const { encrypted, iv } = await CryptoService.encrypt(testString, key);\n\n    const verificationEntry = {\n      id: 'password_verification',\n      store: 'verification',\n      data: CryptoService.arrayBufferToBase64(encrypted),\n      iv: CryptoService.uint8ArrayToBase64(iv),\n    };\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['encrypted_data'], 'readwrite');\n      const store = transaction.objectStore('encrypted_data');\n      const request = store.put(verificationEntry);\n\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  private async hasDecryptableEntryWithKey(key: CryptoKey): Promise<boolean> {\n    if (!this.db) throw new Error('Database not initialized');\n\n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['encrypted_data'], 'readonly');\n      const store = transaction.objectStore('encrypted_data');\n      const request = store.getAll();\n\n      request.onsuccess = async () => {\n        const results = request.result;\n        \n        // Find the first entry that belongs to passwords or subscriptions\n        for (const result of results) {\n          if (result.store === 'passwords' || result.store === 'subscriptions') {\n            try {\n              const encrypted = CryptoService.base64ToArrayBuffer(result.data);\n              const iv = CryptoService.base64ToUint8Array(result.iv);\n              \n              // Try to decrypt - if successful, key is valid\n              await CryptoService.decrypt(encrypted, key, iv);\n              resolve(true);\n              return;\n            } catch (error) {\n              // Decryption failed - continue to next entry\n              continue;\n            }\n          }\n        }\n        \n        // No decryptable entries found\n        resolve(false);\n      };\n\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  // Get current KDF configuration from vault metadata\n  async getKDFConfig(): Promise<CryptoKDFConfig | null> {\n    const metadata = await this.getMetadata();\n    if (!metadata?.kdfConfig) return null;\n    \n    return {\n      algorithm: metadata.kdfConfig.algorithm,\n      iterations: metadata.kdfConfig.iterations,\n      hash: metadata.kdfConfig.hash,\n    };\n  }\n\n  // Re-encrypt vault with new KDF configuration\n  async reencryptVault(masterPassword: string, newKdfConfig: CryptoKDFConfig, onProgress?: (progress: number) => void): Promise<void> {\n    if (!this.db || !this.encryptionKey) {\n      throw new Error('Vault must be unlocked to re-encrypt');\n    }\n\n    onProgress?.(10);\n\n    // Get current metadata and verify password\n    const metadata = await this.getMetadata();\n    if (!metadata) throw new Error('Vault metadata not found');\n\n    onProgress?.(20);\n\n    // Decrypt all existing data with current key\n    const [passwords, subscriptions] = await Promise.all([\n      this.getAllPasswords(),\n      this.getAllSubscriptions(),\n    ]);\n\n    onProgress?.(40);\n\n    // Generate new salt and derive new key with new KDF config\n    const newSalt = CryptoService.generateSalt();\n    const { key: newKey, timeMs } = await CryptoService.deriveKeyWithProgress(\n      masterPassword, \n      newSalt, \n      newKdfConfig,\n      (kdfProgress) => onProgress?.(40 + (kdfProgress * 0.3))\n    );\n\n    onProgress?.(70);\n\n    // Set new encryption key for re-encrypting data\n    const oldKey = this.encryptionKey;\n    this.encryptionKey = newKey;\n\n    // Re-encrypt all data with new key BEFORE updating metadata\n    onProgress?.(75);\n\n    try {\n      // Re-encrypt all passwords and subscriptions with new key\n      let itemsProcessed = 0;\n      const totalItems = passwords.length + subscriptions.length;\n      \n      for (const password of passwords) {\n        await this.savePassword(password);\n        itemsProcessed++;\n        onProgress?.(75 + (itemsProcessed / totalItems) * 20);\n      }\n      \n      for (const subscription of subscriptions) {\n        await this.saveSubscription(subscription);\n        itemsProcessed++;\n        onProgress?.(75 + (itemsProcessed / totalItems) * 20);\n      }\n\n      onProgress?.(95);\n\n      // Create new password verification entry with new key\n      await this.createPasswordVerificationEntry(newKey);\n\n      // ONLY NOW update metadata atomically - this is the commit point\n      const newMetadata: VaultMetadata = {\n        ...metadata,\n        encryptionSalt: CryptoService.uint8ArrayToBase64(newSalt),\n        kdfConfig: {\n          algorithm: newKdfConfig.algorithm,\n          iterations: newKdfConfig.iterations,\n          hash: newKdfConfig.hash,\n        },\n        lastUnlocked: new Date(),\n      };\n      \n      await this.saveMetadata(newMetadata);\n\n      onProgress?.(100);\n    } catch (error) {\n      // Restore old key on any failure\n      this.encryptionKey = oldKey;\n      throw new Error(`Re-encryption failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n\nexport const vaultStorage = new VaultStorage();\n","size_bytes":25762},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Lock, Bookmark, DollarSign, AlertTriangle, Eye, Copy, Edit } from 'lucide-react';\nimport { useVault } from '@/contexts/vault-context';\nimport { format, isWithinInterval, addDays, startOfDay, differenceInCalendarDays } from 'date-fns';\nimport { useState } from 'react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Dashboard() {\n  const { passwords, subscriptions, stats } = useVault();\n  const { toast } = useToast();\n  const [copiedId, setCopiedId] = useState<string | null>(null);\n\n  // Get recent passwords (last 5)\n  const recentPasswords = [...passwords]\n    .sort((a, b) => new Date(b.lastUsed || b.updatedAt).getTime() - new Date(a.lastUsed || a.updatedAt).getTime())\n    .slice(0, 5);\n\n  // Get upcoming subscription renewals\n  const upcomingRenewals = subscriptions\n    .filter(s => s.isActive)\n    .filter(s => {\n      const today = new Date();\n      const reminderDate = addDays(today, s.reminderDays);\n      return s.nextBillingDate <= reminderDate;\n    })\n    .sort((a, b) => a.nextBillingDate.getTime() - b.nextBillingDate.getTime())\n    .slice(0, 5);\n\n  const copyPassword = async (password: string, id: string) => {\n    try {\n      await navigator.clipboard.writeText(password);\n      setCopiedId(id);\n      toast({\n        title: \"Copied\",\n        description: \"Password copied to clipboard\",\n      });\n      setTimeout(() => setCopiedId(null), 2000);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy password\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getRenewalStatus = (nextBillingDate: Date, reminderDays: number) => {\n    const today = new Date();\n    const daysUntil = differenceInCalendarDays(nextBillingDate, today);\n    \n    // Overdue or due today\n    if (daysUntil <= 0) {\n      return { \n        text: daysUntil === 0 ? 'Due Today' : 'Overdue', \n        color: 'bg-red-100 text-red-700', \n        urgent: true \n      };\n    }\n    // Due tomorrow\n    else if (daysUntil === 1) {\n      return { \n        text: 'Due Tomorrow', \n        color: 'bg-red-100 text-red-700', \n        urgent: true \n      };\n    }\n    // Within reminder period\n    else if (daysUntil <= reminderDays) {\n      return { \n        text: `Due in ${daysUntil} days`, \n        color: 'bg-amber-100 text-amber-700', \n        urgent: true \n      };\n    }\n    // Outside reminder period\n    else {\n      return { \n        text: `Due in ${daysUntil} days`, \n        color: 'bg-blue-100 text-blue-700', \n        urgent: false \n      };\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-8\" data-testid=\"dashboard-page\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-blue-500/10 rounded-lg flex items-center justify-center\">\n                <Lock className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Passwords</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-total-passwords\">\n                  {stats.totalPasswords}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-purple-500/10 rounded-lg flex items-center justify-center\">\n                <Bookmark className=\"w-6 h-6 text-purple-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Active Subscriptions</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-active-subscriptions\">\n                  {stats.activeSubscriptions}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-green-500/10 rounded-lg flex items-center justify-center\">\n                <DollarSign className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Monthly Spend</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-monthly-spend\">\n                  ${stats.monthlySpend.toFixed(2)}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-amber-500/10 rounded-lg flex items-center justify-center\">\n                <AlertTriangle className=\"w-6 h-6 text-amber-600\" />\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Weak Passwords</p>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"stat-weak-passwords\">\n                  {stats.weakPasswords}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity & Alerts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Recent Passwords */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg\">Recent Passwords</CardTitle>\n              <Button variant=\"link\" className=\"text-primary hover:underline text-sm p-0\" data-testid=\"view-all-passwords\">\n                View all\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {recentPasswords.length === 0 ? (\n              <p className=\"text-muted-foreground text-center py-8\" data-testid=\"no-recent-passwords\">\n                No passwords yet. Add your first password to get started.\n              </p>\n            ) : (\n              <div className=\"space-y-3\">\n                {recentPasswords.map((password) => (\n                  <div\n                    key={password.id}\n                    className=\"flex items-center gap-3 p-3 hover:bg-secondary rounded-lg cursor-pointer group\"\n                    data-testid={`recent-password-${password.id}`}\n                  >\n                    <div className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center text-primary font-semibold text-sm\">\n                      {password.name.charAt(0).toUpperCase()}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium text-foreground truncate\">{password.name}</p>\n                      <p className=\"text-sm text-muted-foreground truncate\">{password.username}</p>\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {password.lastUsed \n                        ? format(new Date(password.lastUsed), 'MMM d') \n                        : format(new Date(password.updatedAt), 'MMM d')\n                      }\n                    </div>\n                    <div className=\"opacity-0 group-hover:opacity-100 flex gap-1 transition-opacity\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          copyPassword(password.password, password.id);\n                        }}\n                        data-testid={`copy-password-${password.id}`}\n                      >\n                        {copiedId === password.id ? (\n                          <span className=\"text-green-600 text-xs\">Copied!</span>\n                        ) : (\n                          <Copy className=\"h-4 w-4\" />\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Subscription Alerts */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg\">Upcoming Renewals</CardTitle>\n              <Button variant=\"link\" className=\"text-primary hover:underline text-sm p-0\" data-testid=\"view-all-renewals\">\n                View all\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {upcomingRenewals.length === 0 ? (\n              <p className=\"text-muted-foreground text-center py-8\" data-testid=\"no-upcoming-renewals\">\n                No upcoming renewals. All your subscriptions are up to date.\n              </p>\n            ) : (\n              <div className=\"space-y-3\">\n                {upcomingRenewals.map((subscription) => {\n                  const status = getRenewalStatus(subscription.nextBillingDate, subscription.reminderDays);\n                  return (\n                    <div\n                      key={subscription.id}\n                      className={`flex items-center gap-3 p-3 rounded-lg ${\n                        status.urgent ? 'bg-red-50 border border-red-200' : 'hover:bg-secondary'\n                      }`}\n                      data-testid={`upcoming-subscription-${subscription.id}`}\n                    >\n                      <div className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center text-primary font-semibold text-sm\">\n                        {subscription.name.charAt(0).toUpperCase()}\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-foreground\">\n                          {subscription.name}\n                          {subscription.plan && ` ${subscription.plan}`}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {format(subscription.nextBillingDate, 'MMM d, yyyy')} - \n                          ${subscription.cost.toFixed(2)}/{subscription.billingCycle.charAt(0)}\n                        </p>\n                      </div>\n                      <div className={`px-2 py-1 rounded-full text-xs font-medium ${status.color}`}>\n                        {status.text}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Security Health */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Security Health</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n              <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                <AlertTriangle className=\"w-6 h-6 text-red-600\" />\n              </div>\n              <p className=\"text-2xl font-bold text-red-600\">{stats.weakPasswords}</p>\n              <p className=\"text-sm text-red-600\">Weak Passwords</p>\n            </div>\n\n            <div className=\"text-center p-4 bg-amber-50 rounded-lg\">\n              <div className=\"w-12 h-12 bg-amber-100 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                <Copy className=\"w-6 h-6 text-amber-600\" />\n              </div>\n              <p className=\"text-2xl font-bold text-amber-600\">\n                {passwords.filter(p => {\n                  const duplicates = passwords.filter(other => other.password === p.password && other.id !== p.id);\n                  return duplicates.length > 0;\n                }).length}\n              </p>\n              <p className=\"text-sm text-amber-600\">Reused Passwords</p>\n            </div>\n\n            <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                <Lock className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <p className=\"text-2xl font-bold text-green-600\">\n                {stats.totalPasswords - stats.weakPasswords}\n              </p>\n              <p className=\"text-sm text-green-600\">Strong Passwords</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":12760},"client/src/pages/login.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Eye, EyeOff, Lock, Fingerprint } from 'lucide-react';\nimport { useAuth } from '@/contexts/auth-context';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Login() {\n  const { login, createVault, vaultExists } = useAuth();\n  const { toast } = useToast();\n  \n  const [masterPassword, setMasterPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [rememberMe, setRememberMe] = useState(false);\n  const [isCreatingVault, setIsCreatingVault] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!masterPassword) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter your master password\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const success = await login(masterPassword);\n      if (!success) {\n        toast({\n          title: \"Authentication Failed\",\n          description: \"Invalid master password. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to unlock vault. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleCreateVault = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!masterPassword) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a master password\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (masterPassword.length < 8) {\n      toast({\n        title: \"Error\",\n        description: \"Master password must be at least 8 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (masterPassword !== confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      await createVault(masterPassword);\n      toast({\n        title: \"Success\",\n        description: \"Vault created successfully! Welcome to SecureVault.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create vault. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleBiometricAuth = async () => {\n    // Web Authentication API for biometric authentication\n    if (!navigator.credentials || !window.PublicKeyCredential) {\n      toast({\n        title: \"Not Supported\",\n        description: \"Biometric authentication is not supported on this device\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    toast({\n      title: \"Coming Soon\",\n      description: \"Biometric authentication will be available in a future update\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center gradient-bg px-4\" data-testid=\"login-page\">\n      <div className=\"max-w-md w-full\">\n        {/* Logo and Title */}\n        <div className=\"text-center mb-8\">\n          <div className=\"mx-auto w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mb-4\">\n            <Lock className=\"w-8 h-8 text-primary-foreground\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-foreground\">SecureVault</h1>\n          <p className=\"text-muted-foreground mt-2\">Offline Password & Subscription Manager</p>\n        </div>\n\n        {/* Login/Create Vault Form */}\n        <Card className=\"shadow-lg border\">\n          <CardContent className=\"pt-6\">\n            <form onSubmit={vaultExists ? handleLogin : handleCreateVault} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"masterPassword\" className=\"block text-sm font-medium text-foreground mb-2\">\n                  {vaultExists ? 'Master Password' : 'Create Master Password'}\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    type={showPassword ? 'text' : 'password'}\n                    id=\"masterPassword\"\n                    className=\"pr-10\"\n                    placeholder={vaultExists ? 'Enter your master password' : 'Create a strong master password'}\n                    value={masterPassword}\n                    onChange={(e) => setMasterPassword(e.target.value)}\n                    data-testid=\"input-master-password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    data-testid=\"toggle-master-password\"\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-5 w-5 text-muted-foreground\" />\n                    ) : (\n                      <Eye className=\"h-5 w-5 text-muted-foreground\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n\n              {!vaultExists && (\n                <div>\n                  <Label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-foreground mb-2\">\n                    Confirm Master Password\n                  </Label>\n                  <div className=\"relative\">\n                    <Input\n                      type={showConfirmPassword ? 'text' : 'password'}\n                      id=\"confirmPassword\"\n                      className=\"pr-10\"\n                      placeholder=\"Confirm your master password\"\n                      value={confirmPassword}\n                      onChange={(e) => setConfirmPassword(e.target.value)}\n                      data-testid=\"input-confirm-password\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-0 top-0 h-full px-3 hover:bg-transparent\"\n                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                      data-testid=\"toggle-confirm-password\"\n                    >\n                      {showConfirmPassword ? (\n                        <EyeOff className=\"h-5 w-5 text-muted-foreground\" />\n                      ) : (\n                        <Eye className=\"h-5 w-5 text-muted-foreground\" />\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {vaultExists && (\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <Checkbox \n                      id=\"remember\"\n                      checked={rememberMe}\n                      onCheckedChange={(checked) => setRememberMe(Boolean(checked))}\n                      data-testid=\"checkbox-remember-me\"\n                    />\n                    <Label htmlFor=\"remember\" className=\"ml-2 text-sm text-muted-foreground\">\n                      Remember me\n                    </Label>\n                  </div>\n                  <Button \n                    type=\"button\" \n                    variant=\"link\" \n                    className=\"text-sm text-primary hover:underline p-0\"\n                    data-testid=\"button-forgot-password\"\n                  >\n                    Forgot password?\n                  </Button>\n                </div>\n              )}\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-unlock-vault\"\n              >\n                {isLoading ? 'Processing...' : (vaultExists ? 'Unlock Vault' : 'Create Vault')}\n              </Button>\n            </form>\n\n            {vaultExists && (\n              <>\n                {/* Biometric Option */}\n                <div className=\"mt-4 pt-4 border-t border-border\">\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    className=\"w-full flex items-center justify-center gap-2 text-muted-foreground hover:text-foreground py-2\"\n                    onClick={handleBiometricAuth}\n                    data-testid=\"button-biometric-auth\"\n                  >\n                    <Fingerprint className=\"w-5 h-5\" />\n                    Use Biometric Authentication\n                  </Button>\n                </div>\n\n                {/* Switch to Create Vault */}\n                <div className=\"text-center mt-6\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    Need to create a new vault?{' '}\n                    <Button\n                      type=\"button\"\n                      variant=\"link\"\n                      className=\"text-primary hover:underline p-0\"\n                      onClick={() => setIsCreatingVault(true)}\n                      data-testid=\"button-create-new-vault\"\n                    >\n                      Create New Vault\n                    </Button>\n                  </p>\n                </div>\n              </>\n            )}\n\n            {!vaultExists && (\n              <div className=\"mt-4 p-4 bg-blue-50 dark:bg-blue-950/20 rounded-lg\">\n                <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                  <strong>Important:</strong> Your master password cannot be recovered. \n                  Make sure to choose a strong password that you can remember.\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10214},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/passwords.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Plus, Copy, Edit, Trash2, Eye, EyeOff, Search } from 'lucide-react';\nimport { useVault } from '@/contexts/vault-context';\nimport { useToast } from '@/hooks/use-toast';\nimport { PASSWORD_CATEGORIES } from '@shared/schema';\nimport { PasswordGenerator } from '@/lib/password-generator';\nimport { AddPasswordModal } from '@/components/add-password-modal';\nimport { format } from 'date-fns';\n\nexport default function Passwords() {\n  const { passwords, deletePassword, searchQuery, setSearchQuery } = useVault();\n  const { toast } = useToast();\n  \n  const [showAddModal, setShowAddModal] = useState(false);\n  const [categoryFilter, setCategoryFilter] = useState<string>('all');\n  const [strengthFilter, setStrengthFilter] = useState<string>('all');\n  const [visiblePasswords, setVisiblePasswords] = useState<Set<string>>(new Set());\n  const [copiedId, setCopiedId] = useState<string | null>(null);\n\n  // Filter and search passwords\n  const filteredPasswords = useMemo(() => {\n    return passwords.filter(password => {\n      // Search filter\n      const matchesSearch = searchQuery === '' || \n        password.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        password.username.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        password.url?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        password.category?.toLowerCase().includes(searchQuery.toLowerCase());\n\n      // Category filter\n      const matchesCategory = categoryFilter === 'all' || \n        password.category === categoryFilter;\n\n      // Strength filter\n      const { level } = PasswordGenerator.calculateStrength(password.password);\n      const matchesStrength = strengthFilter === 'all' ||\n        (strengthFilter === 'weak' && level === 'weak') ||\n        (strengthFilter === 'medium' && level === 'medium') ||\n        (strengthFilter === 'strong' && (level === 'strong' || level === 'very-strong'));\n\n      return matchesSearch && matchesCategory && matchesStrength;\n    });\n  }, [passwords, searchQuery, categoryFilter, strengthFilter]);\n\n  const togglePasswordVisibility = (id: string) => {\n    setVisiblePasswords(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(id)) {\n        newSet.delete(id);\n      } else {\n        newSet.add(id);\n      }\n      return newSet;\n    });\n  };\n\n  const copyPassword = async (password: string, id: string) => {\n    try {\n      await navigator.clipboard.writeText(password);\n      setCopiedId(id);\n      toast({\n        title: \"Copied\",\n        description: \"Password copied to clipboard\",\n      });\n      setTimeout(() => setCopiedId(null), 2000);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy password\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const copyUsername = async (username: string) => {\n    try {\n      await navigator.clipboard.writeText(username);\n      toast({\n        title: \"Copied\",\n        description: \"Username copied to clipboard\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy username\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeletePassword = async (id: string, name: string) => {\n    if (confirm(`Are you sure you want to delete the password for \"${name}\"?`)) {\n      try {\n        await deletePassword(id);\n        toast({\n          title: \"Deleted\",\n          description: \"Password deleted successfully\",\n        });\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to delete password\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const getStrengthIndicator = (password: string) => {\n    const { level, score } = PasswordGenerator.calculateStrength(password);\n    \n    const colors = {\n      weak: { bg: 'bg-red-500', text: 'text-red-600' },\n      medium: { bg: 'bg-amber-500', text: 'text-amber-600' },\n      strong: { bg: 'bg-blue-500', text: 'text-blue-600' },\n      'very-strong': { bg: 'bg-green-500', text: 'text-green-600' },\n    };\n\n    const color = colors[level];\n    const width = `${score}%`;\n\n    return (\n      <div className=\"flex items-center gap-2\">\n        <div className=\"w-16 h-2 bg-muted rounded-full overflow-hidden\">\n          <div \n            className={`h-full rounded-full transition-all duration-300 ${color.bg}`}\n            style={{ width }}\n          />\n        </div>\n        <span className={`text-xs font-medium capitalize ${color.text}`}>\n          {level.replace('-', ' ')}\n        </span>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\" data-testid=\"passwords-page\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\">Password Vault</h1>\n          <p className=\"text-muted-foreground\">\n            Manage your passwords securely with end-to-end encryption\n          </p>\n        </div>\n        <Button\n          onClick={() => setShowAddModal(true)}\n          data-testid=\"add-password-button\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Password\n        </Button>\n      </div>\n\n      {/* Search and Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search passwords & services...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"search-passwords\"\n              />\n            </div>\n            <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"filter-category\">\n                <SelectValue placeholder=\"All Categories\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                {PASSWORD_CATEGORIES.map(category => (\n                  <SelectItem key={category} value={category}>\n                    {category}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Select value={strengthFilter} onValueChange={setStrengthFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"filter-strength\">\n                <SelectValue placeholder=\"All Strength\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Strength</SelectItem>\n                <SelectItem value=\"strong\">Strong</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"weak\">Weak</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Passwords List */}\n      {filteredPasswords.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-12\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Plus className=\"w-8 h-8 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-foreground mb-2\">\n                {passwords.length === 0 ? 'No passwords yet' : 'No passwords match your search'}\n              </h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {passwords.length === 0 \n                  ? 'Get started by adding your first password entry'\n                  : 'Try adjusting your search terms or filters'\n                }\n              </p>\n              {passwords.length === 0 && (\n                <Button\n                  onClick={() => setShowAddModal(true)}\n                  data-testid=\"add-first-password-button\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Your First Password\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardHeader className=\"pb-0\">\n            <div className=\"flex items-center text-sm font-medium text-muted-foreground\">\n              <div className=\"flex-1\">Site / Service</div>\n              <div className=\"w-40 hidden sm:block\">Username</div>\n              <div className=\"w-32 hidden md:block\">Strength</div>\n              <div className=\"w-32 hidden lg:block\">Last Used</div>\n              <div className=\"w-32\">Actions</div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"divide-y divide-border\">\n              {filteredPasswords.map((password) => (\n                <div\n                  key={password.id}\n                  className=\"p-4 hover:bg-muted/50 transition-colors\"\n                  data-testid={`password-entry-${password.id}`}\n                >\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"flex-1 flex items-center gap-3\">\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center text-primary font-semibold\">\n                        {password.name.charAt(0).toUpperCase()}\n                      </div>\n                      <div className=\"min-w-0 flex-1\">\n                        <p className=\"font-medium text-foreground truncate\">\n                          {password.name}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground truncate\">\n                          {password.url || 'No URL provided'}\n                        </p>\n                        <div className=\"sm:hidden mt-1\">\n                          <p className=\"text-xs text-muted-foreground truncate\">\n                            {password.username}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"w-40 hidden sm:block\">\n                      <p className=\"text-sm text-foreground truncate\">\n                        {password.username}\n                      </p>\n                    </div>\n\n                    <div className=\"w-32 hidden md:block\">\n                      {getStrengthIndicator(password.password)}\n                    </div>\n\n                    <div className=\"w-32 hidden lg:block\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        {password.lastUsed \n                          ? format(new Date(password.lastUsed), 'MMM d')\n                          : format(new Date(password.updatedAt), 'MMM d')\n                        }\n                      </p>\n                    </div>\n\n                    <div className=\"w-32 flex items-center gap-1\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => togglePasswordVisibility(password.id)}\n                        data-testid={`toggle-password-${password.id}`}\n                      >\n                        {visiblePasswords.has(password.id) ? (\n                          <EyeOff className=\"h-4 w-4\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4\" />\n                        )}\n                      </Button>\n\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => copyUsername(password.username)}\n                        title=\"Copy username\"\n                        data-testid={`copy-username-${password.id}`}\n                      >\n                        <Copy className=\"h-4 w-4\" />\n                      </Button>\n\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => copyPassword(password.password, password.id)}\n                        title=\"Copy password\"\n                        data-testid={`copy-password-${password.id}`}\n                      >\n                        {copiedId === password.id ? (\n                          <span className=\"text-green-600 text-xs\">✓</span>\n                        ) : (\n                          <Copy className=\"h-4 w-4\" />\n                        )}\n                      </Button>\n\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => handleDeletePassword(password.id, password.name)}\n                        title=\"Delete password\"\n                        data-testid={`delete-password-${password.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  {visiblePasswords.has(password.id) && (\n                    <div className=\"mt-3 p-3 bg-muted/50 rounded-lg\">\n                      <div className=\"flex items-center justify-between\">\n                        <code className=\"text-sm font-mono\">\n                          {password.password}\n                        </code>\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => copyPassword(password.password, password.id)}\n                          data-testid={`copy-visible-password-${password.id}`}\n                        >\n                          <Copy className=\"h-3 w-3 mr-1\" />\n                          Copy\n                        </Button>\n                      </div>\n                      {password.notes && (\n                        <div className=\"mt-2 pt-2 border-t border-border\">\n                          <p className=\"text-xs text-muted-foreground\">\n                            <strong>Notes:</strong> {password.notes}\n                          </p>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <AddPasswordModal\n        open={showAddModal}\n        onOpenChange={setShowAddModal}\n      />\n    </div>\n  );\n}\n","size_bytes":14789},"client/src/pages/subscriptions.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Plus, Edit, Trash2, Bell, Search, Calendar, DollarSign, BarChart3 } from 'lucide-react';\nimport { useVault } from '@/contexts/vault-context';\nimport { useToast } from '@/hooks/use-toast';\nimport { SUBSCRIPTION_CATEGORIES } from '@shared/schema';\nimport { AddSubscriptionModal } from '@/components/add-subscription-modal';\nimport { SubscriptionAnalytics } from '@/components/subscription-analytics';\nimport { format, addDays } from 'date-fns';\n\nexport default function Subscriptions() {\n  const { subscriptions, deleteSubscription, searchQuery, setSearchQuery, stats } = useVault();\n  const { toast } = useToast();\n  \n  const [showAddModal, setShowAddModal] = useState(false);\n  const [categoryFilter, setCategoryFilter] = useState<string>('all');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n\n  // Filter and search subscriptions\n  const filteredSubscriptions = useMemo(() => {\n    return subscriptions.filter(subscription => {\n      // Search filter\n      const matchesSearch = searchQuery === '' || \n        subscription.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        (subscription.plan ?? '').toLowerCase().includes(searchQuery.toLowerCase()) ||\n        (subscription.category ?? '').toLowerCase().includes(searchQuery.toLowerCase());\n\n      // Category filter\n      const matchesCategory = categoryFilter === 'all' || \n        subscription.category === categoryFilter;\n\n      // Status filter\n      const matchesStatus = statusFilter === 'all' ||\n        (statusFilter === 'active' && subscription.isActive) ||\n        (statusFilter === 'inactive' && !subscription.isActive);\n\n      return matchesSearch && matchesCategory && matchesStatus;\n    });\n  }, [subscriptions, searchQuery, categoryFilter, statusFilter]);\n\n  const handleDeleteSubscription = async (id: string, name: string) => {\n    if (confirm(`Are you sure you want to delete the subscription for \"${name}\"?`)) {\n      try {\n        await deleteSubscription(id);\n        toast({\n          title: \"Deleted\",\n          description: \"Subscription deleted successfully\",\n        });\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to delete subscription\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const getRenewalStatus = (nextBillingDate: Date, reminderDays: number, isActive: boolean) => {\n    if (!isActive) {\n      return { text: 'Inactive', color: 'bg-gray-100 text-gray-700', urgent: false };\n    }\n\n    const today = new Date();\n    const daysUntil = Math.ceil((nextBillingDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n    \n    // Overdue or due today\n    if (daysUntil <= 0) {\n      return { \n        text: daysUntil === 0 ? 'Due Today' : 'Overdue', \n        color: 'bg-red-100 text-red-700 border-red-200', \n        urgent: true \n      };\n    }\n    // Due tomorrow\n    else if (daysUntil === 1) {\n      return { \n        text: 'Due Tomorrow', \n        color: 'bg-red-100 text-red-700 border-red-200', \n        urgent: true \n      };\n    }\n    // Within reminder period\n    else if (daysUntil <= reminderDays) {\n      return { \n        text: `Due in ${daysUntil} days`, \n        color: 'bg-amber-100 text-amber-700 border-amber-200', \n        urgent: true \n      };\n    }\n    // Outside reminder period but within a week\n    else if (daysUntil <= 7) {\n      return { \n        text: `Due in ${daysUntil} days`, \n        color: 'bg-blue-100 text-blue-700 border-blue-200', \n        urgent: false \n      };\n    } \n    // More than a week away\n    else {\n      return { \n        text: `Due in ${daysUntil} days`, \n        color: 'bg-green-100 text-green-700 border-green-200', \n        urgent: false \n      };\n    }\n  };\n\n  const formatCurrency = (amount: number, currency: string) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: currency,\n    }).format(amount);\n  };\n\n  const getBillingCycleShort = (cycle: string) => {\n    switch (cycle) {\n      case 'monthly': return '/mo';\n      case 'yearly': return '/yr';\n      case 'weekly': return '/wk';\n      case 'daily': return '/day';\n      default: return '';\n    }\n  };\n\n  // Calculate spending summary for different periods\n  const spendingSummary = useMemo(() => {\n    const activeSubscriptions = subscriptions.filter(s => s.isActive);\n    \n    const monthlySpend = activeSubscriptions.reduce((total, s) => {\n      let monthlyAmount = s.cost;\n      if (s.billingCycle === 'yearly') monthlyAmount /= 12;\n      else if (s.billingCycle === 'weekly') monthlyAmount *= 4.33;\n      else if (s.billingCycle === 'daily') monthlyAmount *= 30;\n      return total + monthlyAmount;\n    }, 0);\n\n    const yearlySpend = monthlySpend * 12;\n\n    return {\n      monthly: monthlySpend,\n      yearly: yearlySpend,\n      count: activeSubscriptions.length,\n    };\n  }, [subscriptions]);\n\n  return (\n    <div className=\"p-6 space-y-6\" data-testid=\"subscriptions-page\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\">Subscriptions</h1>\n          <p className=\"text-muted-foreground\">\n            Track and manage your recurring subscriptions and spending\n          </p>\n        </div>\n        <Button\n          onClick={() => setShowAddModal(true)}\n          data-testid=\"add-subscription-button\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Subscription\n        </Button>\n      </div>\n\n      {/* Quick Spending Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <DollarSign className=\"w-5 h-5\" />\n            Quick Overview\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <p className=\"text-3xl font-bold text-primary\" data-testid=\"monthly-spend\">\n                {formatCurrency(spendingSummary.monthly, 'USD')}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">Monthly (USD)</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-3xl font-bold text-muted-foreground\" data-testid=\"yearly-spend\">\n                {formatCurrency(spendingSummary.yearly, 'USD')}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">Yearly (USD)</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-3xl font-bold text-green-600\" data-testid=\"active-count\">\n                {spendingSummary.count}\n              </p>\n              <p className=\"text-sm text-green-600\">Active Subscriptions</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tabs for Subscriptions and Analytics */}\n      <Tabs defaultValue=\"subscriptions\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"subscriptions\" data-testid=\"subscriptions-tab\">\n            <Calendar className=\"w-4 h-4 mr-2\" />\n            Subscriptions\n          </TabsTrigger>\n          <TabsTrigger value=\"analytics\" data-testid=\"analytics-tab\">\n            <BarChart3 className=\"w-4 h-4 mr-2\" />\n            Analytics\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"subscriptions\" className=\"space-y-6\">\n          {/* Search and Filters */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search subscriptions...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"search-subscriptions\"\n                  />\n                </div>\n                <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                  <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"filter-category\">\n                    <SelectValue placeholder=\"All Categories\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    {SUBSCRIPTION_CATEGORIES.map(category => (\n                      <SelectItem key={category} value={category}>\n                        {category}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"filter-status\">\n                    <SelectValue placeholder=\"All Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"inactive\">Inactive</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Subscriptions Grid */}\n          {filteredSubscriptions.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-12\">\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Plus className=\"w-8 h-8 text-muted-foreground\" />\n                  </div>\n                  <h3 className=\"text-lg font-medium text-foreground mb-2\">\n                    {subscriptions.length === 0 ? 'No subscriptions yet' : 'No subscriptions match your search'}\n                  </h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {subscriptions.length === 0 \n                      ? 'Start tracking your subscriptions to manage your spending'\n                      : 'Try adjusting your search terms or filters'\n                    }\n                  </p>\n                  {subscriptions.length === 0 && (\n                    <Button\n                      onClick={() => setShowAddModal(true)}\n                      data-testid=\"add-first-subscription-button\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add Your First Subscription\n                    </Button>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredSubscriptions.map((subscription) => {\n                const status = getRenewalStatus(subscription.nextBillingDate, subscription.reminderDays, subscription.isActive);\n                \n                return (\n                  <Card\n                    key={subscription.id}\n                    className={`hover:shadow-md transition-shadow ${status.urgent ? 'ring-2 ring-red-200' : ''}`}\n                    data-testid={`subscription-card-${subscription.id}`}\n                  >\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center gap-3 mb-4\">\n                        <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center text-primary font-semibold text-lg\">\n                          {subscription.name.charAt(0).toUpperCase()}\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <h4 className=\"font-semibold text-foreground truncate\">\n                            {subscription.name}\n                          </h4>\n                          <p className=\"text-sm text-muted-foreground truncate\">\n                            {subscription.plan || 'Standard Plan'}\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2 mb-4\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-muted-foreground\">Cost</span>\n                          <span className=\"font-medium text-foreground\">\n                            {formatCurrency(subscription.cost, subscription.currency)}\n                            {getBillingCycleShort(subscription.billingCycle)}\n                          </span>\n                        </div>\n\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-muted-foreground\">Next Billing</span>\n                          <span className=\"font-medium text-foreground text-sm\">\n                            {format(subscription.nextBillingDate, 'MMM d, yyyy')}\n                          </span>\n                        </div>\n\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-muted-foreground\">Status</span>\n                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${status.color}`}>\n                            {status.text}\n                          </span>\n                        </div>\n\n                        {subscription.category && (\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-sm text-muted-foreground\">Category</span>\n                            <span className=\"text-sm font-medium text-foreground\">\n                              {subscription.category}\n                            </span>\n                          </div>\n                        )}\n                      </div>\n\n                      {subscription.notes && (\n                        <div className=\"mb-4 p-3 bg-muted/50 rounded-lg\">\n                          <p className=\"text-xs text-muted-foreground\">\n                            <strong>Notes:</strong> {subscription.notes}\n                          </p>\n                        </div>\n                      )}\n\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"flex-1\"\n                          data-testid={`edit-subscription-${subscription.id}`}\n                        >\n                          <Edit className=\"w-3 w-3 mr-1\" />\n                          Edit\n                        </Button>\n                        \n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"flex-1\"\n                          data-testid={`remind-subscription-${subscription.id}`}\n                        >\n                          <Bell className=\"w-3 w-3 mr-1\" />\n                          Remind\n                        </Button>\n\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDeleteSubscription(subscription.id, subscription.name)}\n                          data-testid={`delete-subscription-${subscription.id}`}\n                        >\n                          <Trash2 className=\"w-3 w-3 text-destructive\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          <SubscriptionAnalytics \n            subscriptions={filteredSubscriptions} \n            allSubscriptions={subscriptions}\n            searchQuery={searchQuery}\n            categoryFilter={categoryFilter}\n            statusFilter={statusFilter}\n          />\n        </TabsContent>\n      </Tabs>\n\n      <AddSubscriptionModal\n        open={showAddModal}\n        onOpenChange={setShowAddModal}\n      />\n    </div>\n  );\n}","size_bytes":16677},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/password-strength-meter.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { PasswordGenerator } from \"@/lib/password-generator\";\n\ninterface PasswordStrengthMeterProps {\n  password: string;\n  className?: string;\n}\n\nexport function PasswordStrengthMeter({ password, className }: PasswordStrengthMeterProps) {\n  const { score, level, feedback } = PasswordGenerator.calculateStrength(password);\n\n  const getColorClass = () => {\n    switch (level) {\n      case 'weak': return 'bg-red-500';\n      case 'medium': return 'bg-amber-500';\n      case 'strong': return 'bg-blue-500';\n      case 'very-strong': return 'bg-green-500';\n      default: return 'bg-gray-300';\n    }\n  };\n\n  const getLevelText = () => {\n    switch (level) {\n      case 'weak': return 'Weak';\n      case 'medium': return 'Medium';\n      case 'strong': return 'Strong';\n      case 'very-strong': return 'Very Strong';\n      default: return 'Enter password';\n    }\n  };\n\n  const getLevelColor = () => {\n    switch (level) {\n      case 'weak': return 'text-red-600';\n      case 'medium': return 'text-amber-600';\n      case 'strong': return 'text-blue-600';\n      case 'very-strong': return 'text-green-600';\n      default: return 'text-muted-foreground';\n    }\n  };\n\n  return (\n    <div className={cn(\"space-y-2\", className)}>\n      <div className=\"flex items-center justify-between\">\n        <span className=\"text-xs font-medium text-foreground\">Password Strength</span>\n        <span className={cn(\"text-xs font-medium\", getLevelColor())}>\n          {getLevelText()}\n        </span>\n      </div>\n      <div className=\"w-full h-2 bg-muted rounded-full overflow-hidden\">\n        <div\n          className={cn(\"h-full rounded-full transition-all duration-300\", getColorClass())}\n          style={{ width: `${password ? score : 0}%` }}\n        />\n      </div>\n      {feedback.length > 0 && password.length > 0 && (\n        <div className=\"text-xs text-muted-foreground\">\n          <ul className=\"list-disc list-inside space-y-1\">\n            {feedback.slice(0, 2).map((item, index) => (\n              <li key={index}>{item}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":2128},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/import-export-modal.tsx":{"content":"import { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Download, Upload, FileText, Shield, Database } from 'lucide-react';\nimport { useVault } from '@/contexts/vault-context';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface ImportExportModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function ImportExportModal({ open, onOpenChange }: ImportExportModalProps) {\n  const { exportVault, importVault, importPasswordsFromCSV, getAvailableCSVParsers } = useVault();\n  const { toast } = useToast();\n  \n  const [exportPassword, setExportPassword] = useState('');\n  const [importPassword, setImportPassword] = useState('');\n  const [importFile, setImportFile] = useState<File | null>(null);\n  const [isExporting, setIsExporting] = useState(false);\n  const [isImporting, setIsImporting] = useState(false);\n  \n  // CSV import state\n  const [csvFile, setCsvFile] = useState<File | null>(null);\n  const [selectedParser, setSelectedParser] = useState<string>('');\n  const [isImportingCSV, setIsImportingCSV] = useState(false);\n  const csvParsers = getAvailableCSVParsers();\n\n  const handleExport = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!exportPassword.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a password for the export file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsExporting(true);\n    try {\n      const encryptedData = await exportVault(exportPassword);\n      \n      // Create and download the file\n      const blob = new Blob([encryptedData], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `securevault-backup-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Export Complete\",\n        description: \"Your vault has been exported successfully\",\n      });\n      \n      setExportPassword('');\n      onOpenChange(false);\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export vault data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const handleImport = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!importFile) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a backup file to import\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!importPassword.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter the password for the backup file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsImporting(true);\n    try {\n      const fileContent = await importFile.text();\n      await importVault(fileContent, importPassword);\n      \n      toast({\n        title: \"Import Complete\",\n        description: \"Your vault data has been imported successfully\",\n      });\n      \n      setImportPassword('');\n      setImportFile(null);\n      onOpenChange(false);\n    } catch (error) {\n      toast({\n        title: \"Import Failed\",\n        description: \"Failed to import vault data. Please check your password and file.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsImporting(false);\n    }\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (file.type !== 'application/json' && !file.name.endsWith('.json')) {\n        toast({\n          title: \"Invalid File\",\n          description: \"Please select a JSON backup file\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setImportFile(file);\n    }\n  };\n\n  const handleCSVFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (!file.name.endsWith('.csv') && file.type !== 'text/csv') {\n        toast({\n          title: \"Invalid File\",\n          description: \"Please select a CSV file\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      setCsvFile(file);\n      // Auto-select generic parser if no parser is selected\n      if (!selectedParser) {\n        setSelectedParser('generic');\n      }\n    }\n  };\n\n  const handleCSVImport = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!csvFile) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a CSV file to import\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!selectedParser) {\n      toast({\n        title: \"Error\", \n        description: \"Please select a password manager format\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsImportingCSV(true);\n    try {\n      const csvContent = await csvFile.text();\n      const result = await importPasswordsFromCSV(csvContent, selectedParser);\n      \n      toast({\n        title: \"CSV Import Complete\",\n        description: `Successfully imported ${result.imported} passwords. ${result.skipped} duplicates were skipped.`,\n      });\n      \n      setCsvFile(null);\n      setSelectedParser('');\n      onOpenChange(false);\n    } catch (error) {\n      toast({\n        title: \"CSV Import Failed\",\n        description: error instanceof Error ? error.message : \"Failed to import CSV file\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsImportingCSV(false);\n    }\n  };\n\n  const resetForm = () => {\n    setExportPassword('');\n    setImportPassword('');\n    setImportFile(null);\n    setCsvFile(null);\n    setSelectedParser('');\n  };\n\n  const handleOpenChange = (open: boolean) => {\n    if (!open) {\n      resetForm();\n    }\n    onOpenChange(open);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px]\" data-testid=\"import-export-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <FileText className=\"w-5 h-5\" />\n            Import / Export Vault\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Tabs defaultValue=\"export\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"export\" data-testid=\"tab-export\">Export</TabsTrigger>\n            <TabsTrigger value=\"import\" data-testid=\"tab-import\">Import</TabsTrigger>\n            <TabsTrigger value=\"csv-import\" data-testid=\"tab-csv-import\">CSV Import</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"export\" className=\"space-y-4\">\n            <div className=\"rounded-lg bg-muted p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Shield className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm font-medium\">Export Security</span>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Your vault data will be encrypted with the password you provide below. \n                Store this password safely - you'll need it to import the data later.\n              </p>\n            </div>\n            \n            <form onSubmit={handleExport} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"export-password\">Export Password</Label>\n                <Input\n                  id=\"export-password\"\n                  type=\"password\"\n                  value={exportPassword}\n                  onChange={(e) => setExportPassword(e.target.value)}\n                  placeholder=\"Enter a secure password for the export file\"\n                  data-testid=\"input-export-password\"\n                  disabled={isExporting}\n                />\n              </div>\n              \n              <Button \n                type=\"submit\" \n                disabled={isExporting || !exportPassword.trim()}\n                className=\"w-full\"\n                data-testid=\"button-export\"\n              >\n                {isExporting ? (\n                  \"Exporting...\"\n                ) : (\n                  <>\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Export Vault\n                  </>\n                )}\n              </Button>\n            </form>\n          </TabsContent>\n          \n          <TabsContent value=\"import\" className=\"space-y-4\">\n            <div className=\"rounded-lg bg-muted p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Shield className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm font-medium\">Import Security</span>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Select your SecureVault backup file and enter the password used during export. \n                This will add the imported data to your current vault.\n              </p>\n            </div>\n            \n            <form onSubmit={handleImport} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"import-file\">Backup File</Label>\n                <Input\n                  id=\"import-file\"\n                  type=\"file\"\n                  accept=\".json,application/json\"\n                  onChange={handleFileChange}\n                  data-testid=\"input-import-file\"\n                  disabled={isImporting}\n                />\n                {importFile && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    Selected: {importFile.name}\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"import-password\">Import Password</Label>\n                <Input\n                  id=\"import-password\"\n                  type=\"password\"\n                  value={importPassword}\n                  onChange={(e) => setImportPassword(e.target.value)}\n                  placeholder=\"Enter the export password\"\n                  data-testid=\"input-import-password\"\n                  disabled={isImporting}\n                />\n              </div>\n              \n              <Button \n                type=\"submit\" \n                disabled={isImporting || !importFile || !importPassword.trim()}\n                className=\"w-full\"\n                data-testid=\"button-import\"\n              >\n                {isImporting ? (\n                  \"Importing...\"\n                ) : (\n                  <>\n                    <Upload className=\"w-4 h-4 mr-2\" />\n                    Import Vault\n                  </>\n                )}\n              </Button>\n            </form>\n          </TabsContent>\n          \n          <TabsContent value=\"csv-import\" className=\"space-y-4\">\n            <div className=\"rounded-lg bg-muted p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Database className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-sm font-medium\">CSV Import</span>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Import passwords from popular password managers. Select your password manager format and CSV export file.\n                Duplicates will be skipped automatically.\n              </p>\n            </div>\n            \n            <form onSubmit={handleCSVImport} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"parser-select\">Password Manager Format</Label>\n                <Select value={selectedParser} onValueChange={setSelectedParser} disabled={isImportingCSV}>\n                  <SelectTrigger data-testid=\"select-csv-parser\">\n                    <SelectValue placeholder=\"Choose password manager format\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {csvParsers.map((parser) => (\n                      <SelectItem key={parser.id} value={parser.id}>\n                        {parser.name} - {parser.description}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"csv-file\">CSV File</Label>\n                <Input\n                  id=\"csv-file\"\n                  type=\"file\"\n                  accept=\".csv,text/csv\"\n                  onChange={handleCSVFileChange}\n                  data-testid=\"input-csv-file\"\n                  disabled={isImportingCSV}\n                />\n                {csvFile && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    Selected: {csvFile.name}\n                  </p>\n                )}\n              </div>\n              \n              <Button \n                type=\"submit\" \n                disabled={isImportingCSV || !csvFile || !selectedParser}\n                className=\"w-full\"\n                data-testid=\"button-csv-import\"\n              >\n                {isImportingCSV ? (\n                  \"Importing...\"\n                ) : (\n                  <>\n                    <Upload className=\"w-4 h-4 mr-2\" />\n                    Import CSV\n                  </>\n                )}\n              </Button>\n            </form>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":13851},"client/src/components/extension-pairing-modal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Chrome, Shield, Check, Copy, RefreshCw } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface ExtensionPairingModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function ExtensionPairingModal({ open, onOpenChange }: ExtensionPairingModalProps) {\n  const { toast } = useToast();\n  \n  const [pairingCode, setPairingCode] = useState<string>('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [isPairing, setIsPairing] = useState(false);\n  const [pairedExtensions, setPairedExtensions] = useState<Array<{\n    id: string;\n    name: string;\n    pairedAt: string;\n    lastUsed?: string;\n  }>>([]);\n\n  // Generate a new pairing code\n  const generatePairingCode = async () => {\n    setIsGenerating(true);\n    try {\n      // Generate a secure 6-digit pairing code\n      const code = Math.floor(100000 + Math.random() * 900000).toString();\n      setPairingCode(code);\n      \n      // Store the code temporarily on the server for verification\n      const response = await fetch('/api/extension/generate-pairing-code', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          code,\n          expiresIn: 300 // 5 minutes\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to generate pairing code');\n      }\n      \n      toast({\n        title: \"Pairing Code Generated\",\n        description: \"Enter this code in your browser extension to pair it with SecureVault\",\n      });\n      \n    } catch (error) {\n      console.error('Failed to generate pairing code:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate pairing code\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  // Copy pairing code to clipboard\n  const copyPairingCode = async () => {\n    try {\n      await navigator.clipboard.writeText(pairingCode);\n      toast({\n        title: \"Copied\",\n        description: \"Pairing code copied to clipboard\",\n      });\n    } catch (error) {\n      console.error('Failed to copy:', error);\n    }\n  };\n\n  // Load paired extensions\n  const loadPairedExtensions = async () => {\n    try {\n      const response = await fetch('/api/extension/paired-devices');\n      if (response.ok) {\n        const data = await response.json();\n        setPairedExtensions(data.devices || []);\n      }\n    } catch (error) {\n      console.error('Failed to load paired extensions:', error);\n    }\n  };\n\n  // Revoke extension pairing\n  const revokeExtension = async (extensionId: string) => {\n    try {\n      const response = await fetch('/api/extension/revoke-pairing', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ extensionId })\n      });\n      \n      if (response.ok) {\n        toast({\n          title: \"Extension Revoked\",\n          description: \"Extension access has been revoked\",\n        });\n        loadPairedExtensions();\n      }\n    } catch (error) {\n      console.error('Failed to revoke extension:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to revoke extension access\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (open) {\n      loadPairedExtensions();\n    }\n  }, [open]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px]\" data-testid=\"extension-pairing-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Chrome className=\"w-5 h-5\" />\n            Browser Extension Pairing\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Security Notice */}\n          <Alert>\n            <Shield className=\"w-4 h-4\" />\n            <AlertDescription>\n              Pairing allows browser extensions to securely auto-fill passwords from your vault. \n              Only pair extensions you trust and revoke access when no longer needed.\n            </AlertDescription>\n          </Alert>\n\n          {/* Pairing Section */}\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label>Pair New Extension</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Generate a pairing code and enter it in your SecureVault browser extension.\n              </p>\n            </div>\n            \n            {pairingCode ? (\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <Input\n                    value={pairingCode}\n                    readOnly\n                    className=\"font-mono text-lg text-center\"\n                    data-testid=\"pairing-code-display\"\n                  />\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    onClick={copyPairingCode}\n                    data-testid=\"copy-pairing-code\"\n                  >\n                    <Copy className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                \n                <div className=\"text-sm text-muted-foreground text-center\">\n                  Code expires in 5 minutes. Enter this code in your extension popup.\n                </div>\n                \n                <Button\n                  variant=\"outline\"\n                  onClick={generatePairingCode}\n                  disabled={isGenerating}\n                  className=\"w-full\"\n                  data-testid=\"regenerate-code\"\n                >\n                  {isGenerating ? (\n                    <>\n                      <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Generating...\n                    </>\n                  ) : (\n                    <>\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Generate New Code\n                    </>\n                  )}\n                </Button>\n              </div>\n            ) : (\n              <Button\n                onClick={generatePairingCode}\n                disabled={isGenerating}\n                className=\"w-full\"\n                data-testid=\"generate-pairing-code\"\n              >\n                {isGenerating ? (\n                  <>\n                    <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Generating...\n                  </>\n                ) : (\n                  <>\n                    <Chrome className=\"w-4 h-4 mr-2\" />\n                    Generate Pairing Code\n                  </>\n                )}\n              </Button>\n            )}\n          </div>\n\n          {/* Paired Extensions */}\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label>Paired Extensions</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Manage extensions that have access to your vault.\n              </p>\n            </div>\n            \n            {pairedExtensions.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Chrome className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                <p>No extensions paired</p>\n                <p className=\"text-sm\">Generate a pairing code to connect your first extension</p>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                {pairedExtensions.map((extension) => (\n                  <div\n                    key={extension.id}\n                    className=\"flex items-center justify-between p-3 border rounded-lg\"\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <Check className=\"w-4 h-4 text-primary\" />\n                      </div>\n                      <div>\n                        <div className=\"font-medium\">{extension.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          Paired: {new Date(extension.pairedAt).toLocaleDateString()}\n                          {extension.lastUsed && (\n                            <span className=\"ml-2\">\n                              • Last used: {new Date(extension.lastUsed).toLocaleDateString()}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => revokeExtension(extension.id)}\n                      data-testid={`revoke-extension-${extension.id}`}\n                    >\n                      Revoke\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Instructions */}\n          <div className=\"space-y-2 text-sm text-muted-foreground\">\n            <div className=\"font-medium\">How to pair:</div>\n            <ol className=\"list-decimal list-inside space-y-1 ml-2\">\n              <li>Install the SecureVault browser extension</li>\n              <li>Click \"Generate Pairing Code\" above</li>\n              <li>Open the extension popup and click \"Pair with Vault\"</li>\n              <li>Enter the pairing code when prompted</li>\n              <li>Extension will be paired and ready to use</li>\n            </ol>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10020},"extension/README.md":{"content":"# SecureVault Browser Extension\n\nA browser extension that provides secure password auto-fill integration for the SecureVault password manager.\n\n## Features\n\n- **Auto-Fill Detection**: Automatically detects login forms on web pages\n- **Secure Password Filling**: Fills credentials with user confirmation\n- **Vault Integration**: Connects to the main SecureVault application\n- **Domain Matching**: Matches passwords to appropriate websites\n- **Keyboard Shortcuts**: Quick access with Ctrl+Shift+V\n- **Visual Indicators**: Shows auto-fill availability on forms\n\n## Installation\n\n### For Development\n\n1. Build the extension:\n   ```bash\n   cd extension\n   node build.js\n   ```\n\n2. Load in Chrome:\n   - Open Chrome and navigate to `chrome://extensions/`\n   - Enable \"Developer mode\" (toggle in top right)\n   - Click \"Load unpacked\" and select the `extension/build` folder\n\n### For Production\n\n1. Package the extension for Chrome Web Store\n2. Install from Chrome Web Store (when published)\n\n## Architecture\n\n### Components\n\n- **Background Service Worker** (`src/background.js`): Handles extension lifecycle, vault communication, and message routing\n- **Content Script** (`src/content.js`): Detects login forms, provides auto-fill UI, and handles user interactions\n- **Popup Interface** (`src/popup.html` + `src/popup.js`): Extension popup with status, controls, and settings\n- **Manifest** (`manifest.json`): Extension configuration and permissions\n\n### Security Model\n\n- **Secure Communication**: Extension communicates with SecureVault app via secure HTTP requests\n- **User Confirmation**: All auto-fill operations require explicit user action\n- **Domain Validation**: Passwords are only offered for matching domains\n- **No Storage**: Extension doesn't store passwords locally - everything is fetched from the main vault\n\n### Permissions Required\n\n- `activeTab`: Access current tab for form detection and filling\n- `storage`: Store extension settings and sync data\n- `host`: Communicate with SecureVault application\n- `scripting`: Inject content scripts for form filling\n\n## Integration with SecureVault\n\nThe extension integrates with the main SecureVault application through several API endpoints:\n\n- `GET /api/health` - Check if vault is accessible\n- `GET /api/extension/passwords?domain={domain}` - Get passwords for domain\n- `POST /api/extension/sync` - Sync extension with vault\n\n## User Experience\n\n1. **Form Detection**: When visiting a login page, the extension automatically detects password forms\n2. **Auto-Fill Button**: A SecureVault button appears near detected forms\n3. **Password Selection**: Click the button to see available passwords for the site\n4. **Secure Filling**: Select credentials to fill into the form\n5. **Keyboard Shortcut**: Press Ctrl+Shift+V for quick auto-fill\n\n## Development\n\n### File Structure\n\n```\nextension/\n├── manifest.json           # Extension configuration\n├── src/\n│   ├── background.js      # Service worker\n│   ├── content.js         # Content script\n│   ├── popup.html         # Popup interface\n│   └── popup.js           # Popup logic\n├── icons/                 # Extension icons\n├── build.js              # Build script\n└── README.md             # This file\n```\n\n### Building\n\nThe build script copies all necessary files to the `build/` directory:\n\n```bash\nnode build.js\n```\n\n### Testing\n\n1. Load the extension in Chrome developer mode\n2. Navigate to any login form\n3. Check that the SecureVault button appears\n4. Test auto-fill functionality with the main app running\n\n## Future Enhancements\n\n- **Multi-Browser Support**: Firefox and Safari versions\n- **Advanced Form Detection**: Better handling of complex login flows\n- **Biometric Integration**: Use device biometrics for additional security\n- **Custom Field Mapping**: User-defined form field mappings\n- **Offline Caching**: Limited offline auto-fill capabilities","size_bytes":3924},"extension/build/src/background.js":{"content":"// SecureVault Extension Background Service Worker\n\n// Extension installation/update handler\nchrome.runtime.onInstalled.addListener((details) => {\n  console.log('SecureVault Extension installed/updated:', details);\n  \n  // Set up initial extension state\n  chrome.storage.local.set({\n    extensionEnabled: true,\n    autoFillEnabled: true,\n    lastSync: null\n  });\n});\n\n// Handle keyboard commands\nchrome.commands.onCommand.addListener((command) => {\n  if (command === 'auto-fill') {\n    // Trigger auto-fill on current tab\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      if (tabs[0]) {\n        chrome.tabs.sendMessage(tabs[0].id, { type: 'TRIGGER_AUTO_FILL' });\n      }\n    });\n  }\n});\n\n// Handle messages from content scripts and popup\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  console.log('Background received message:', message);\n  \n  switch (message.type) {\n    case 'GET_VAULT_STATUS':\n      handleGetVaultStatus(sendResponse);\n      break;\n      \n    case 'GET_PASSWORDS_FOR_DOMAIN':\n      handleGetPasswordsForDomain(message.domain, sendResponse);\n      break;\n      \n    case 'FILL_PASSWORD':\n      handleFillPassword(message.data, sender.tab, sendResponse);\n      break;\n      \n    case 'SYNC_WITH_VAULT':\n      handleSyncWithVault(sendResponse);\n      break;\n      \n    default:\n      console.warn('Unknown message type:', message.type);\n      sendResponse({ error: 'Unknown message type' });\n  }\n  \n  // Return true to indicate we will respond asynchronously\n  return true;\n});\n\n// Get vault connection status\nasync function handleGetVaultStatus(sendResponse) {\n  try {\n    const vaultUrl = await getVaultUrl();\n    const isConnected = await checkVaultConnection(vaultUrl);\n    \n    sendResponse({ \n      success: true, \n      connected: isConnected,\n      vaultUrl: vaultUrl\n    });\n  } catch (error) {\n    console.error('Error checking vault status:', error);\n    sendResponse({ \n      success: false, \n      error: error.message \n    });\n  }\n}\n\n// Get passwords for a specific domain\nasync function handleGetPasswordsForDomain(domain, sendResponse) {\n  try {\n    const vaultUrl = await getVaultUrl();\n    \n    // For security, we need to communicate with the main vault app\n    // This is a placeholder - in production, this would require secure communication\n    const passwords = await fetchPasswordsFromVault(vaultUrl, domain);\n    \n    sendResponse({\n      success: true,\n      passwords: passwords || []\n    });\n  } catch (error) {\n    console.error('Error fetching passwords for domain:', error);\n    sendResponse({\n      success: false,\n      error: error.message\n    });\n  }\n}\n\n// Handle password filling\nasync function handleFillPassword(data, tab, sendResponse) {\n  try {\n    // Inject content script to fill the password\n    await chrome.scripting.executeScript({\n      target: { tabId: tab.id },\n      func: fillFormFields,\n      args: [data]\n    });\n    \n    sendResponse({ success: true });\n  } catch (error) {\n    console.error('Error filling password:', error);\n    sendResponse({ \n      success: false, \n      error: error.message \n    });\n  }\n}\n\n// Sync with main vault application\nasync function handleSyncWithVault(sendResponse) {\n  try {\n    const vaultUrl = await getVaultUrl();\n    const syncResult = await syncWithVault(vaultUrl);\n    \n    sendResponse({\n      success: true,\n      lastSync: new Date().toISOString(),\n      syncResult\n    });\n  } catch (error) {\n    console.error('Error syncing with vault:', error);\n    sendResponse({\n      success: false,\n      error: error.message\n    });\n  }\n}\n\n// Helper function to get vault URL\nasync function getVaultUrl() {\n  const result = await chrome.storage.local.get(['vaultUrl']);\n  \n  // Default to localhost for development\n  // In production, this would be configured by the user or detected\n  return result.vaultUrl || 'http://localhost:5000';\n}\n\n// Check if vault is accessible\nasync function checkVaultConnection(vaultUrl) {\n  try {\n    const response = await fetch(`${vaultUrl}/api/health`, {\n      method: 'GET',\n      timeout: 5000\n    });\n    \n    return response.ok;\n  } catch (error) {\n    console.error('Vault connection check failed:', error);\n    return false;\n  }\n}\n\n// Fetch passwords for domain from vault with authentication\nasync function fetchPasswordsFromVault(vaultUrl, domain) {\n  try {\n    // Get authentication token from storage\n    const result = await chrome.storage.local.get(['authToken', 'tokenExpiresAt']);\n    \n    if (!result.authToken) {\n      throw new Error('Extension not paired with vault. Please pair first.');\n    }\n    \n    if (result.tokenExpiresAt && new Date(result.tokenExpiresAt) < new Date()) {\n      // Token expired, clear it\n      await chrome.storage.local.remove(['authToken', 'tokenExpiresAt']);\n      throw new Error('Authentication token expired. Please re-pair the extension.');\n    }\n    \n    const response = await fetch(`${vaultUrl}/api/extension/passwords?domain=${encodeURIComponent(domain)}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${result.authToken}`\n      }\n    });\n    \n    if (!response.ok) {\n      if (response.status === 401) {\n        // Token invalid, clear it\n        await chrome.storage.local.remove(['authToken', 'tokenExpiresAt']);\n        throw new Error('Authentication failed. Please re-pair the extension.');\n      }\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    return data.passwords;\n  } catch (error) {\n    console.error('Failed to fetch passwords from vault:', error);\n    throw error; // Re-throw to be handled by caller\n  }\n}\n\n// Sync extension data with main vault\nasync function syncWithVault(vaultUrl) {\n  try {\n    const response = await fetch(`${vaultUrl}/api/extension/sync`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        extensionId: chrome.runtime.id,\n        timestamp: new Date().toISOString()\n      })\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Sync failed: ${response.status}`);\n    }\n    \n    const result = await response.json();\n    \n    // Update local storage with sync timestamp\n    await chrome.storage.local.set({\n      lastSync: new Date().toISOString()\n    });\n    \n    return result;\n  } catch (error) {\n    console.error('Vault sync failed:', error);\n    throw error;\n  }\n}\n\n// Function to be injected into page for form filling\nfunction fillFormFields(data) {\n  const { username, password, url } = data;\n  \n  // Find username/email fields\n  const usernameFields = document.querySelectorAll('input[type=\"text\"], input[type=\"email\"], input[name*=\"user\"], input[name*=\"email\"], input[id*=\"user\"], input[id*=\"email\"]');\n  \n  // Find password fields\n  const passwordFields = document.querySelectorAll('input[type=\"password\"]');\n  \n  // Fill username field (usually the first text/email field before password field)\n  if (usernameFields.length > 0 && username) {\n    const usernameField = usernameFields[0];\n    usernameField.value = username;\n    usernameField.dispatchEvent(new Event('input', { bubbles: true }));\n    usernameField.dispatchEvent(new Event('change', { bubbles: true }));\n  }\n  \n  // Fill password field\n  if (passwordFields.length > 0 && password) {\n    const passwordField = passwordFields[0];\n    passwordField.value = password;\n    passwordField.dispatchEvent(new Event('input', { bubbles: true }));\n    passwordField.dispatchEvent(new Event('change', { bubbles: true }));\n  }\n  \n  // Visual feedback\n  const filledFields = [];\n  if (usernameFields.length > 0 && username) filledFields.push('username');\n  if (passwordFields.length > 0 && password) filledFields.push('password');\n  \n  if (filledFields.length > 0) {\n    console.log('SecureVault: Filled', filledFields.join(' and '), 'fields');\n    \n    // Show brief success message\n    showFillNotification(`Filled ${filledFields.join(' and ')}`);\n  }\n}\n\n// Show notification function for injection\nfunction showFillNotification(message) {\n  const notification = document.createElement('div');\n  notification.textContent = `SecureVault: ${message}`;\n  notification.style.cssText = `\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: #4CAF50;\n    color: white;\n    padding: 10px 15px;\n    border-radius: 5px;\n    z-index: 10000;\n    font-family: Arial, sans-serif;\n    font-size: 14px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.3);\n  `;\n  \n  document.body.appendChild(notification);\n  \n  setTimeout(() => {\n    notification.remove();\n  }, 3000);\n}","size_bytes":8656},"extension/build/src/content.js":{"content":"// SecureVault Extension Content Script\n// Runs on all web pages to detect login forms and enable auto-fill\n\n(function() {\n  'use strict';\n\n  let isSecureVaultEnabled = true;\n  let detectedForms = new Set();\n  let observer;\n\n  // Initialize content script\n  function init() {\n    console.log('SecureVault content script loaded on:', window.location.hostname);\n    \n    // Check if extension is enabled\n    checkExtensionStatus();\n    \n    // Start observing for form changes\n    startFormObserver();\n    \n    // Scan for existing forms\n    scanForLoginForms();\n    \n    // Listen for messages from background script\n    chrome.runtime.onMessage.addListener(handleMessage);\n  }\n\n  // Check extension status from storage\n  function checkExtensionStatus() {\n    chrome.storage.local.get(['extensionEnabled', 'autoFillEnabled'], (result) => {\n      isSecureVaultEnabled = result.extensionEnabled && result.autoFillEnabled;\n      \n      if (isSecureVaultEnabled) {\n        console.log('SecureVault auto-fill is enabled for this site');\n      }\n    });\n  }\n\n  // Start observing DOM changes for dynamically added forms\n  function startFormObserver() {\n    observer = new MutationObserver((mutations) => {\n      let shouldScan = false;\n      \n      mutations.forEach((mutation) => {\n        if (mutation.type === 'childList') {\n          mutation.addedNodes.forEach((node) => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              if (node.tagName === 'FORM' || node.querySelector('form')) {\n                shouldScan = true;\n              }\n            }\n          });\n        }\n      });\n      \n      if (shouldScan) {\n        setTimeout(scanForLoginForms, 500);\n      }\n    });\n    \n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  // Scan page for login forms\n  function scanForLoginForms() {\n    if (!isSecureVaultEnabled) return;\n    \n    const forms = document.querySelectorAll('form');\n    \n    forms.forEach((form) => {\n      if (detectedForms.has(form)) return;\n      \n      const loginForm = analyzeForm(form);\n      if (loginForm.isLogin) {\n        detectedForms.add(form);\n        setupFormEnhancements(form, loginForm);\n      }\n    });\n  }\n\n  // Analyze form to determine if it's a login form\n  function analyzeForm(form) {\n    const inputs = form.querySelectorAll('input');\n    const passwordFields = form.querySelectorAll('input[type=\"password\"]');\n    const textFields = form.querySelectorAll('input[type=\"text\"], input[type=\"email\"], input:not([type])');\n    \n    const formData = {\n      form: form,\n      isLogin: false,\n      passwordField: null,\n      usernameField: null,\n      fields: Array.from(inputs)\n    };\n    \n    // Must have at least one password field to be considered a login form\n    if (passwordFields.length === 0) {\n      return formData;\n    }\n    \n    // Look for username/email fields\n    const usernameField = findUsernameField(textFields, passwordFields[0]);\n    \n    // Determine if this is a login form (not registration)\n    const isRegistration = isRegistrationForm(form, inputs);\n    \n    if (!isRegistration && passwordFields.length >= 1) {\n      formData.isLogin = true;\n      formData.passwordField = passwordFields[0];\n      formData.usernameField = usernameField;\n    }\n    \n    return formData;\n  }\n\n  // Find the most likely username field\n  function findUsernameField(textFields, passwordField) {\n    if (textFields.length === 0) return null;\n    \n    // Look for fields with username/email indicators\n    for (const field of textFields) {\n      const name = (field.name || '').toLowerCase();\n      const id = (field.id || '').toLowerCase();\n      const placeholder = (field.placeholder || '').toLowerCase();\n      const type = (field.type || '').toLowerCase();\n      \n      if (type === 'email' ||\n          name.includes('email') || id.includes('email') || placeholder.includes('email') ||\n          name.includes('user') || id.includes('user') || placeholder.includes('user') ||\n          name.includes('login') || id.includes('login') || placeholder.includes('login')) {\n        return field;\n      }\n    }\n    \n    // If no obvious username field, use the first text field before the password field\n    const passwordIndex = Array.from(passwordField.form.elements).indexOf(passwordField);\n    for (let i = passwordIndex - 1; i >= 0; i--) {\n      const element = passwordField.form.elements[i];\n      if (textFields.includes(element)) {\n        return element;\n      }\n    }\n    \n    return textFields[0];\n  }\n\n  // Check if form looks like registration rather than login\n  function isRegistrationForm(form, inputs) {\n    const formText = form.textContent.toLowerCase();\n    const passwordFields = form.querySelectorAll('input[type=\"password\"]');\n    \n    // Multiple password fields usually indicate registration\n    if (passwordFields.length > 1) {\n      return true;\n    }\n    \n    // Look for registration keywords\n    const registrationKeywords = [\n      'register', 'registration', 'sign up', 'signup', 'create account', \n      'join', 'new account', 'confirm password'\n    ];\n    \n    return registrationKeywords.some(keyword => formText.includes(keyword));\n  }\n\n  // Add SecureVault enhancements to login form\n  function setupFormEnhancements(form, loginForm) {\n    if (!loginForm.usernameField && !loginForm.passwordField) return;\n    \n    // Add auto-fill button near the form\n    addAutoFillButton(form, loginForm);\n    \n    // Add field listeners\n    if (loginForm.passwordField) {\n      setupFieldListener(loginForm.passwordField, 'password');\n    }\n    if (loginForm.usernameField) {\n      setupFieldListener(loginForm.usernameField, 'username');\n    }\n  }\n\n  // Add auto-fill button to form\n  function addAutoFillButton(form, loginForm) {\n    // Check if button already exists\n    if (form.querySelector('.securevault-autofill-btn')) return;\n    \n    const button = document.createElement('div');\n    button.className = 'securevault-autofill-btn';\n    button.innerHTML = `\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n        <path d=\"M6 10a6 6 0 0 1 12 0v3a3 3 0 0 1-3 3H9a3 3 0 0 1-3-3v-3Z\"/>\n        <path d=\"M6 10V8a6 6 0 1 1 12 0v2\"/>\n      </svg>\n      SecureVault\n    `;\n    \n    button.style.cssText = `\n      position: absolute;\n      top: -30px;\n      right: 0;\n      background: #4F46E5;\n      color: white;\n      padding: 6px 12px;\n      border-radius: 6px;\n      font-size: 12px;\n      font-family: Arial, sans-serif;\n      cursor: pointer;\n      z-index: 9999;\n      display: flex;\n      align-items: center;\n      gap: 6px;\n      box-shadow: 0 2px 8px rgba(79, 70, 229, 0.3);\n      transition: all 0.2s ease;\n    `;\n    \n    // Position form relatively if needed\n    const formPosition = getComputedStyle(form).position;\n    if (formPosition === 'static') {\n      form.style.position = 'relative';\n    }\n    \n    // Add hover effect\n    button.addEventListener('mouseenter', () => {\n      button.style.background = '#3730A3';\n      button.style.transform = 'translateY(-1px)';\n    });\n    \n    button.addEventListener('mouseleave', () => {\n      button.style.background = '#4F46E5';\n      button.style.transform = 'translateY(0)';\n    });\n    \n    // Add click handler\n    button.addEventListener('click', () => handleAutoFillClick(loginForm));\n    \n    form.appendChild(button);\n  }\n\n  // Setup field listener for auto-fill detection\n  function setupFieldListener(field, type) {\n    field.addEventListener('focus', () => {\n      // Show subtle indication that auto-fill is available\n      showAutoFillHint(field);\n    });\n  }\n\n  // Show auto-fill hint\n  function showAutoFillHint(field) {\n    // Remove existing hint\n    const existing = document.querySelector('.securevault-hint');\n    if (existing) existing.remove();\n    \n    const hint = document.createElement('div');\n    hint.className = 'securevault-hint';\n    hint.textContent = 'Press Ctrl+Shift+V for SecureVault auto-fill';\n    hint.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      background: rgba(0,0,0,0.8);\n      color: white;\n      padding: 8px 12px;\n      border-radius: 4px;\n      font-size: 12px;\n      font-family: Arial, sans-serif;\n      z-index: 10000;\n      animation: fadeInOut 3s ease-in-out;\n    `;\n    \n    document.body.appendChild(hint);\n    \n    setTimeout(() => {\n      hint.remove();\n    }, 3000);\n  }\n\n  // Handle auto-fill button click\n  async function handleAutoFillClick(loginForm) {\n    try {\n      const domain = extractDomain(window.location.hostname);\n      \n      // Get passwords for this domain from background script\n      const response = await sendMessageToBackground({\n        type: 'GET_PASSWORDS_FOR_DOMAIN',\n        domain: domain\n      });\n      \n      if (response.success && response.passwords.length > 0) {\n        // If multiple passwords, show selection popup\n        if (response.passwords.length > 1) {\n          showPasswordSelection(response.passwords, loginForm);\n        } else {\n          // Auto-fill with the single password\n          fillCredentials(response.passwords[0], loginForm);\n        }\n      } else if (response.error) {\n        if (response.error.includes('not paired') || response.error.includes('Authentication failed')) {\n          showNotification('Extension not paired with SecureVault. Please pair in extension popup.', 'error');\n        } else {\n          showNotification(response.error, 'error');\n        }\n      } else {\n        showNotification('No passwords found for this site', 'info');\n      }\n      \n    } catch (error) {\n      console.error('Auto-fill error:', error);\n      showNotification('Auto-fill failed. Please check your SecureVault connection.', 'error');\n    }\n  }\n\n  // Show password selection popup\n  function showPasswordSelection(passwords, loginForm) {\n    // Remove existing popup\n    const existing = document.querySelector('.securevault-popup');\n    if (existing) existing.remove();\n    \n    const popup = document.createElement('div');\n    popup.className = 'securevault-popup';\n    popup.style.cssText = `\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: white;\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      box-shadow: 0 4px 20px rgba(0,0,0,0.3);\n      z-index: 10001;\n      max-width: 300px;\n      font-family: Arial, sans-serif;\n    `;\n    \n    const header = document.createElement('div');\n    header.textContent = 'Select credentials to fill:';\n    header.style.cssText = `\n      padding: 15px;\n      border-bottom: 1px solid #eee;\n      font-weight: bold;\n      font-size: 14px;\n    `;\n    popup.appendChild(header);\n    \n    const list = document.createElement('div');\n    passwords.forEach((password, index) => {\n      const item = document.createElement('div');\n      item.style.cssText = `\n        padding: 12px 15px;\n        border-bottom: 1px solid #f0f0f0;\n        cursor: pointer;\n        transition: background 0.2s ease;\n      `;\n      \n      item.innerHTML = `\n        <div style=\"font-weight: 500; margin-bottom: 4px;\">${escapeHtml(password.name)}</div>\n        <div style=\"font-size: 12px; color: #666;\">${escapeHtml(password.username || password.email || 'No username')}</div>\n      `;\n      \n      item.addEventListener('mouseenter', () => {\n        item.style.background = '#f8f9fa';\n      });\n      \n      item.addEventListener('mouseleave', () => {\n        item.style.background = 'transparent';\n      });\n      \n      item.addEventListener('click', () => {\n        fillCredentials(password, loginForm);\n        popup.remove();\n      });\n      \n      list.appendChild(item);\n    });\n    \n    popup.appendChild(list);\n    \n    // Add close button\n    const closeBtn = document.createElement('div');\n    closeBtn.textContent = '×';\n    closeBtn.style.cssText = `\n      position: absolute;\n      top: 10px;\n      right: 15px;\n      cursor: pointer;\n      font-size: 20px;\n      color: #999;\n    `;\n    closeBtn.addEventListener('click', () => popup.remove());\n    popup.appendChild(closeBtn);\n    \n    document.body.appendChild(popup);\n    \n    // Close on click outside\n    const overlay = document.createElement('div');\n    overlay.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      z-index: 10000;\n    `;\n    overlay.addEventListener('click', () => {\n      popup.remove();\n      overlay.remove();\n    });\n    document.body.appendChild(overlay);\n  }\n\n  // Fill credentials into form\n  function fillCredentials(password, loginForm) {\n    if (loginForm.usernameField && password.username) {\n      loginForm.usernameField.value = password.username;\n      loginForm.usernameField.dispatchEvent(new Event('input', { bubbles: true }));\n      loginForm.usernameField.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n    \n    if (loginForm.passwordField && password.password) {\n      loginForm.passwordField.value = password.password;\n      loginForm.passwordField.dispatchEvent(new Event('input', { bubbles: true }));\n      loginForm.passwordField.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n    \n    showNotification('Credentials filled successfully!', 'success');\n  }\n\n  // Send message to background script\n  function sendMessageToBackground(message) {\n    return new Promise((resolve, reject) => {\n      chrome.runtime.sendMessage(message, (response) => {\n        if (chrome.runtime.lastError) {\n          reject(new Error(chrome.runtime.lastError.message));\n        } else {\n          resolve(response);\n        }\n      });\n    });\n  }\n\n  // Handle messages from background script\n  function handleMessage(message, sender, sendResponse) {\n    switch (message.type) {\n      case 'FILL_CREDENTIALS':\n        const forms = Array.from(detectedForms);\n        if (forms.length > 0) {\n          const loginForm = analyzeForm(forms[0]);\n          fillCredentials(message.credentials, loginForm);\n        }\n        sendResponse({ success: true });\n        break;\n        \n      case 'TRIGGER_AUTO_FILL':\n        const availableForms = Array.from(detectedForms);\n        if (availableForms.length > 0) {\n          const loginForm = analyzeForm(availableForms[0]);\n          handleAutoFillClick(loginForm);\n        }\n        sendResponse({ success: true });\n        break;\n        \n      default:\n        console.warn('Unknown message type:', message.type);\n    }\n  }\n\n  // Extract clean domain from hostname\n  function extractDomain(hostname) {\n    // Remove www. prefix\n    const domain = hostname.replace(/^www\\./, '');\n    return domain;\n  }\n\n  // Show notification\n  function showNotification(message, type = 'info') {\n    const notification = document.createElement('div');\n    notification.textContent = message;\n    \n    const colors = {\n      success: '#4CAF50',\n      error: '#f44336',\n      info: '#2196F3'\n    };\n    \n    notification.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: ${colors[type] || colors.info};\n      color: white;\n      padding: 12px 16px;\n      border-radius: 6px;\n      font-size: 14px;\n      font-family: Arial, sans-serif;\n      z-index: 10002;\n      max-width: 300px;\n      box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n    `;\n    \n    document.body.appendChild(notification);\n    \n    setTimeout(() => {\n      notification.remove();\n    }, 4000);\n  }\n\n  // Utility function to escape HTML\n  function escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  // Keyboard shortcut handler\n  document.addEventListener('keydown', (e) => {\n    // Ctrl+Shift+V for auto-fill\n    if (e.ctrlKey && e.shiftKey && e.key === 'V') {\n      e.preventDefault();\n      \n      const forms = Array.from(detectedForms);\n      if (forms.length > 0) {\n        const loginForm = analyzeForm(forms[0]);\n        handleAutoFillClick(loginForm);\n      }\n    }\n  });\n\n  // Cleanup function\n  function cleanup() {\n    if (observer) {\n      observer.disconnect();\n    }\n    \n    // Remove all SecureVault elements\n    document.querySelectorAll('.securevault-autofill-btn, .securevault-hint, .securevault-popup').forEach(el => {\n      el.remove();\n    });\n  }\n\n  // Handle page unload\n  window.addEventListener('beforeunload', cleanup);\n\n  // Initialize when DOM is ready\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', init);\n  } else {\n    init();\n  }\n\n})();","size_bytes":16520},"extension/build/src/popup.js":{"content":"// SecureVault Extension Popup Script\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n  // Initialize popup\n  await initializePopup();\n  \n  // Set up event listeners\n  setupEventListeners();\n  \n  // Check vault connection status\n  await checkVaultStatus();\n  \n  // Update last sync time\n  updateLastSyncTime();\n});\n\n// Initialize popup state\nasync function initializePopup() {\n  // Load settings from storage\n  const settings = await chrome.storage.local.get([\n    'extensionEnabled',\n    'autoFillEnabled', \n    'showHints',\n    'lastSync'\n  ]);\n  \n  // Update toggle states\n  updateToggle('autoFillToggle', settings.autoFillEnabled !== false);\n  updateToggle('hintsToggle', settings.showHints !== false);\n}\n\n// Set up event listeners\nfunction setupEventListeners() {\n  // Open vault button\n  document.getElementById('openVaultBtn').addEventListener('click', openVault);\n  \n  // Auto-fill button\n  document.getElementById('fillBtn').addEventListener('click', autoFillCurrentPage);\n  \n  // Sync button\n  document.getElementById('syncBtn').addEventListener('click', syncWithVault);\n  \n  // Pair button\n  document.getElementById('pairBtn').addEventListener('click', pairWithVault);\n  \n  // Settings toggles\n  document.getElementById('autoFillToggle').addEventListener('click', toggleAutoFill);\n  document.getElementById('hintsToggle').addEventListener('click', toggleHints);\n}\n\n// Check vault connection status\nasync function checkVaultStatus() {\n  const statusDot = document.getElementById('statusDot');\n  const statusText = document.getElementById('statusText');\n  const statusDetail = document.getElementById('statusDetail');\n  const fillBtn = document.getElementById('fillBtn');\n  \n  try {\n    // Send message to background script to check vault status\n    const response = await sendMessage({\n      type: 'GET_VAULT_STATUS'\n    });\n    \n    if (response.success && response.connected) {\n      // Connected\n      statusDot.className = 'status-dot status-connected';\n      statusText.textContent = 'Connected to SecureVault';\n      statusDetail.textContent = `Vault app: ${response.vaultUrl}`;\n      fillBtn.disabled = false;\n    } else {\n      // Disconnected\n      statusDot.className = 'status-dot status-disconnected';\n      statusText.textContent = 'Cannot connect to SecureVault';\n      statusDetail.textContent = 'Make sure SecureVault app is running';\n      fillBtn.disabled = true;\n    }\n  } catch (error) {\n    console.error('Status check failed:', error);\n    statusDot.className = 'status-dot status-disconnected';\n    statusText.textContent = 'Connection failed';\n    statusDetail.textContent = error.message;\n    fillBtn.disabled = true;\n  }\n}\n\n// Open SecureVault app\nasync function openVault() {\n  try {\n    // Get vault URL from storage or use default\n    const result = await chrome.storage.local.get(['vaultUrl']);\n    const vaultUrl = result.vaultUrl || 'http://localhost:5000';\n    \n    // Open new tab with vault app\n    await chrome.tabs.create({ url: vaultUrl });\n    \n    // Close popup\n    window.close();\n  } catch (error) {\n    console.error('Failed to open vault:', error);\n    showError('Failed to open SecureVault app');\n  }\n}\n\n// Auto-fill current page\nasync function autoFillCurrentPage() {\n  const fillBtn = document.getElementById('fillBtn');\n  const originalText = fillBtn.innerHTML;\n  \n  try {\n    // Show loading state\n    fillBtn.innerHTML = `\n      <div class=\"loading\"></div>\n      Filling...\n    `;\n    fillBtn.disabled = true;\n    \n    // Get current tab\n    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n    \n    if (!tab) {\n      throw new Error('No active tab found');\n    }\n    \n    // Extract domain from tab URL\n    const url = new URL(tab.url);\n    const domain = url.hostname.replace(/^www\\./, '');\n    \n    // Get passwords for domain\n    const response = await sendMessage({\n      type: 'GET_PASSWORDS_FOR_DOMAIN',\n      domain: domain\n    });\n    \n    if (response.success && response.passwords.length > 0) {\n      // Send fill command to content script\n      await chrome.tabs.sendMessage(tab.id, {\n        type: 'FILL_CREDENTIALS',\n        credentials: response.passwords[0] // Use first match for now\n      });\n      \n      showSuccess('Credentials filled successfully!');\n    } else {\n      showError('No saved passwords found for this site');\n    }\n    \n  } catch (error) {\n    console.error('Auto-fill failed:', error);\n    showError('Auto-fill failed. Please try again.');\n  } finally {\n    // Restore button state\n    fillBtn.innerHTML = originalText;\n    fillBtn.disabled = false;\n  }\n}\n\n// Sync with vault\nasync function syncWithVault() {\n  const syncBtn = document.getElementById('syncBtn');\n  const syncText = document.getElementById('syncText');\n  const originalText = syncText.textContent;\n  \n  try {\n    // Show loading state\n    syncText.textContent = 'Syncing...';\n    syncBtn.disabled = true;\n    \n    // Send sync message to background\n    const response = await sendMessage({\n      type: 'SYNC_WITH_VAULT'\n    });\n    \n    if (response.success) {\n      showSuccess('Sync completed successfully');\n      \n      // Update last sync time\n      await chrome.storage.local.set({\n        lastSync: response.lastSync\n      });\n      \n      updateLastSyncTime();\n    } else {\n      throw new Error(response.error || 'Sync failed');\n    }\n    \n  } catch (error) {\n    console.error('Sync failed:', error);\n    showError('Sync failed. Check your connection to SecureVault.');\n  } finally {\n    // Restore button state\n    syncText.textContent = originalText;\n    syncBtn.disabled = false;\n  }\n}\n\n// Pair with vault\nasync function pairWithVault() {\n  const pairBtn = document.getElementById('pairBtn');\n  const pairText = document.getElementById('pairText');\n  const originalText = pairText.textContent;\n  \n  // Check if already paired\n  const result = await chrome.storage.local.get(['authToken', 'extensionId']);\n  if (result.authToken) {\n    showError('Extension is already paired. Unpair first if you need to re-pair.');\n    return;\n  }\n  \n  // Prompt for pairing code\n  const pairingCode = prompt('Enter the 6-digit pairing code from SecureVault:');\n  if (!pairingCode) {\n    return; // User cancelled\n  }\n  \n  if (!/^\\d{6}$/.test(pairingCode)) {\n    showError('Please enter a valid 6-digit pairing code');\n    return;\n  }\n  \n  try {\n    // Show loading state\n    pairText.textContent = 'Pairing...';\n    pairBtn.disabled = true;\n    \n    // Get or generate extension ID\n    let extensionId = result.extensionId;\n    if (!extensionId) {\n      extensionId = generateExtensionId();\n      await chrome.storage.local.set({ extensionId });\n    }\n    \n    // Get vault URL\n    const vaultResult = await chrome.storage.local.get(['vaultUrl']);\n    const vaultUrl = vaultResult.vaultUrl || 'http://localhost:5000';\n    \n    // Send pairing request\n    const response = await fetch(`${vaultUrl}/api/extension/pair`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        extensionId: extensionId,\n        pairingCode: pairingCode,\n        extensionName: 'SecureVault Browser Extension'\n      })\n    });\n    \n    const data = await response.json();\n    \n    if (response.ok && data.success) {\n      // Store authentication token\n      await chrome.storage.local.set({\n        authToken: data.token,\n        tokenExpiresAt: data.expiresAt,\n        pairedAt: new Date().toISOString()\n      });\n      \n      showSuccess('Successfully paired with SecureVault!');\n      \n      // Update connection status\n      await checkVaultStatus();\n      \n    } else {\n      throw new Error(data.error || 'Pairing failed');\n    }\n    \n  } catch (error) {\n    console.error('Pairing failed:', error);\n    if (error.message.includes('Invalid pairing code')) {\n      showError('Invalid or expired pairing code. Please generate a new one in SecureVault.');\n    } else if (error.message.includes('already used')) {\n      showError('This pairing code has already been used. Please generate a new one.');\n    } else {\n      showError('Pairing failed. Make sure SecureVault is running and try again.');\n    }\n  } finally {\n    // Restore button state\n    pairText.textContent = originalText;\n    pairBtn.disabled = false;\n  }\n}\n\n// Generate unique extension ID\nfunction generateExtensionId() {\n  return 'ext_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();\n}\n\n// Toggle auto-fill setting\nasync function toggleAutoFill() {\n  const toggle = document.getElementById('autoFillToggle');\n  const isEnabled = !toggle.classList.contains('active');\n  \n  updateToggle('autoFillToggle', isEnabled);\n  \n  // Save to storage\n  await chrome.storage.local.set({\n    autoFillEnabled: isEnabled\n  });\n  \n  // Notify content scripts of change\n  try {\n    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n    if (tab) {\n      chrome.tabs.sendMessage(tab.id, {\n        type: 'SETTING_CHANGED',\n        setting: 'autoFillEnabled',\n        value: isEnabled\n      });\n    }\n  } catch (error) {\n    // Content script may not be loaded, ignore\n  }\n}\n\n// Toggle hints setting\nasync function toggleHints() {\n  const toggle = document.getElementById('hintsToggle');\n  const isEnabled = !toggle.classList.contains('active');\n  \n  updateToggle('hintsToggle', isEnabled);\n  \n  // Save to storage\n  await chrome.storage.local.set({\n    showHints: isEnabled\n  });\n}\n\n// Update toggle visual state\nfunction updateToggle(toggleId, isActive) {\n  const toggle = document.getElementById(toggleId);\n  if (isActive) {\n    toggle.classList.add('active');\n  } else {\n    toggle.classList.remove('active');\n  }\n}\n\n// Update last sync time display\nasync function updateLastSyncTime() {\n  const result = await chrome.storage.local.get(['lastSync']);\n  const lastSyncEl = document.getElementById('lastSync');\n  \n  if (result.lastSync) {\n    const syncDate = new Date(result.lastSync);\n    const now = new Date();\n    const diffMinutes = Math.floor((now - syncDate) / (1000 * 60));\n    \n    let timeText;\n    if (diffMinutes < 1) {\n      timeText = 'Just now';\n    } else if (diffMinutes < 60) {\n      timeText = `${diffMinutes} minute${diffMinutes === 1 ? '' : 's'} ago`;\n    } else if (diffMinutes < 1440) {\n      const hours = Math.floor(diffMinutes / 60);\n      timeText = `${hours} hour${hours === 1 ? '' : 's'} ago`;\n    } else {\n      timeText = syncDate.toLocaleDateString();\n    }\n    \n    lastSyncEl.textContent = `Last sync: ${timeText}`;\n  } else {\n    lastSyncEl.textContent = 'Last sync: Never';\n  }\n}\n\n// Send message to background script\nfunction sendMessage(message) {\n  return new Promise((resolve, reject) => {\n    chrome.runtime.sendMessage(message, (response) => {\n      if (chrome.runtime.lastError) {\n        reject(new Error(chrome.runtime.lastError.message));\n      } else {\n        resolve(response);\n      }\n    });\n  });\n}\n\n// Show success message\nfunction showSuccess(message) {\n  showNotification(message, 'success');\n}\n\n// Show error message\nfunction showError(message) {\n  showNotification(message, 'error');\n}\n\n// Show notification (simple implementation for popup)\nfunction showNotification(message, type) {\n  // For popup, we could create a temporary notification element\n  // or just use console for now since popup closes quickly\n  console.log(`${type.toUpperCase()}: ${message}`);\n  \n  // Could also briefly change button colors or show status\n  if (type === 'success') {\n    // Briefly flash green\n    document.body.style.borderTop = '3px solid #10B981';\n    setTimeout(() => {\n      document.body.style.borderTop = 'none';\n    }, 2000);\n  } else if (type === 'error') {\n    // Briefly flash red\n    document.body.style.borderTop = '3px solid #EF4444';\n    setTimeout(() => {\n      document.body.style.borderTop = 'none';\n    }, 2000);\n  }\n}","size_bytes":11831},"extension/src/background.js":{"content":"// SecureVault Extension Background Service Worker\n\n// Extension installation/update handler\nchrome.runtime.onInstalled.addListener((details) => {\n  console.log('SecureVault Extension installed/updated:', details);\n  \n  // Set up initial extension state\n  chrome.storage.local.set({\n    extensionEnabled: true,\n    autoFillEnabled: true,\n    lastSync: null\n  });\n});\n\n// Handle keyboard commands\nchrome.commands.onCommand.addListener((command) => {\n  if (command === 'auto-fill') {\n    // Trigger auto-fill on current tab\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      if (tabs[0]) {\n        chrome.tabs.sendMessage(tabs[0].id, { type: 'TRIGGER_AUTO_FILL' });\n      }\n    });\n  }\n});\n\n// Handle messages from content scripts and popup\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  console.log('Background received message:', message);\n  \n  switch (message.type) {\n    case 'GET_VAULT_STATUS':\n      handleGetVaultStatus(sendResponse);\n      break;\n      \n    case 'GET_PASSWORDS_FOR_DOMAIN':\n      handleGetPasswordsForDomain(message.domain, sendResponse);\n      break;\n      \n    case 'FILL_PASSWORD':\n      handleFillPassword(message.data, sender.tab, sendResponse);\n      break;\n      \n    case 'SYNC_WITH_VAULT':\n      handleSyncWithVault(sendResponse);\n      break;\n      \n    default:\n      console.warn('Unknown message type:', message.type);\n      sendResponse({ error: 'Unknown message type' });\n  }\n  \n  // Return true to indicate we will respond asynchronously\n  return true;\n});\n\n// Get vault connection status\nasync function handleGetVaultStatus(sendResponse) {\n  try {\n    const vaultUrl = await getVaultUrl();\n    const isConnected = await checkVaultConnection(vaultUrl);\n    \n    sendResponse({ \n      success: true, \n      connected: isConnected,\n      vaultUrl: vaultUrl\n    });\n  } catch (error) {\n    console.error('Error checking vault status:', error);\n    sendResponse({ \n      success: false, \n      error: error.message \n    });\n  }\n}\n\n// Get passwords for a specific domain\nasync function handleGetPasswordsForDomain(domain, sendResponse) {\n  try {\n    const vaultUrl = await getVaultUrl();\n    \n    // For security, we need to communicate with the main vault app\n    // This is a placeholder - in production, this would require secure communication\n    const passwords = await fetchPasswordsFromVault(vaultUrl, domain);\n    \n    sendResponse({\n      success: true,\n      passwords: passwords || []\n    });\n  } catch (error) {\n    console.error('Error fetching passwords for domain:', error);\n    sendResponse({\n      success: false,\n      error: error.message\n    });\n  }\n}\n\n// Handle password filling\nasync function handleFillPassword(data, tab, sendResponse) {\n  try {\n    // Inject content script to fill the password\n    await chrome.scripting.executeScript({\n      target: { tabId: tab.id },\n      func: fillFormFields,\n      args: [data]\n    });\n    \n    sendResponse({ success: true });\n  } catch (error) {\n    console.error('Error filling password:', error);\n    sendResponse({ \n      success: false, \n      error: error.message \n    });\n  }\n}\n\n// Sync with main vault application\nasync function handleSyncWithVault(sendResponse) {\n  try {\n    const vaultUrl = await getVaultUrl();\n    const syncResult = await syncWithVault(vaultUrl);\n    \n    sendResponse({\n      success: true,\n      lastSync: new Date().toISOString(),\n      syncResult\n    });\n  } catch (error) {\n    console.error('Error syncing with vault:', error);\n    sendResponse({\n      success: false,\n      error: error.message\n    });\n  }\n}\n\n// Helper function to get vault URL\nasync function getVaultUrl() {\n  const result = await chrome.storage.local.get(['vaultUrl']);\n  \n  // Default to localhost for development\n  // In production, this would be configured by the user or detected\n  return result.vaultUrl || 'http://localhost:5000';\n}\n\n// Check if vault is accessible\nasync function checkVaultConnection(vaultUrl) {\n  try {\n    const response = await fetch(`${vaultUrl}/api/health`, {\n      method: 'GET',\n      timeout: 5000\n    });\n    \n    return response.ok;\n  } catch (error) {\n    console.error('Vault connection check failed:', error);\n    return false;\n  }\n}\n\n// Fetch passwords for domain from vault with authentication\nasync function fetchPasswordsFromVault(vaultUrl, domain) {\n  try {\n    // Get authentication token from storage\n    const result = await chrome.storage.local.get(['authToken', 'tokenExpiresAt']);\n    \n    if (!result.authToken) {\n      throw new Error('Extension not paired with vault. Please pair first.');\n    }\n    \n    if (result.tokenExpiresAt && new Date(result.tokenExpiresAt) < new Date()) {\n      // Token expired, clear it\n      await chrome.storage.local.remove(['authToken', 'tokenExpiresAt']);\n      throw new Error('Authentication token expired. Please re-pair the extension.');\n    }\n    \n    const response = await fetch(`${vaultUrl}/api/extension/passwords?domain=${encodeURIComponent(domain)}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${result.authToken}`\n      }\n    });\n    \n    if (!response.ok) {\n      if (response.status === 401) {\n        // Token invalid, clear it\n        await chrome.storage.local.remove(['authToken', 'tokenExpiresAt']);\n        throw new Error('Authentication failed. Please re-pair the extension.');\n      }\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    return data.passwords;\n  } catch (error) {\n    console.error('Failed to fetch passwords from vault:', error);\n    throw error; // Re-throw to be handled by caller\n  }\n}\n\n// Sync extension data with main vault\nasync function syncWithVault(vaultUrl) {\n  try {\n    const response = await fetch(`${vaultUrl}/api/extension/sync`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        extensionId: chrome.runtime.id,\n        timestamp: new Date().toISOString()\n      })\n    });\n    \n    if (!response.ok) {\n      throw new Error(`Sync failed: ${response.status}`);\n    }\n    \n    const result = await response.json();\n    \n    // Update local storage with sync timestamp\n    await chrome.storage.local.set({\n      lastSync: new Date().toISOString()\n    });\n    \n    return result;\n  } catch (error) {\n    console.error('Vault sync failed:', error);\n    throw error;\n  }\n}\n\n// Function to be injected into page for form filling\nfunction fillFormFields(data) {\n  const { username, password, url } = data;\n  \n  // Find username/email fields\n  const usernameFields = document.querySelectorAll('input[type=\"text\"], input[type=\"email\"], input[name*=\"user\"], input[name*=\"email\"], input[id*=\"user\"], input[id*=\"email\"]');\n  \n  // Find password fields\n  const passwordFields = document.querySelectorAll('input[type=\"password\"]');\n  \n  // Fill username field (usually the first text/email field before password field)\n  if (usernameFields.length > 0 && username) {\n    const usernameField = usernameFields[0];\n    usernameField.value = username;\n    usernameField.dispatchEvent(new Event('input', { bubbles: true }));\n    usernameField.dispatchEvent(new Event('change', { bubbles: true }));\n  }\n  \n  // Fill password field\n  if (passwordFields.length > 0 && password) {\n    const passwordField = passwordFields[0];\n    passwordField.value = password;\n    passwordField.dispatchEvent(new Event('input', { bubbles: true }));\n    passwordField.dispatchEvent(new Event('change', { bubbles: true }));\n  }\n  \n  // Visual feedback\n  const filledFields = [];\n  if (usernameFields.length > 0 && username) filledFields.push('username');\n  if (passwordFields.length > 0 && password) filledFields.push('password');\n  \n  if (filledFields.length > 0) {\n    console.log('SecureVault: Filled', filledFields.join(' and '), 'fields');\n    \n    // Show brief success message\n    showFillNotification(`Filled ${filledFields.join(' and ')}`);\n  }\n}\n\n// Show notification function for injection\nfunction showFillNotification(message) {\n  const notification = document.createElement('div');\n  notification.textContent = `SecureVault: ${message}`;\n  notification.style.cssText = `\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: #4CAF50;\n    color: white;\n    padding: 10px 15px;\n    border-radius: 5px;\n    z-index: 10000;\n    font-family: Arial, sans-serif;\n    font-size: 14px;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.3);\n  `;\n  \n  document.body.appendChild(notification);\n  \n  setTimeout(() => {\n    notification.remove();\n  }, 3000);\n}","size_bytes":8656},"extension/src/content.js":{"content":"// SecureVault Extension Content Script\n// Runs on all web pages to detect login forms and enable auto-fill\n\n(function() {\n  'use strict';\n\n  let isSecureVaultEnabled = true;\n  let detectedForms = new Set();\n  let observer;\n\n  // Initialize content script\n  function init() {\n    console.log('SecureVault content script loaded on:', window.location.hostname);\n    \n    // Check if extension is enabled\n    checkExtensionStatus();\n    \n    // Start observing for form changes\n    startFormObserver();\n    \n    // Scan for existing forms\n    scanForLoginForms();\n    \n    // Listen for messages from background script\n    chrome.runtime.onMessage.addListener(handleMessage);\n  }\n\n  // Check extension status from storage\n  function checkExtensionStatus() {\n    chrome.storage.local.get(['extensionEnabled', 'autoFillEnabled'], (result) => {\n      isSecureVaultEnabled = result.extensionEnabled && result.autoFillEnabled;\n      \n      if (isSecureVaultEnabled) {\n        console.log('SecureVault auto-fill is enabled for this site');\n      }\n    });\n  }\n\n  // Start observing DOM changes for dynamically added forms\n  function startFormObserver() {\n    observer = new MutationObserver((mutations) => {\n      let shouldScan = false;\n      \n      mutations.forEach((mutation) => {\n        if (mutation.type === 'childList') {\n          mutation.addedNodes.forEach((node) => {\n            if (node.nodeType === Node.ELEMENT_NODE) {\n              if (node.tagName === 'FORM' || node.querySelector('form')) {\n                shouldScan = true;\n              }\n            }\n          });\n        }\n      });\n      \n      if (shouldScan) {\n        setTimeout(scanForLoginForms, 500);\n      }\n    });\n    \n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n\n  // Scan page for login forms\n  function scanForLoginForms() {\n    if (!isSecureVaultEnabled) return;\n    \n    const forms = document.querySelectorAll('form');\n    \n    forms.forEach((form) => {\n      if (detectedForms.has(form)) return;\n      \n      const loginForm = analyzeForm(form);\n      if (loginForm.isLogin) {\n        detectedForms.add(form);\n        setupFormEnhancements(form, loginForm);\n      }\n    });\n  }\n\n  // Analyze form to determine if it's a login form\n  function analyzeForm(form) {\n    const inputs = form.querySelectorAll('input');\n    const passwordFields = form.querySelectorAll('input[type=\"password\"]');\n    const textFields = form.querySelectorAll('input[type=\"text\"], input[type=\"email\"], input:not([type])');\n    \n    const formData = {\n      form: form,\n      isLogin: false,\n      passwordField: null,\n      usernameField: null,\n      fields: Array.from(inputs)\n    };\n    \n    // Must have at least one password field to be considered a login form\n    if (passwordFields.length === 0) {\n      return formData;\n    }\n    \n    // Look for username/email fields\n    const usernameField = findUsernameField(textFields, passwordFields[0]);\n    \n    // Determine if this is a login form (not registration)\n    const isRegistration = isRegistrationForm(form, inputs);\n    \n    if (!isRegistration && passwordFields.length >= 1) {\n      formData.isLogin = true;\n      formData.passwordField = passwordFields[0];\n      formData.usernameField = usernameField;\n    }\n    \n    return formData;\n  }\n\n  // Find the most likely username field\n  function findUsernameField(textFields, passwordField) {\n    if (textFields.length === 0) return null;\n    \n    // Look for fields with username/email indicators\n    for (const field of textFields) {\n      const name = (field.name || '').toLowerCase();\n      const id = (field.id || '').toLowerCase();\n      const placeholder = (field.placeholder || '').toLowerCase();\n      const type = (field.type || '').toLowerCase();\n      \n      if (type === 'email' ||\n          name.includes('email') || id.includes('email') || placeholder.includes('email') ||\n          name.includes('user') || id.includes('user') || placeholder.includes('user') ||\n          name.includes('login') || id.includes('login') || placeholder.includes('login')) {\n        return field;\n      }\n    }\n    \n    // If no obvious username field, use the first text field before the password field\n    const passwordIndex = Array.from(passwordField.form.elements).indexOf(passwordField);\n    for (let i = passwordIndex - 1; i >= 0; i--) {\n      const element = passwordField.form.elements[i];\n      if (textFields.includes(element)) {\n        return element;\n      }\n    }\n    \n    return textFields[0];\n  }\n\n  // Check if form looks like registration rather than login\n  function isRegistrationForm(form, inputs) {\n    const formText = form.textContent.toLowerCase();\n    const passwordFields = form.querySelectorAll('input[type=\"password\"]');\n    \n    // Multiple password fields usually indicate registration\n    if (passwordFields.length > 1) {\n      return true;\n    }\n    \n    // Look for registration keywords\n    const registrationKeywords = [\n      'register', 'registration', 'sign up', 'signup', 'create account', \n      'join', 'new account', 'confirm password'\n    ];\n    \n    return registrationKeywords.some(keyword => formText.includes(keyword));\n  }\n\n  // Add SecureVault enhancements to login form\n  function setupFormEnhancements(form, loginForm) {\n    if (!loginForm.usernameField && !loginForm.passwordField) return;\n    \n    // Add auto-fill button near the form\n    addAutoFillButton(form, loginForm);\n    \n    // Add field listeners\n    if (loginForm.passwordField) {\n      setupFieldListener(loginForm.passwordField, 'password');\n    }\n    if (loginForm.usernameField) {\n      setupFieldListener(loginForm.usernameField, 'username');\n    }\n  }\n\n  // Add auto-fill button to form\n  function addAutoFillButton(form, loginForm) {\n    // Check if button already exists\n    if (form.querySelector('.securevault-autofill-btn')) return;\n    \n    const button = document.createElement('div');\n    button.className = 'securevault-autofill-btn';\n    button.innerHTML = `\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n        <path d=\"M6 10a6 6 0 0 1 12 0v3a3 3 0 0 1-3 3H9a3 3 0 0 1-3-3v-3Z\"/>\n        <path d=\"M6 10V8a6 6 0 1 1 12 0v2\"/>\n      </svg>\n      SecureVault\n    `;\n    \n    button.style.cssText = `\n      position: absolute;\n      top: -30px;\n      right: 0;\n      background: #4F46E5;\n      color: white;\n      padding: 6px 12px;\n      border-radius: 6px;\n      font-size: 12px;\n      font-family: Arial, sans-serif;\n      cursor: pointer;\n      z-index: 9999;\n      display: flex;\n      align-items: center;\n      gap: 6px;\n      box-shadow: 0 2px 8px rgba(79, 70, 229, 0.3);\n      transition: all 0.2s ease;\n    `;\n    \n    // Position form relatively if needed\n    const formPosition = getComputedStyle(form).position;\n    if (formPosition === 'static') {\n      form.style.position = 'relative';\n    }\n    \n    // Add hover effect\n    button.addEventListener('mouseenter', () => {\n      button.style.background = '#3730A3';\n      button.style.transform = 'translateY(-1px)';\n    });\n    \n    button.addEventListener('mouseleave', () => {\n      button.style.background = '#4F46E5';\n      button.style.transform = 'translateY(0)';\n    });\n    \n    // Add click handler\n    button.addEventListener('click', () => handleAutoFillClick(loginForm));\n    \n    form.appendChild(button);\n  }\n\n  // Setup field listener for auto-fill detection\n  function setupFieldListener(field, type) {\n    field.addEventListener('focus', () => {\n      // Show subtle indication that auto-fill is available\n      showAutoFillHint(field);\n    });\n  }\n\n  // Show auto-fill hint\n  function showAutoFillHint(field) {\n    // Remove existing hint\n    const existing = document.querySelector('.securevault-hint');\n    if (existing) existing.remove();\n    \n    const hint = document.createElement('div');\n    hint.className = 'securevault-hint';\n    hint.textContent = 'Press Ctrl+Shift+V for SecureVault auto-fill';\n    hint.style.cssText = `\n      position: fixed;\n      bottom: 20px;\n      right: 20px;\n      background: rgba(0,0,0,0.8);\n      color: white;\n      padding: 8px 12px;\n      border-radius: 4px;\n      font-size: 12px;\n      font-family: Arial, sans-serif;\n      z-index: 10000;\n      animation: fadeInOut 3s ease-in-out;\n    `;\n    \n    document.body.appendChild(hint);\n    \n    setTimeout(() => {\n      hint.remove();\n    }, 3000);\n  }\n\n  // Handle auto-fill button click\n  async function handleAutoFillClick(loginForm) {\n    try {\n      const domain = extractDomain(window.location.hostname);\n      \n      // Get passwords for this domain from background script\n      const response = await sendMessageToBackground({\n        type: 'GET_PASSWORDS_FOR_DOMAIN',\n        domain: domain\n      });\n      \n      if (response.success && response.passwords.length > 0) {\n        // If multiple passwords, show selection popup\n        if (response.passwords.length > 1) {\n          showPasswordSelection(response.passwords, loginForm);\n        } else {\n          // Auto-fill with the single password\n          fillCredentials(response.passwords[0], loginForm);\n        }\n      } else if (response.error) {\n        if (response.error.includes('not paired') || response.error.includes('Authentication failed')) {\n          showNotification('Extension not paired with SecureVault. Please pair in extension popup.', 'error');\n        } else {\n          showNotification(response.error, 'error');\n        }\n      } else {\n        showNotification('No passwords found for this site', 'info');\n      }\n      \n    } catch (error) {\n      console.error('Auto-fill error:', error);\n      showNotification('Auto-fill failed. Please check your SecureVault connection.', 'error');\n    }\n  }\n\n  // Show password selection popup\n  function showPasswordSelection(passwords, loginForm) {\n    // Remove existing popup\n    const existing = document.querySelector('.securevault-popup');\n    if (existing) existing.remove();\n    \n    const popup = document.createElement('div');\n    popup.className = 'securevault-popup';\n    popup.style.cssText = `\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: white;\n      border: 1px solid #ddd;\n      border-radius: 8px;\n      box-shadow: 0 4px 20px rgba(0,0,0,0.3);\n      z-index: 10001;\n      max-width: 300px;\n      font-family: Arial, sans-serif;\n    `;\n    \n    const header = document.createElement('div');\n    header.textContent = 'Select credentials to fill:';\n    header.style.cssText = `\n      padding: 15px;\n      border-bottom: 1px solid #eee;\n      font-weight: bold;\n      font-size: 14px;\n    `;\n    popup.appendChild(header);\n    \n    const list = document.createElement('div');\n    passwords.forEach((password, index) => {\n      const item = document.createElement('div');\n      item.style.cssText = `\n        padding: 12px 15px;\n        border-bottom: 1px solid #f0f0f0;\n        cursor: pointer;\n        transition: background 0.2s ease;\n      `;\n      \n      item.innerHTML = `\n        <div style=\"font-weight: 500; margin-bottom: 4px;\">${escapeHtml(password.name)}</div>\n        <div style=\"font-size: 12px; color: #666;\">${escapeHtml(password.username || password.email || 'No username')}</div>\n      `;\n      \n      item.addEventListener('mouseenter', () => {\n        item.style.background = '#f8f9fa';\n      });\n      \n      item.addEventListener('mouseleave', () => {\n        item.style.background = 'transparent';\n      });\n      \n      item.addEventListener('click', () => {\n        fillCredentials(password, loginForm);\n        popup.remove();\n      });\n      \n      list.appendChild(item);\n    });\n    \n    popup.appendChild(list);\n    \n    // Add close button\n    const closeBtn = document.createElement('div');\n    closeBtn.textContent = '×';\n    closeBtn.style.cssText = `\n      position: absolute;\n      top: 10px;\n      right: 15px;\n      cursor: pointer;\n      font-size: 20px;\n      color: #999;\n    `;\n    closeBtn.addEventListener('click', () => popup.remove());\n    popup.appendChild(closeBtn);\n    \n    document.body.appendChild(popup);\n    \n    // Close on click outside\n    const overlay = document.createElement('div');\n    overlay.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      z-index: 10000;\n    `;\n    overlay.addEventListener('click', () => {\n      popup.remove();\n      overlay.remove();\n    });\n    document.body.appendChild(overlay);\n  }\n\n  // Fill credentials into form\n  function fillCredentials(password, loginForm) {\n    if (loginForm.usernameField && password.username) {\n      loginForm.usernameField.value = password.username;\n      loginForm.usernameField.dispatchEvent(new Event('input', { bubbles: true }));\n      loginForm.usernameField.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n    \n    if (loginForm.passwordField && password.password) {\n      loginForm.passwordField.value = password.password;\n      loginForm.passwordField.dispatchEvent(new Event('input', { bubbles: true }));\n      loginForm.passwordField.dispatchEvent(new Event('change', { bubbles: true }));\n    }\n    \n    showNotification('Credentials filled successfully!', 'success');\n  }\n\n  // Send message to background script\n  function sendMessageToBackground(message) {\n    return new Promise((resolve, reject) => {\n      chrome.runtime.sendMessage(message, (response) => {\n        if (chrome.runtime.lastError) {\n          reject(new Error(chrome.runtime.lastError.message));\n        } else {\n          resolve(response);\n        }\n      });\n    });\n  }\n\n  // Handle messages from background script\n  function handleMessage(message, sender, sendResponse) {\n    switch (message.type) {\n      case 'FILL_CREDENTIALS':\n        const forms = Array.from(detectedForms);\n        if (forms.length > 0) {\n          const loginForm = analyzeForm(forms[0]);\n          fillCredentials(message.credentials, loginForm);\n        }\n        sendResponse({ success: true });\n        break;\n        \n      case 'TRIGGER_AUTO_FILL':\n        const availableForms = Array.from(detectedForms);\n        if (availableForms.length > 0) {\n          const loginForm = analyzeForm(availableForms[0]);\n          handleAutoFillClick(loginForm);\n        }\n        sendResponse({ success: true });\n        break;\n        \n      default:\n        console.warn('Unknown message type:', message.type);\n    }\n  }\n\n  // Extract clean domain from hostname\n  function extractDomain(hostname) {\n    // Remove www. prefix\n    const domain = hostname.replace(/^www\\./, '');\n    return domain;\n  }\n\n  // Show notification\n  function showNotification(message, type = 'info') {\n    const notification = document.createElement('div');\n    notification.textContent = message;\n    \n    const colors = {\n      success: '#4CAF50',\n      error: '#f44336',\n      info: '#2196F3'\n    };\n    \n    notification.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: ${colors[type] || colors.info};\n      color: white;\n      padding: 12px 16px;\n      border-radius: 6px;\n      font-size: 14px;\n      font-family: Arial, sans-serif;\n      z-index: 10002;\n      max-width: 300px;\n      box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n    `;\n    \n    document.body.appendChild(notification);\n    \n    setTimeout(() => {\n      notification.remove();\n    }, 4000);\n  }\n\n  // Utility function to escape HTML\n  function escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n\n  // Keyboard shortcut handler\n  document.addEventListener('keydown', (e) => {\n    // Ctrl+Shift+V for auto-fill\n    if (e.ctrlKey && e.shiftKey && e.key === 'V') {\n      e.preventDefault();\n      \n      const forms = Array.from(detectedForms);\n      if (forms.length > 0) {\n        const loginForm = analyzeForm(forms[0]);\n        handleAutoFillClick(loginForm);\n      }\n    }\n  });\n\n  // Cleanup function\n  function cleanup() {\n    if (observer) {\n      observer.disconnect();\n    }\n    \n    // Remove all SecureVault elements\n    document.querySelectorAll('.securevault-autofill-btn, .securevault-hint, .securevault-popup').forEach(el => {\n      el.remove();\n    });\n  }\n\n  // Handle page unload\n  window.addEventListener('beforeunload', cleanup);\n\n  // Initialize when DOM is ready\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', init);\n  } else {\n    init();\n  }\n\n})();","size_bytes":16520},"extension/src/popup.js":{"content":"// SecureVault Extension Popup Script\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n  // Initialize popup\n  await initializePopup();\n  \n  // Set up event listeners\n  setupEventListeners();\n  \n  // Check vault connection status\n  await checkVaultStatus();\n  \n  // Update last sync time\n  updateLastSyncTime();\n});\n\n// Initialize popup state\nasync function initializePopup() {\n  // Load settings from storage\n  const settings = await chrome.storage.local.get([\n    'extensionEnabled',\n    'autoFillEnabled', \n    'showHints',\n    'lastSync'\n  ]);\n  \n  // Update toggle states\n  updateToggle('autoFillToggle', settings.autoFillEnabled !== false);\n  updateToggle('hintsToggle', settings.showHints !== false);\n}\n\n// Set up event listeners\nfunction setupEventListeners() {\n  // Open vault button\n  document.getElementById('openVaultBtn').addEventListener('click', openVault);\n  \n  // Auto-fill button\n  document.getElementById('fillBtn').addEventListener('click', autoFillCurrentPage);\n  \n  // Sync button\n  document.getElementById('syncBtn').addEventListener('click', syncWithVault);\n  \n  // Pair button\n  document.getElementById('pairBtn').addEventListener('click', pairWithVault);\n  \n  // Settings toggles\n  document.getElementById('autoFillToggle').addEventListener('click', toggleAutoFill);\n  document.getElementById('hintsToggle').addEventListener('click', toggleHints);\n}\n\n// Check vault connection status\nasync function checkVaultStatus() {\n  const statusDot = document.getElementById('statusDot');\n  const statusText = document.getElementById('statusText');\n  const statusDetail = document.getElementById('statusDetail');\n  const fillBtn = document.getElementById('fillBtn');\n  \n  try {\n    // Send message to background script to check vault status\n    const response = await sendMessage({\n      type: 'GET_VAULT_STATUS'\n    });\n    \n    if (response.success && response.connected) {\n      // Connected\n      statusDot.className = 'status-dot status-connected';\n      statusText.textContent = 'Connected to SecureVault';\n      statusDetail.textContent = `Vault app: ${response.vaultUrl}`;\n      fillBtn.disabled = false;\n    } else {\n      // Disconnected\n      statusDot.className = 'status-dot status-disconnected';\n      statusText.textContent = 'Cannot connect to SecureVault';\n      statusDetail.textContent = 'Make sure SecureVault app is running';\n      fillBtn.disabled = true;\n    }\n  } catch (error) {\n    console.error('Status check failed:', error);\n    statusDot.className = 'status-dot status-disconnected';\n    statusText.textContent = 'Connection failed';\n    statusDetail.textContent = error.message;\n    fillBtn.disabled = true;\n  }\n}\n\n// Open SecureVault app\nasync function openVault() {\n  try {\n    // Get vault URL from storage or use default\n    const result = await chrome.storage.local.get(['vaultUrl']);\n    const vaultUrl = result.vaultUrl || 'http://localhost:5000';\n    \n    // Open new tab with vault app\n    await chrome.tabs.create({ url: vaultUrl });\n    \n    // Close popup\n    window.close();\n  } catch (error) {\n    console.error('Failed to open vault:', error);\n    showError('Failed to open SecureVault app');\n  }\n}\n\n// Auto-fill current page\nasync function autoFillCurrentPage() {\n  const fillBtn = document.getElementById('fillBtn');\n  const originalText = fillBtn.innerHTML;\n  \n  try {\n    // Show loading state\n    fillBtn.innerHTML = `\n      <div class=\"loading\"></div>\n      Filling...\n    `;\n    fillBtn.disabled = true;\n    \n    // Get current tab\n    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n    \n    if (!tab) {\n      throw new Error('No active tab found');\n    }\n    \n    // Extract domain from tab URL\n    const url = new URL(tab.url);\n    const domain = url.hostname.replace(/^www\\./, '');\n    \n    // Get passwords for domain\n    const response = await sendMessage({\n      type: 'GET_PASSWORDS_FOR_DOMAIN',\n      domain: domain\n    });\n    \n    if (response.success && response.passwords.length > 0) {\n      // Send fill command to content script\n      await chrome.tabs.sendMessage(tab.id, {\n        type: 'FILL_CREDENTIALS',\n        credentials: response.passwords[0] // Use first match for now\n      });\n      \n      showSuccess('Credentials filled successfully!');\n    } else {\n      showError('No saved passwords found for this site');\n    }\n    \n  } catch (error) {\n    console.error('Auto-fill failed:', error);\n    showError('Auto-fill failed. Please try again.');\n  } finally {\n    // Restore button state\n    fillBtn.innerHTML = originalText;\n    fillBtn.disabled = false;\n  }\n}\n\n// Sync with vault\nasync function syncWithVault() {\n  const syncBtn = document.getElementById('syncBtn');\n  const syncText = document.getElementById('syncText');\n  const originalText = syncText.textContent;\n  \n  try {\n    // Show loading state\n    syncText.textContent = 'Syncing...';\n    syncBtn.disabled = true;\n    \n    // Send sync message to background\n    const response = await sendMessage({\n      type: 'SYNC_WITH_VAULT'\n    });\n    \n    if (response.success) {\n      showSuccess('Sync completed successfully');\n      \n      // Update last sync time\n      await chrome.storage.local.set({\n        lastSync: response.lastSync\n      });\n      \n      updateLastSyncTime();\n    } else {\n      throw new Error(response.error || 'Sync failed');\n    }\n    \n  } catch (error) {\n    console.error('Sync failed:', error);\n    showError('Sync failed. Check your connection to SecureVault.');\n  } finally {\n    // Restore button state\n    syncText.textContent = originalText;\n    syncBtn.disabled = false;\n  }\n}\n\n// Pair with vault\nasync function pairWithVault() {\n  const pairBtn = document.getElementById('pairBtn');\n  const pairText = document.getElementById('pairText');\n  const originalText = pairText.textContent;\n  \n  // Check if already paired\n  const result = await chrome.storage.local.get(['authToken', 'extensionId']);\n  if (result.authToken) {\n    showError('Extension is already paired. Unpair first if you need to re-pair.');\n    return;\n  }\n  \n  // Prompt for pairing code\n  const pairingCode = prompt('Enter the 6-digit pairing code from SecureVault:');\n  if (!pairingCode) {\n    return; // User cancelled\n  }\n  \n  if (!/^\\d{6}$/.test(pairingCode)) {\n    showError('Please enter a valid 6-digit pairing code');\n    return;\n  }\n  \n  try {\n    // Show loading state\n    pairText.textContent = 'Pairing...';\n    pairBtn.disabled = true;\n    \n    // Get or generate extension ID\n    let extensionId = result.extensionId;\n    if (!extensionId) {\n      extensionId = generateExtensionId();\n      await chrome.storage.local.set({ extensionId });\n    }\n    \n    // Get vault URL\n    const vaultResult = await chrome.storage.local.get(['vaultUrl']);\n    const vaultUrl = vaultResult.vaultUrl || 'http://localhost:5000';\n    \n    // Send pairing request\n    const response = await fetch(`${vaultUrl}/api/extension/pair`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        extensionId: extensionId,\n        pairingCode: pairingCode,\n        extensionName: 'SecureVault Browser Extension'\n      })\n    });\n    \n    const data = await response.json();\n    \n    if (response.ok && data.success) {\n      // Store authentication token\n      await chrome.storage.local.set({\n        authToken: data.token,\n        tokenExpiresAt: data.expiresAt,\n        pairedAt: new Date().toISOString()\n      });\n      \n      showSuccess('Successfully paired with SecureVault!');\n      \n      // Update connection status\n      await checkVaultStatus();\n      \n    } else {\n      throw new Error(data.error || 'Pairing failed');\n    }\n    \n  } catch (error) {\n    console.error('Pairing failed:', error);\n    if (error.message.includes('Invalid pairing code')) {\n      showError('Invalid or expired pairing code. Please generate a new one in SecureVault.');\n    } else if (error.message.includes('already used')) {\n      showError('This pairing code has already been used. Please generate a new one.');\n    } else {\n      showError('Pairing failed. Make sure SecureVault is running and try again.');\n    }\n  } finally {\n    // Restore button state\n    pairText.textContent = originalText;\n    pairBtn.disabled = false;\n  }\n}\n\n// Generate unique extension ID\nfunction generateExtensionId() {\n  return 'ext_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now();\n}\n\n// Toggle auto-fill setting\nasync function toggleAutoFill() {\n  const toggle = document.getElementById('autoFillToggle');\n  const isEnabled = !toggle.classList.contains('active');\n  \n  updateToggle('autoFillToggle', isEnabled);\n  \n  // Save to storage\n  await chrome.storage.local.set({\n    autoFillEnabled: isEnabled\n  });\n  \n  // Notify content scripts of change\n  try {\n    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n    if (tab) {\n      chrome.tabs.sendMessage(tab.id, {\n        type: 'SETTING_CHANGED',\n        setting: 'autoFillEnabled',\n        value: isEnabled\n      });\n    }\n  } catch (error) {\n    // Content script may not be loaded, ignore\n  }\n}\n\n// Toggle hints setting\nasync function toggleHints() {\n  const toggle = document.getElementById('hintsToggle');\n  const isEnabled = !toggle.classList.contains('active');\n  \n  updateToggle('hintsToggle', isEnabled);\n  \n  // Save to storage\n  await chrome.storage.local.set({\n    showHints: isEnabled\n  });\n}\n\n// Update toggle visual state\nfunction updateToggle(toggleId, isActive) {\n  const toggle = document.getElementById(toggleId);\n  if (isActive) {\n    toggle.classList.add('active');\n  } else {\n    toggle.classList.remove('active');\n  }\n}\n\n// Update last sync time display\nasync function updateLastSyncTime() {\n  const result = await chrome.storage.local.get(['lastSync']);\n  const lastSyncEl = document.getElementById('lastSync');\n  \n  if (result.lastSync) {\n    const syncDate = new Date(result.lastSync);\n    const now = new Date();\n    const diffMinutes = Math.floor((now - syncDate) / (1000 * 60));\n    \n    let timeText;\n    if (diffMinutes < 1) {\n      timeText = 'Just now';\n    } else if (diffMinutes < 60) {\n      timeText = `${diffMinutes} minute${diffMinutes === 1 ? '' : 's'} ago`;\n    } else if (diffMinutes < 1440) {\n      const hours = Math.floor(diffMinutes / 60);\n      timeText = `${hours} hour${hours === 1 ? '' : 's'} ago`;\n    } else {\n      timeText = syncDate.toLocaleDateString();\n    }\n    \n    lastSyncEl.textContent = `Last sync: ${timeText}`;\n  } else {\n    lastSyncEl.textContent = 'Last sync: Never';\n  }\n}\n\n// Send message to background script\nfunction sendMessage(message) {\n  return new Promise((resolve, reject) => {\n    chrome.runtime.sendMessage(message, (response) => {\n      if (chrome.runtime.lastError) {\n        reject(new Error(chrome.runtime.lastError.message));\n      } else {\n        resolve(response);\n      }\n    });\n  });\n}\n\n// Show success message\nfunction showSuccess(message) {\n  showNotification(message, 'success');\n}\n\n// Show error message\nfunction showError(message) {\n  showNotification(message, 'error');\n}\n\n// Show notification (simple implementation for popup)\nfunction showNotification(message, type) {\n  // For popup, we could create a temporary notification element\n  // or just use console for now since popup closes quickly\n  console.log(`${type.toUpperCase()}: ${message}`);\n  \n  // Could also briefly change button colors or show status\n  if (type === 'success') {\n    // Briefly flash green\n    document.body.style.borderTop = '3px solid #10B981';\n    setTimeout(() => {\n      document.body.style.borderTop = 'none';\n    }, 2000);\n  } else if (type === 'error') {\n    // Briefly flash red\n    document.body.style.borderTop = '3px solid #EF4444';\n    setTimeout(() => {\n      document.body.style.borderTop = 'none';\n    }, 2000);\n  }\n}","size_bytes":11831},"client/src/components/security-settings-modal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/hooks/use-toast';\nimport { useVault } from '@/contexts/vault-context';\nimport { CryptoService, KDFConfig } from '@/lib/crypto';\nimport { Shield, Clock, Zap, AlertTriangle, Info, Eye, EyeOff } from 'lucide-react';\n\ninterface SecuritySettingsModalProps {\n  trigger: React.ReactNode;\n  onSettingsChanged?: (kdfConfig: KDFConfig) => void;\n}\n\ninterface BenchmarkResult {\n  preset: string;\n  config: KDFConfig;\n  timeMs: number;\n}\n\nexport function SecuritySettingsModal({ trigger, onSettingsChanged }: SecuritySettingsModalProps) {\n  const [open, setOpen] = useState(false);\n  const [selectedPreset, setSelectedPreset] = useState<string>('standard');\n  const [benchmarkResults, setBenchmarkResults] = useState<BenchmarkResult[]>([]);\n  const [isBenchmarking, setIsBenchmarking] = useState(false);\n  const [benchmarkProgress, setBenchmarkProgress] = useState(0);\n  const [masterPassword, setMasterPassword] = useState('');\n  const [showMasterPassword, setShowMasterPassword] = useState(false);\n  const [isApplying, setIsApplying] = useState(false);\n  const [applyProgress, setApplyProgress] = useState(0);\n  const { toast } = useToast();\n  const { getKDFConfig, updateKDFConfig } = useVault();\n\n  // Load current KDF configuration on open\n  useEffect(() => {\n    if (open) {\n      loadCurrentKDFConfig();\n    }\n  }, [open]);\n\n  const loadCurrentKDFConfig = async () => {\n    try {\n      const currentConfig = await getKDFConfig();\n      if (currentConfig) {\n        // Find the preset that matches current config\n        const matchingPreset = Object.entries(CryptoService.KDF_PRESETS).find(([_, config]) => \n          config.algorithm === currentConfig.algorithm &&\n          config.iterations === currentConfig.iterations &&\n          config.hash === currentConfig.hash\n        );\n        \n        if (matchingPreset) {\n          setSelectedPreset(matchingPreset[0]);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load current KDF config:', error);\n    }\n  };\n\n  // Get preset details with icons and colors\n  const getPresetInfo = (preset: string) => {\n    switch (preset) {\n      case 'fast':\n        return {\n          icon: <Zap className=\"w-4 h-4\" />,\n          color: 'text-blue-600 dark:text-blue-400',\n          bgColor: 'bg-blue-50 dark:bg-blue-950',\n          label: 'Fast (Development)',\n          description: '100K iterations - For testing only'\n        };\n      case 'standard':\n        return {\n          icon: <Shield className=\"w-4 h-4\" />,\n          color: 'text-green-600 dark:text-green-400',\n          bgColor: 'bg-green-50 dark:bg-green-950',\n          label: 'Standard Security',\n          description: '600K iterations - Recommended for most users'\n        };\n      case 'high':\n        return {\n          icon: <Shield className=\"w-4 h-4\" />,\n          color: 'text-orange-600 dark:text-orange-400',\n          bgColor: 'bg-orange-50 dark:bg-orange-950',\n          label: 'High Security',\n          description: '1M iterations - For sensitive data'\n        };\n      case 'maximum':\n        return {\n          icon: <Shield className=\"w-4 h-4\" />,\n          color: 'text-red-600 dark:text-red-400',\n          bgColor: 'bg-red-50 dark:bg-red-950',\n          label: 'Maximum Security',\n          description: '2M iterations SHA-512 - Strongest protection'\n        };\n      default:\n        return {\n          icon: <Shield className=\"w-4 h-4\" />,\n          color: 'text-gray-600 dark:text-gray-400',\n          bgColor: 'bg-gray-50 dark:bg-gray-950',\n          label: preset,\n          description: 'Custom configuration'\n        };\n    }\n  };\n\n  // Run performance benchmark\n  const runBenchmark = async () => {\n    if (isBenchmarking) return;\n    \n    setIsBenchmarking(true);\n    setBenchmarkProgress(0);\n    \n    try {\n      // Simulate progress updates\n      const progressInterval = setInterval(() => {\n        setBenchmarkProgress(prev => Math.min(prev + 10, 90));\n      }, 200);\n      \n      const results = await CryptoService.benchmarkKDF();\n      \n      clearInterval(progressInterval);\n      setBenchmarkProgress(100);\n      setBenchmarkResults(results);\n      \n      toast({\n        title: \"Benchmark Complete\",\n        description: `Tested ${results.length} security presets on your device.`,\n      });\n    } catch (error) {\n      console.error('Benchmark failed:', error);\n      toast({\n        title: \"Benchmark Failed\",\n        description: \"Could not test KDF performance. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsBenchmarking(false);\n      setTimeout(() => setBenchmarkProgress(0), 1000);\n    }\n  };\n\n  // Get benchmark time for a preset\n  const getBenchmarkTime = (preset: string): number | null => {\n    const result = benchmarkResults.find(r => r.preset === preset);\n    return result ? result.timeMs : null;\n  };\n\n  // Format time display\n  const formatTime = (timeMs: number): string => {\n    if (timeMs < 1000) return `${timeMs}ms`;\n    return `${(timeMs / 1000).toFixed(1)}s`;\n  };\n\n  // Apply security settings\n  const applySettings = async () => {\n    const config = CryptoService.KDF_PRESETS[selectedPreset];\n    if (!config) return;\n\n    if (!masterPassword.trim()) {\n      toast({\n        title: \"Master Password Required\",\n        description: \"Please enter your master password to apply security settings.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsApplying(true);\n    setApplyProgress(0);\n\n    try {\n      await updateKDFConfig(masterPassword, config, (progress) => {\n        setApplyProgress(progress);\n      });\n\n      onSettingsChanged?.(config);\n      toast({\n        title: \"Security Settings Updated\",\n        description: `Applied ${getPresetInfo(selectedPreset).label} configuration. Vault re-encrypted successfully.`,\n      });\n      \n      // Reset form and close modal\n      setMasterPassword('');\n      setApplyProgress(0);\n      setOpen(false);\n    } catch (error) {\n      console.error('Failed to update security settings:', error);\n      toast({\n        title: \"Update Failed\",\n        description: error instanceof Error ? error.message : \"Failed to update security settings. Please check your password and try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsApplying(false);\n    }\n  };\n\n  // Test password strength recommendation\n  const [testPassword, setTestPassword] = useState('');\n  const [recommendation, setRecommendation] = useState<{\n    preset: string;\n    reason: string;\n    config: KDFConfig;\n  } | null>(null);\n\n  useEffect(() => {\n    if (testPassword.length > 0) {\n      const rec = CryptoService.recommendKDFPreset(testPassword);\n      setRecommendation(rec);\n    } else {\n      setRecommendation(null);\n    }\n  }, [testPassword]);\n\n  // Auto-apply recommendation when using master password\n  useEffect(() => {\n    if (masterPassword.length >= 8) {\n      const rec = CryptoService.recommendKDFPreset(masterPassword);\n      // Only auto-suggest if current selection is weaker than recommended\n      const currentConfig = CryptoService.KDF_PRESETS[selectedPreset];\n      const recommendedConfig = CryptoService.KDF_PRESETS[rec.preset];\n      \n      if (recommendedConfig.iterations > currentConfig.iterations) {\n        setSelectedPreset(rec.preset);\n      }\n    }\n  }, [masterPassword, selectedPreset]);\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild data-testid=\"button-security-settings\">\n        {trigger}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Shield className=\"w-5 h-5\" />\n            Security Settings\n          </DialogTitle>\n          <DialogDescription>\n            Configure encryption strength and key derivation settings for your vault.\n            Higher security levels provide better protection but take longer to unlock.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* KDF Preset Selection */}\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"kdf-preset\" className=\"text-sm font-medium\">\n                Security Level\n              </Label>\n              <Select value={selectedPreset} onValueChange={setSelectedPreset}>\n                <SelectTrigger data-testid=\"select-security-level\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {Object.entries(CryptoService.KDF_PRESETS).map(([preset, config]) => {\n                    const info = getPresetInfo(preset);\n                    const benchmarkTime = getBenchmarkTime(preset);\n                    \n                    return (\n                      <SelectItem key={preset} value={preset}>\n                        <div className=\"flex items-center gap-2 w-full\">\n                          <div className={info.color}>{info.icon}</div>\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium\">{info.label}</div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {config.iterations.toLocaleString()} iterations\n                              {benchmarkTime && ` • ${formatTime(benchmarkTime)}`}\n                            </div>\n                          </div>\n                        </div>\n                      </SelectItem>\n                    );\n                  })}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Current Selection Details */}\n            {selectedPreset && (\n              <div className={`p-4 rounded-lg border ${getPresetInfo(selectedPreset).bgColor}`}>\n                <div className=\"flex items-start gap-3\">\n                  <div className={getPresetInfo(selectedPreset).color}>\n                    {getPresetInfo(selectedPreset).icon}\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium\">{getPresetInfo(selectedPreset).label}</h4>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {getPresetInfo(selectedPreset).description}\n                    </p>\n                    <div className=\"flex gap-2 mt-2\">\n                      <Badge variant=\"outline\">\n                        {CryptoService.KDF_PRESETS[selectedPreset].algorithm}\n                      </Badge>\n                      <Badge variant=\"outline\">\n                        {CryptoService.KDF_PRESETS[selectedPreset].iterations.toLocaleString()} iterations\n                      </Badge>\n                      <Badge variant=\"outline\">\n                        {CryptoService.KDF_PRESETS[selectedPreset].hash}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Performance Benchmark */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <Label className=\"text-sm font-medium\">Performance Test</Label>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={runBenchmark}\n                  disabled={isBenchmarking}\n                  data-testid=\"button-run-benchmark\"\n                >\n                  <Clock className=\"w-4 h-4 mr-2\" />\n                  {isBenchmarking ? 'Testing...' : 'Run Benchmark'}\n                </Button>\n              </div>\n              \n              {isBenchmarking && (\n                <div>\n                  <Progress value={benchmarkProgress} className=\"w-full\" />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Testing security presets on your device...\n                  </p>\n                </div>\n              )}\n\n              {benchmarkResults.length > 0 && (\n                <div className=\"space-y-2\">\n                  <p className=\"text-xs text-muted-foreground\">\n                    Performance results on this device:\n                  </p>\n                  {benchmarkResults.map((result) => {\n                    const info = getPresetInfo(result.preset);\n                    return (\n                      <div key={result.preset} className=\"flex items-center justify-between py-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className={info.color}>{info.icon}</div>\n                          <span className=\"text-sm\">{info.label}</span>\n                        </div>\n                        <span className=\"text-sm font-mono\">\n                          {result.timeMs === -1 ? 'Error' : formatTime(result.timeMs)}\n                        </span>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Password Strength Recommendation */}\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"test-password\" className=\"text-sm font-medium\">\n                Password Strength Analyzer\n              </Label>\n              <input\n                id=\"test-password\"\n                type=\"password\"\n                placeholder=\"Enter a test password...\"\n                value={testPassword}\n                onChange={(e) => setTestPassword(e.target.value)}\n                className=\"w-full px-3 py-2 border rounded-md text-sm\"\n                data-testid=\"input-test-password\"\n              />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Test password strength to get security level recommendations\n              </p>\n            </div>\n\n            {recommendation && (\n              <div className=\"p-4 rounded-lg border bg-card\">\n                <div className=\"flex items-start gap-3\">\n                  <Info className=\"w-5 h-5 text-blue-500 mt-0.5\" />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium\">Recommended Setting</h4>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {recommendation.reason}\n                    </p>\n                    <div className=\"flex gap-2 mt-2\">\n                      <Badge \n                        className={`${getPresetInfo(recommendation.preset).bgColor} ${getPresetInfo(recommendation.preset).color} border-current`}\n                      >\n                        {getPresetInfo(recommendation.preset).label}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Security Information */}\n            <div className=\"space-y-3\">\n              <h4 className=\"text-sm font-medium\">Security Information</h4>\n              \n              <div className=\"space-y-3 text-sm\">\n                <div className=\"flex items-start gap-2\">\n                  <AlertTriangle className=\"w-4 h-4 text-amber-500 mt-0.5\" />\n                  <div>\n                    <p className=\"font-medium\">Important Notes</p>\n                    <ul className=\"list-disc list-inside text-muted-foreground mt-1 space-y-1\">\n                      <li>Higher security = slower vault unlock times</li>\n                      <li>Settings apply to new vaults and re-encrypted data</li>\n                      <li>Consider device performance when choosing</li>\n                      <li>Standard level is recommended for most users</li>\n                    </ul>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-2\">\n                  <Info className=\"w-4 h-4 text-blue-500 mt-0.5\" />\n                  <div>\n                    <p className=\"font-medium\">Technical Details</p>\n                    <ul className=\"list-disc list-inside text-muted-foreground mt-1 space-y-1\">\n                      <li>Uses PBKDF2 key derivation function</li>\n                      <li>AES-GCM encryption with 256-bit keys</li>\n                      <li>Cryptographically secure random salts</li>\n                      <li>Client-side encryption (zero-knowledge)</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Master Password Input */}\n        <div className=\"space-y-3 mt-6 pt-4 border-t\">\n          <div>\n            <Label htmlFor=\"master-password\" className=\"text-sm font-medium\">\n              Master Password Required\n            </Label>\n            <div className=\"relative mt-1\">\n              <Input\n                id=\"master-password\"\n                type={showMasterPassword ? \"text\" : \"password\"}\n                placeholder=\"Enter your master password...\"\n                value={masterPassword}\n                onChange={(e) => setMasterPassword(e.target.value)}\n                className=\"pr-10\"\n                data-testid=\"input-master-password\"\n                disabled={isApplying}\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                onClick={() => setShowMasterPassword(!showMasterPassword)}\n                disabled={isApplying}\n                data-testid=\"button-toggle-master-password\"\n              >\n                {showMasterPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n              </Button>\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Your master password is required to re-encrypt the vault with new security settings\n            </p>\n          </div>\n\n          {/* Re-encryption Progress */}\n          {isApplying && (\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <Label className=\"text-sm font-medium\">Re-encrypting Vault</Label>\n                <span className=\"text-sm text-muted-foreground\">{applyProgress}%</span>\n              </div>\n              <Progress value={applyProgress} className=\"w-full\" />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Applying new security settings and re-encrypting all vault data...\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-end gap-3 mt-6\">\n          <Button \n            variant=\"outline\" \n            onClick={() => {\n              setMasterPassword('');\n              setOpen(false);\n            }} \n            disabled={isApplying}\n            data-testid=\"button-cancel-security\"\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={applySettings} \n            disabled={isApplying || !masterPassword.trim()}\n            data-testid=\"button-apply-security\"\n          >\n            {isApplying ? 'Applying...' : 'Apply Settings'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":19781},"client/src/lib/csv-parsers.ts":{"content":"import type { PasswordEntry } from '@shared/schema';\n\n// CSV parsing utility functions\nexport class CSVParser {\n  static parseCsvToRows(content: string): string[][] {\n    const lines = content.trim().split('\\n');\n    const rows: string[][] = [];\n    \n    for (const line of lines) {\n      // Simple CSV parsing - handles quoted fields with commas\n      const row: string[] = [];\n      let current = '';\n      let inQuotes = false;\n      \n      for (let i = 0; i < line.length; i++) {\n        const char = line[i];\n        \n        if (char === '\"') {\n          inQuotes = !inQuotes;\n        } else if (char === ',' && !inQuotes) {\n          row.push(current.trim());\n          current = '';\n        } else {\n          current += char;\n        }\n      }\n      \n      row.push(current.trim());\n      rows.push(row);\n    }\n    \n    return rows;\n  }\n\n  static cleanField(field: string): string {\n    return field.replace(/^\"|\"$/g, '').trim();\n  }\n\n  static createPasswordEntry(data: {\n    name: string;\n    url?: string;\n    username: string;\n    password: string;\n    category?: string;\n    notes?: string;\n  }): PasswordEntry {\n    return {\n      id: crypto.randomUUID(),\n      name: data.name || 'Imported Password',\n      url: data.url || '',\n      username: data.username || '',\n      password: data.password || '',\n      category: data.category || 'Imported',\n      notes: data.notes || '',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      lastUsed: undefined,\n    };\n  }\n}\n\n// Password manager specific parsers\nexport class PasswordManagerParsers {\n  // Chrome/Chromium CSV format\n  static parseChrome(content: string): PasswordEntry[] {\n    const rows = CSVParser.parseCsvToRows(content);\n    const [header, ...dataRows] = rows;\n    \n    // Expected headers: name,url,username,password\n    const entries: PasswordEntry[] = [];\n    \n    for (const row of dataRows) {\n      if (row.length < 4) continue;\n      \n      const [name, url, username, password] = row.map(CSVParser.cleanField);\n      \n      if (name && username && password) {\n        entries.push(CSVParser.createPasswordEntry({\n          name,\n          url,\n          username,\n          password,\n          category: 'Chrome Import',\n        }));\n      }\n    }\n    \n    return entries;\n  }\n\n  // Safari CSV format\n  static parseSafari(content: string): PasswordEntry[] {\n    const rows = CSVParser.parseCsvToRows(content);\n    const [header, ...dataRows] = rows;\n    \n    // Expected headers: Title,URL,Username,Password,Notes\n    const entries: PasswordEntry[] = [];\n    \n    for (const row of dataRows) {\n      if (row.length < 4) continue;\n      \n      const [name, url, username, password, notes] = row.map(CSVParser.cleanField);\n      \n      if (name && username && password) {\n        entries.push(CSVParser.createPasswordEntry({\n          name,\n          url,\n          username,\n          password,\n          notes,\n          category: 'Safari Import',\n        }));\n      }\n    }\n    \n    return entries;\n  }\n\n  // Firefox CSV format (from Lockwise export)\n  static parseFirefox(content: string): PasswordEntry[] {\n    const rows = CSVParser.parseCsvToRows(content);\n    const [header, ...dataRows] = rows;\n    \n    // Expected headers: url,username,password,httpRealm,formActionOrigin,guid,timeCreated,timeLastUsed,timePasswordChanged\n    const entries: PasswordEntry[] = [];\n    \n    for (const row of dataRows) {\n      if (row.length < 3) continue;\n      \n      const [url, username, password] = row.map(CSVParser.cleanField);\n      \n      if (url && username && password) {\n        // Extract site name from URL\n        let name = url;\n        try {\n          const urlObj = new URL(url);\n          name = urlObj.hostname.replace('www.', '');\n        } catch {\n          // Keep original URL if parsing fails\n        }\n        \n        entries.push(CSVParser.createPasswordEntry({\n          name,\n          url,\n          username,\n          password,\n          category: 'Firefox Import',\n        }));\n      }\n    }\n    \n    return entries;\n  }\n\n  // Bitwarden CSV format\n  static parseBitwarden(content: string): PasswordEntry[] {\n    const rows = CSVParser.parseCsvToRows(content);\n    const [header, ...dataRows] = rows;\n    \n    // Expected headers: folder,favorite,type,name,notes,fields,reprompt,login_uri,login_username,login_password,login_totp\n    const entries: PasswordEntry[] = [];\n    \n    for (const row of dataRows) {\n      if (row.length < 10) continue;\n      \n      const [folder, favorite, type, name, notes, fields, reprompt, loginUri, loginUsername, loginPassword] = row.map(CSVParser.cleanField);\n      \n      if (name && loginUsername && loginPassword && type === 'login') {\n        entries.push(CSVParser.createPasswordEntry({\n          name,\n          url: loginUri,\n          username: loginUsername,\n          password: loginPassword,\n          notes,\n          category: folder || 'Bitwarden Import',\n        }));\n      }\n    }\n    \n    return entries;\n  }\n\n  // 1Password CSV format\n  static parse1Password(content: string): PasswordEntry[] {\n    const rows = CSVParser.parseCsvToRows(content);\n    const [header, ...dataRows] = rows;\n    \n    // Expected headers: Title,Website,Username,Password,Notes,Tags\n    const entries: PasswordEntry[] = [];\n    \n    for (const row of dataRows) {\n      if (row.length < 4) continue;\n      \n      const [title, website, username, password, notes, tags] = row.map(CSVParser.cleanField);\n      \n      if (title && username && password) {\n        entries.push(CSVParser.createPasswordEntry({\n          name: title,\n          url: website,\n          username,\n          password,\n          notes,\n          category: tags || '1Password Import',\n        }));\n      }\n    }\n    \n    return entries;\n  }\n\n  // LastPass CSV format\n  static parseLastPass(content: string): PasswordEntry[] {\n    const rows = CSVParser.parseCsvToRows(content);\n    const [header, ...dataRows] = rows;\n    \n    // Expected headers: url,username,password,extra,name,grouping,fav\n    const entries: PasswordEntry[] = [];\n    \n    for (const row of dataRows) {\n      if (row.length < 5) continue;\n      \n      const [url, username, password, extra, name, grouping] = row.map(CSVParser.cleanField);\n      \n      if (name && username && password) {\n        entries.push(CSVParser.createPasswordEntry({\n          name,\n          url,\n          username,\n          password,\n          notes: extra,\n          category: grouping || 'LastPass Import',\n        }));\n      }\n    }\n    \n    return entries;\n  }\n\n  // Generic CSV parser that tries to auto-detect common fields\n  static parseGeneric(content: string): PasswordEntry[] {\n    const rows = CSVParser.parseCsvToRows(content);\n    const [header, ...dataRows] = rows;\n    \n    if (!header || dataRows.length === 0) return [];\n    \n    // Map common field names to our schema\n    const fieldMapping: { [key: string]: string } = {};\n    \n    header.forEach((col, index) => {\n      const lowerCol = col.toLowerCase().trim();\n      \n      if (lowerCol.includes('name') || lowerCol.includes('title') || lowerCol.includes('site')) {\n        fieldMapping['name'] = index.toString();\n      } else if (lowerCol.includes('url') || lowerCol.includes('website') || lowerCol.includes('address')) {\n        fieldMapping['url'] = index.toString();\n      } else if (lowerCol.includes('username') || lowerCol.includes('user') || lowerCol.includes('email')) {\n        fieldMapping['username'] = index.toString();\n      } else if (lowerCol.includes('password') || lowerCol.includes('pass')) {\n        fieldMapping['password'] = index.toString();\n      } else if (lowerCol.includes('note') || lowerCol.includes('comment') || lowerCol.includes('extra')) {\n        fieldMapping['notes'] = index.toString();\n      } else if (lowerCol.includes('category') || lowerCol.includes('folder') || lowerCol.includes('group')) {\n        fieldMapping['category'] = index.toString();\n      }\n    });\n    \n    const entries: PasswordEntry[] = [];\n    \n    for (const row of dataRows) {\n      const name = row[parseInt(fieldMapping['name'] || '0')] || '';\n      const url = row[parseInt(fieldMapping['url'] || '')] || '';\n      const username = row[parseInt(fieldMapping['username'] || '')] || '';\n      const password = row[parseInt(fieldMapping['password'] || '')] || '';\n      const notes = row[parseInt(fieldMapping['notes'] || '')] || '';\n      const category = row[parseInt(fieldMapping['category'] || '')] || '';\n      \n      if (name && username && password) {\n        entries.push(CSVParser.createPasswordEntry({\n          name: CSVParser.cleanField(name),\n          url: CSVParser.cleanField(url),\n          username: CSVParser.cleanField(username),\n          password: CSVParser.cleanField(password),\n          notes: CSVParser.cleanField(notes),\n          category: CSVParser.cleanField(category) || 'Generic Import',\n        }));\n      }\n    }\n    \n    return entries;\n  }\n}\n\n// Export type definitions and parser registry\nexport interface ParserConfig {\n  id: string;\n  name: string;\n  description: string;\n  parser: (content: string) => PasswordEntry[];\n}\n\nexport const PASSWORD_MANAGER_PARSERS: ParserConfig[] = [\n  {\n    id: 'chrome',\n    name: 'Chrome',\n    description: 'Chrome/Chromium browser password export',\n    parser: PasswordManagerParsers.parseChrome,\n  },\n  {\n    id: 'safari',\n    name: 'Safari',\n    description: 'Safari browser password export',\n    parser: PasswordManagerParsers.parseSafari,\n  },\n  {\n    id: 'firefox',\n    name: 'Firefox',\n    description: 'Firefox/Lockwise password export',\n    parser: PasswordManagerParsers.parseFirefox,\n  },\n  {\n    id: 'bitwarden',\n    name: 'Bitwarden',\n    description: 'Bitwarden password manager export',\n    parser: PasswordManagerParsers.parseBitwarden,\n  },\n  {\n    id: 'onepassword',\n    name: '1Password',\n    description: '1Password manager export',\n    parser: PasswordManagerParsers.parse1Password,\n  },\n  {\n    id: 'lastpass',\n    name: 'LastPass',\n    description: 'LastPass password manager export',\n    parser: PasswordManagerParsers.parseLastPass,\n  },\n  {\n    id: 'generic',\n    name: 'Generic CSV',\n    description: 'Auto-detect fields from CSV headers',\n    parser: PasswordManagerParsers.parseGeneric,\n  },\n];","size_bytes":10248},"client/public/sw.js":{"content":"// SecureVault PWA Service Worker\nconst CACHE_NAME = 'securevault-v1.0.0';\nconst STATIC_CACHE = 'securevault-static-v1.0.0';\nconst DYNAMIC_CACHE = 'securevault-dynamic-v1.0.0';\n\n// Assets to cache on install (production-ready paths)\nconst STATIC_ASSETS = [\n  '/',\n  '/manifest.json',\n  '/offline.html',\n  // Note: In production, actual JS/CSS assets have hashed names\n  // This will be updated by build process or PWA plugin\n];\n\n// URLs that should always try network first (never cache sensitive data)\nconst NETWORK_ONLY_URLS = [\n  '/api/vault',\n  '/api/passwords', \n  '/api/subscriptions',\n  '/api/auth',\n  '/api/session',\n];\n\n// URLs that should try network first but can fallback to cache\nconst NETWORK_FIRST_URLS = [\n  '/api/',\n  '/server/',\n];\n\n// URLs that should be cached (static assets only)\nconst CACHE_FIRST_URLS = [\n  '/assets/',\n  '/icons/',\n  '/screenshots/',\n  '.css',\n  '.js',\n  '.png',\n  '.jpg',\n  '.jpeg',\n  '.gif',\n  '.webp',\n  '.svg',\n  '.woff',\n  '.woff2',\n];\n\n// Install event - cache static assets\nself.addEventListener('install', (event) => {\n  console.log('Service Worker: Installing...');\n  \n  event.waitUntil(\n    caches.open(STATIC_CACHE)\n      .then((cache) => {\n        console.log('Service Worker: Caching static assets');\n        return cache.addAll(STATIC_ASSETS);\n      })\n      .then(() => {\n        console.log('Service Worker: Static assets cached');\n        return self.skipWaiting();\n      })\n      .catch((error) => {\n        console.error('Service Worker: Failed to cache static assets', error);\n      })\n  );\n});\n\n// Activate event - clean up old caches\nself.addEventListener('activate', (event) => {\n  console.log('Service Worker: Activating...');\n  \n  event.waitUntil(\n    caches.keys()\n      .then((cacheNames) => {\n        return Promise.all(\n          cacheNames.map((cacheName) => {\n            if (cacheName !== STATIC_CACHE && \n                cacheName !== DYNAMIC_CACHE && \n                cacheName !== CACHE_NAME) {\n              console.log('Service Worker: Deleting old cache', cacheName);\n              return caches.delete(cacheName);\n            }\n          })\n        );\n      })\n      .then(() => {\n        console.log('Service Worker: Activated');\n        return self.clients.claim();\n      })\n  );\n});\n\n// Fetch event - implement caching strategies\nself.addEventListener('fetch', (event) => {\n  const { request } = event;\n  const url = new URL(request.url);\n  \n  // Skip non-GET requests\n  if (request.method !== 'GET') {\n    return;\n  }\n  \n  // Skip browser extension requests\n  if (url.protocol === 'chrome-extension:' || url.protocol === 'moz-extension:') {\n    return;\n  }\n\n  event.respondWith(\n    handleFetchRequest(request)\n  );\n});\n\n// Handle different fetch strategies\nasync function handleFetchRequest(request) {\n  const url = new URL(request.url);\n  \n  // Never cache sensitive vault data\n  if (shouldUseNetworkOnly(url)) {\n    return networkOnlyStrategy(request);\n  }\n  \n  // Network first for API calls and dynamic content\n  if (shouldUseNetworkFirst(url)) {\n    return networkFirstStrategy(request);\n  }\n  \n  // Cache first for static assets\n  if (shouldUseCacheFirst(url)) {\n    return cacheFirstStrategy(request);\n  }\n  \n  // Default: Network first with fallback\n  return networkFirstStrategy(request);\n}\n\n// Check if URL should never be cached (sensitive data)\nfunction shouldUseNetworkOnly(url) {\n  return NETWORK_ONLY_URLS.some(pattern => \n    url.pathname.startsWith(pattern)\n  );\n}\n\n// Check if URL should use network first strategy\nfunction shouldUseNetworkFirst(url) {\n  return NETWORK_FIRST_URLS.some(pattern => \n    url.pathname.startsWith(pattern)\n  );\n}\n\n// Check if URL should use cache first strategy  \nfunction shouldUseCacheFirst(url) {\n  return CACHE_FIRST_URLS.some(pattern => \n    url.pathname.includes(pattern) || url.pathname.endsWith(pattern)\n  );\n}\n\n// Network-only strategy - never cache sensitive data\nasync function networkOnlyStrategy(request) {\n  try {\n    return await fetch(request);\n  } catch (error) {\n    console.log('Network request failed for sensitive endpoint:', error);\n    return new Response('Network unavailable - sensitive data requires connection', {\n      status: 503,\n      statusText: 'Service Unavailable',\n      headers: new Headers({\n        'Content-Type': 'text/plain',\n      }),\n    });\n  }\n}\n\n// Network first strategy - try network, fallback to cache (non-sensitive data only)\nasync function networkFirstStrategy(request) {\n  try {\n    const networkResponse = await fetch(request);\n    \n    if (networkResponse.ok) {\n      // Only cache non-sensitive responses\n      const url = new URL(request.url);\n      if (!shouldUseNetworkOnly(url)) {\n        const responseClone = networkResponse.clone();\n        caches.open(DYNAMIC_CACHE)\n          .then(cache => cache.put(request, responseClone))\n          .catch(error => console.error('Failed to cache response', error));\n      }\n    }\n    \n    return networkResponse;\n  } catch (error) {\n    console.log('Network failed, trying cache...', error);\n    \n    const cachedResponse = await caches.match(request);\n    if (cachedResponse) {\n      return cachedResponse;\n    }\n    \n    // Return offline page for navigation requests\n    if (request.destination === 'document') {\n      return caches.match('/offline.html') || getOfflinePage();\n    }\n    \n    // Return basic error response\n    return new Response('Offline - Content not available', {\n      status: 503,\n      statusText: 'Service Unavailable',\n      headers: new Headers({\n        'Content-Type': 'text/plain',\n      }),\n    });\n  }\n}\n\n// Cache first strategy - try cache, fallback to network\nasync function cacheFirstStrategy(request) {\n  const cachedResponse = await caches.match(request);\n  \n  if (cachedResponse) {\n    // Update cache in background\n    fetch(request)\n      .then(response => {\n        if (response.ok) {\n          caches.open(STATIC_CACHE)\n            .then(cache => cache.put(request, response.clone()));\n        }\n      })\n      .catch(error => console.log('Background update failed', error));\n    \n    return cachedResponse;\n  }\n  \n  try {\n    const networkResponse = await fetch(request);\n    \n    if (networkResponse.ok) {\n      const responseClone = networkResponse.clone();\n      caches.open(STATIC_CACHE)\n        .then(cache => cache.put(request, responseClone));\n    }\n    \n    return networkResponse;\n  } catch (error) {\n    console.error('Cache and network both failed', error);\n    return new Response('Resource not available offline', {\n      status: 503,\n      statusText: 'Service Unavailable',\n    });\n  }\n}\n\n// Generate offline page response\nfunction getOfflinePage() {\n  return new Response(\n    `<!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>SecureVault - Offline</title>\n      <style>\n        body { \n          font-family: system-ui, -apple-system, sans-serif; \n          text-align: center; \n          padding: 2rem;\n          background-color: #0f0f23;\n          color: #fff;\n          margin: 0;\n          min-height: 100vh;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n        }\n        .offline-icon { font-size: 4rem; margin-bottom: 1rem; }\n        h1 { color: #6366f1; margin-bottom: 0.5rem; }\n        p { color: #a1a1aa; margin-bottom: 1.5rem; }\n        button {\n          background: #6366f1;\n          color: white;\n          border: none;\n          padding: 0.75rem 1.5rem;\n          border-radius: 0.5rem;\n          cursor: pointer;\n          font-size: 1rem;\n        }\n        button:hover { background: #5145cd; }\n      </style>\n    </head>\n    <body>\n      <div class=\"offline-icon\">🔒</div>\n      <h1>SecureVault is Offline</h1>\n      <p>You're currently offline, but your encrypted vault data is still accessible locally.</p>\n      <button onclick=\"window.location.reload()\">Try Again</button>\n      <script>\n        // Auto-refresh when online\n        window.addEventListener('online', () => {\n          window.location.reload();\n        });\n      </script>\n    </body>\n    </html>`,\n    {\n      status: 200,\n      headers: new Headers({\n        'Content-Type': 'text/html',\n      }),\n    }\n  );\n}\n\n// Handle background sync for when connection is restored\nself.addEventListener('sync', (event) => {\n  console.log('Service Worker: Background sync triggered');\n  \n  if (event.tag === 'background-sync') {\n    event.waitUntil(\n      // Perform any background sync tasks\n      console.log('Performing background sync...')\n    );\n  }\n});\n\n// Handle push notifications (for future use)\nself.addEventListener('push', (event) => {\n  console.log('Service Worker: Push notification received');\n  \n  const options = {\n    body: 'SecureVault notification',\n    icon: '/icons/icon-192x192.png',\n    badge: '/icons/icon-72x72.png',\n    tag: 'securevault-notification',\n    requireInteraction: false,\n  };\n  \n  if (event.data) {\n    const data = event.data.json();\n    options.body = data.body || options.body;\n    options.title = data.title || 'SecureVault';\n  }\n  \n  event.waitUntil(\n    self.registration.showNotification(options.title || 'SecureVault', options)\n  );\n});\n\n// Message handler for update control\nself.addEventListener('message', (event) => {\n  if (event.data && event.data.action === 'SKIP_WAITING') {\n    console.log('Service Worker: Skipping waiting...');\n    self.skipWaiting();\n  }\n});\n\nconsole.log('Service Worker: Loaded and ready');","size_bytes":9544},"client/src/components/pwa-install-prompt.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { X, Smartphone, Monitor, Download, Star } from 'lucide-react';\nimport { usePWA } from '@/lib/pwa';\n\ninterface PWAInstallPromptProps {\n  onDismiss?: () => void;\n  className?: string;\n}\n\nexport function PWAInstallPrompt({ onDismiss, className = '' }: PWAInstallPromptProps) {\n  const { installPrompt } = usePWA();\n  const [dismissed, setDismissed] = useState(false);\n  const [showPrompt, setShowPrompt] = useState(false);\n\n  useEffect(() => {\n    // Show prompt after a delay if install is available and not dismissed\n    if (installPrompt.canInstall && !installPrompt.isInstalled && !dismissed) {\n      const timer = setTimeout(() => setShowPrompt(true), 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [installPrompt.canInstall, installPrompt.isInstalled, dismissed]);\n\n  const handleInstall = async () => {\n    try {\n      await installPrompt.install();\n      setShowPrompt(false);\n    } catch (error) {\n      console.error('Failed to install PWA:', error);\n    }\n  };\n\n  const handleDismiss = () => {\n    setDismissed(true);\n    setShowPrompt(false);\n    onDismiss?.();\n  };\n\n  // Don't show if already installed, dismissed, or can't install\n  if (!showPrompt || installPrompt.isInstalled || !installPrompt.canInstall) {\n    return null;\n  }\n\n  return (\n    <Card className={`fixed bottom-4 right-4 z-50 max-w-sm shadow-lg border-2 border-primary/20 ${className}`} data-testid=\"pwa-install-prompt\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"p-1 rounded-lg bg-primary/10\">\n              <Smartphone className=\"w-4 h-4 text-primary\" />\n            </div>\n            <CardTitle className=\"text-lg\">Install SecureVault</CardTitle>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleDismiss}\n            className=\"h-6 w-6 p-0\"\n            data-testid=\"button-dismiss-install\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        <CardDescription>\n          Get the full SecureVault experience with offline access and faster loading.\n        </CardDescription>\n        \n        <div className=\"grid grid-cols-2 gap-2 text-sm\">\n          <div className=\"flex items-center space-x-2\">\n            <Monitor className=\"w-4 h-4 text-muted-foreground\" />\n            <span className=\"text-muted-foreground\">Works offline</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Download className=\"w-4 h-4 text-muted-foreground\" />\n            <span className=\"text-muted-foreground\">Fast loading</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Star className=\"w-4 h-4 text-muted-foreground\" />\n            <span className=\"text-muted-foreground\">Native feel</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Smartphone className=\"w-4 h-4 text-muted-foreground\" />\n            <span className=\"text-muted-foreground\">Home screen</span>\n          </div>\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          <Button \n            variant=\"outline\" \n            size=\"sm\" \n            onClick={handleDismiss}\n            className=\"flex-1\"\n            data-testid=\"button-not-now\"\n          >\n            Not now\n          </Button>\n          <Button \n            size=\"sm\" \n            onClick={handleInstall}\n            className=\"flex-1\"\n            data-testid=\"button-install-pwa\"\n          >\n            <Download className=\"w-4 h-4 mr-2\" />\n            Install\n          </Button>\n        </div>\n        \n        <p className=\"text-xs text-muted-foreground text-center\">\n          Install SecureVault on your device for quick access and better performance.\n        </p>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Simple version for inline use\nexport function PWAInstallButton({ className = '' }: { className?: string }) {\n  const { installPrompt } = usePWA();\n\n  if (!installPrompt.canInstall || installPrompt.isInstalled) {\n    return null;\n  }\n\n  return (\n    <Button\n      variant=\"outline\"\n      size=\"sm\"\n      onClick={installPrompt.install}\n      className={className}\n      data-testid=\"button-install-inline\"\n    >\n      <Download className=\"w-4 h-4 mr-2\" />\n      Install App\n    </Button>\n  );\n}","size_bytes":4667},"client/src/components/pwa-offline-indicator.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { WifiOff, Wifi, RefreshCw, Download } from 'lucide-react';\nimport { usePWA } from '@/lib/pwa';\n\nexport function PWAOfflineIndicator() {\n  const { isOnline, updateAvailable, applyUpdate, networkInfo } = usePWA();\n  const [showOfflineAlert, setShowOfflineAlert] = useState(false);\n  const [showUpdateAlert, setShowUpdateAlert] = useState(false);\n\n  useEffect(() => {\n    if (!isOnline) {\n      setShowOfflineAlert(true);\n    } else {\n      // Hide offline alert when back online, but with a small delay\n      const timer = setTimeout(() => setShowOfflineAlert(false), 2000);\n      return () => clearTimeout(timer);\n    }\n  }, [isOnline]);\n\n  useEffect(() => {\n    if (updateAvailable) {\n      setShowUpdateAlert(true);\n    }\n  }, [updateAvailable]);\n\n  if (!showOfflineAlert && !showUpdateAlert) return null;\n\n  return (\n    <div className=\"fixed top-4 right-4 z-50 max-w-sm space-y-2\" data-testid=\"pwa-indicators\">\n      {/* Offline Indicator */}\n      {showOfflineAlert && (\n        <Alert \n          className={`border-2 transition-all duration-300 ${\n            isOnline \n              ? 'border-green-500 bg-green-50 dark:bg-green-950' \n              : 'border-orange-500 bg-orange-50 dark:bg-orange-950'\n          }`}\n          data-testid=\"offline-indicator\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              {isOnline ? (\n                <Wifi className=\"w-4 h-4 text-green-600 dark:text-green-400\" />\n              ) : (\n                <WifiOff className=\"w-4 h-4 text-orange-600 dark:text-orange-400\" />\n              )}\n              <AlertDescription className={\n                isOnline \n                  ? 'text-green-800 dark:text-green-200' \n                  : 'text-orange-800 dark:text-orange-200'\n              }>\n                {isOnline ? 'Back online!' : 'Working offline'}\n                {networkInfo.effectiveType && (\n                  <Badge variant=\"secondary\" className=\"ml-2 text-xs\">\n                    {networkInfo.effectiveType.toUpperCase()}\n                  </Badge>\n                )}\n              </AlertDescription>\n            </div>\n            {!isOnline && (\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => window.location.reload()}\n                className=\"ml-2\"\n                data-testid=\"button-retry-connection\"\n              >\n                <RefreshCw className=\"w-3 h-3\" />\n              </Button>\n            )}\n          </div>\n          {!isOnline && (\n            <p className=\"text-xs text-orange-700 dark:text-orange-300 mt-1\">\n              Your data is secured locally and will sync when reconnected.\n            </p>\n          )}\n        </Alert>\n      )}\n\n      {/* Update Available Indicator */}\n      {showUpdateAlert && updateAvailable && (\n        <Alert \n          className=\"border-2 border-blue-500 bg-blue-50 dark:bg-blue-950\"\n          data-testid=\"update-indicator\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Download className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\n              <AlertDescription className=\"text-blue-800 dark:text-blue-200\">\n                App update available\n              </AlertDescription>\n            </div>\n            <div className=\"flex space-x-2\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => setShowUpdateAlert(false)}\n                className=\"text-xs\"\n                data-testid=\"button-dismiss-update\"\n              >\n                Later\n              </Button>\n              <Button\n                size=\"sm\"\n                onClick={async () => {\n                  await applyUpdate();\n                  setShowUpdateAlert(false);\n                }}\n                className=\"text-xs\"\n                data-testid=\"button-apply-update\"\n              >\n                Update\n              </Button>\n            </div>\n          </div>\n          <p className=\"text-xs text-blue-700 dark:text-blue-300 mt-1\">\n            New features and improvements are ready to install.\n          </p>\n        </Alert>\n      )}\n    </div>\n  );\n}","size_bytes":4501},"client/src/lib/pwa.ts":{"content":"// PWA Service - Manage service worker, offline detection, and install prompts\n\ninterface BeforeInstallPromptEvent extends Event {\n  prompt(): Promise<void>;\n  userChoice: Promise<{ outcome: 'accepted' | 'dismissed'; platform: string }>;\n}\n\ninterface PWAInstallPrompt {\n  canInstall: boolean;\n  isInstalled: boolean;\n  install: () => Promise<void>;\n}\n\nclass PWAService {\n  private installPromptEvent: BeforeInstallPromptEvent | null = null;\n  private isOnline: boolean = navigator.onLine;\n  private updateAvailable: boolean = false;\n  private registration: ServiceWorkerRegistration | null = null;\n  private onlineChangeCallbacks: ((online: boolean) => void)[] = [];\n  private updateAvailableCallbacks: (() => void)[] = [];\n\n  constructor() {\n    this.initialize();\n  }\n\n  private async initialize() {\n    await this.registerServiceWorker();\n    this.setupOnlineDetection();\n    this.setupInstallPrompt();\n    this.setupUpdateDetection();\n  }\n\n  // Service Worker Registration\n  private async registerServiceWorker() {\n    if (!('serviceWorker' in navigator)) {\n      console.warn('PWA: Service Worker not supported');\n      return;\n    }\n\n    try {\n      this.registration = await navigator.serviceWorker.register('/sw.js', {\n        scope: '/',\n      });\n\n      console.log('PWA: Service Worker registered successfully');\n\n      // Handle updates\n      this.registration.addEventListener('updatefound', () => {\n        const installingWorker = this.registration!.installing;\n        if (installingWorker) {\n          installingWorker.addEventListener('statechange', () => {\n            if (installingWorker.state === 'installed' && navigator.serviceWorker.controller) {\n              this.updateAvailable = true;\n              this.notifyUpdateAvailable();\n            }\n          });\n        }\n      });\n\n      // Listen for messages from service worker\n      navigator.serviceWorker.addEventListener('message', (event) => {\n        if (event.data && event.data.type === 'CACHE_UPDATED') {\n          console.log('PWA: Cache updated');\n        }\n      });\n\n    } catch (error) {\n      console.error('PWA: Service Worker registration failed', error);\n    }\n  }\n\n  // Online/Offline Detection\n  private setupOnlineDetection() {\n    const updateOnlineStatus = () => {\n      const wasOnline = this.isOnline;\n      this.isOnline = navigator.onLine;\n      \n      if (wasOnline !== this.isOnline) {\n        console.log(`PWA: Network status changed to ${this.isOnline ? 'online' : 'offline'}`);\n        this.notifyOnlineChange();\n      }\n    };\n\n    window.addEventListener('online', updateOnlineStatus);\n    window.addEventListener('offline', updateOnlineStatus);\n\n    // Check connection quality\n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection;\n      connection.addEventListener('change', () => {\n        console.log('PWA: Connection change detected', {\n          effectiveType: connection.effectiveType,\n          downlink: connection.downlink,\n          rtt: connection.rtt,\n        });\n      });\n    }\n  }\n\n  // Install Prompt Management\n  private setupInstallPrompt() {\n    window.addEventListener('beforeinstallprompt', (e: Event) => {\n      e.preventDefault();\n      this.installPromptEvent = e as BeforeInstallPromptEvent;\n      console.log('PWA: Install prompt available');\n    });\n\n    // Detect if app was successfully installed\n    window.addEventListener('appinstalled', () => {\n      console.log('PWA: App was successfully installed');\n      this.installPromptEvent = null;\n    });\n  }\n\n  // Update Detection\n  private setupUpdateDetection() {\n    // Check for updates every 10 minutes when online\n    setInterval(() => {\n      if (this.isOnline && this.registration) {\n        this.registration.update().catch(console.error);\n      }\n    }, 10 * 60 * 1000);\n  }\n\n  // Public API\n  \n  // Get install prompt object\n  getInstallPrompt(): PWAInstallPrompt {\n    return {\n      canInstall: !!this.installPromptEvent,\n      isInstalled: this.isAppInstalled(),\n      install: async () => {\n        if (!this.installPromptEvent) {\n          throw new Error('Install prompt not available');\n        }\n\n        await this.installPromptEvent.prompt();\n        const choiceResult = await this.installPromptEvent.userChoice;\n        \n        if (choiceResult.outcome === 'accepted') {\n          console.log('PWA: User accepted install prompt');\n        } else {\n          console.log('PWA: User dismissed install prompt');\n        }\n\n        this.installPromptEvent = null;\n      },\n    };\n  }\n\n  // Check if app is installed\n  private isAppInstalled(): boolean {\n    // Check if running in standalone mode (PWA installed)\n    return window.matchMedia('(display-mode: standalone)').matches ||\n           (window.navigator as any).standalone === true;\n  }\n\n  // Get online status\n  getOnlineStatus(): boolean {\n    return this.isOnline;\n  }\n\n  // Check if update is available\n  isUpdateAvailable(): boolean {\n    return this.updateAvailable;\n  }\n\n  // Apply update\n  async applyUpdate() {\n    if (!this.registration || !this.updateAvailable) {\n      return;\n    }\n\n    const installingWorker = this.registration.installing || this.registration.waiting;\n    if (installingWorker) {\n      installingWorker.postMessage({ action: 'SKIP_WAITING' });\n      window.location.reload();\n    }\n  }\n\n  // Get network information\n  getNetworkInfo(): {\n    online: boolean;\n    effectiveType?: string;\n    downlink?: number;\n    rtt?: number;\n  } {\n    const info = { online: this.isOnline };\n    \n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection;\n      return {\n        ...info,\n        effectiveType: connection.effectiveType,\n        downlink: connection.downlink,\n        rtt: connection.rtt,\n      };\n    }\n    \n    return info;\n  }\n\n  // Subscribe to online status changes\n  onOnlineChange(callback: (online: boolean) => void) {\n    this.onlineChangeCallbacks.push(callback);\n    return () => {\n      const index = this.onlineChangeCallbacks.indexOf(callback);\n      if (index > -1) {\n        this.onlineChangeCallbacks.splice(index, 1);\n      }\n    };\n  }\n\n  // Subscribe to update availability\n  onUpdateAvailable(callback: () => void) {\n    this.updateAvailableCallbacks.push(callback);\n    return () => {\n      const index = this.updateAvailableCallbacks.indexOf(callback);\n      if (index > -1) {\n        this.updateAvailableCallbacks.splice(index, 1);\n      }\n    };\n  }\n\n  // Cache management\n  async clearCache() {\n    if ('caches' in window) {\n      const cacheNames = await caches.keys();\n      await Promise.all(\n        cacheNames.map(cacheName => caches.delete(cacheName))\n      );\n      console.log('PWA: All caches cleared');\n    }\n  }\n\n  async getCacheSize(): Promise<number> {\n    if (!('caches' in window)) return 0;\n\n    let totalSize = 0;\n    const cacheNames = await caches.keys();\n    \n    for (const cacheName of cacheNames) {\n      const cache = await caches.open(cacheName);\n      const requests = await cache.keys();\n      \n      for (const request of requests) {\n        const response = await cache.match(request);\n        if (response) {\n          const blob = await response.blob();\n          totalSize += blob.size;\n        }\n      }\n    }\n    \n    return totalSize;\n  }\n\n  // Notification helpers\n  private notifyOnlineChange() {\n    this.onlineChangeCallbacks.forEach(callback => {\n      try {\n        callback(this.isOnline);\n      } catch (error) {\n        console.error('PWA: Error in online change callback', error);\n      }\n    });\n  }\n\n  private notifyUpdateAvailable() {\n    this.updateAvailableCallbacks.forEach(callback => {\n      try {\n        callback();\n      } catch (error) {\n        console.error('PWA: Error in update available callback', error);\n      }\n    });\n  }\n\n  // Check storage usage\n  async getStorageEstimate(): Promise<StorageEstimate | null> {\n    if ('storage' in navigator && 'estimate' in navigator.storage) {\n      return await navigator.storage.estimate();\n    }\n    return null;\n  }\n\n  // Persist storage permission\n  async requestPersistentStorage(): Promise<boolean> {\n    if ('storage' in navigator && 'persist' in navigator.storage) {\n      return await navigator.storage.persist();\n    }\n    return false;\n  }\n}\n\n// Create singleton instance\nexport const pwaService = new PWAService();\n\n// React hooks for PWA functionality\nexport function usePWA() {\n  const [installPrompt, setInstallPrompt] = React.useState(pwaService.getInstallPrompt());\n  const [isOnline, setIsOnline] = React.useState(pwaService.getOnlineStatus());\n  const [updateAvailable, setUpdateAvailable] = React.useState(pwaService.isUpdateAvailable());\n\n  React.useEffect(() => {\n    const unsubscribeOnline = pwaService.onOnlineChange(setIsOnline);\n    const unsubscribeUpdate = pwaService.onUpdateAvailable(() => setUpdateAvailable(true));\n\n    // Refresh install prompt periodically\n    const interval = setInterval(() => {\n      setInstallPrompt(pwaService.getInstallPrompt());\n    }, 1000);\n\n    return () => {\n      unsubscribeOnline();\n      unsubscribeUpdate();\n      clearInterval(interval);\n    };\n  }, []);\n\n  return {\n    installPrompt,\n    isOnline,\n    updateAvailable,\n    applyUpdate: () => pwaService.applyUpdate(),\n    networkInfo: pwaService.getNetworkInfo(),\n    clearCache: () => pwaService.clearCache(),\n    getCacheSize: () => pwaService.getCacheSize(),\n    getStorageEstimate: () => pwaService.getStorageEstimate(),\n    requestPersistentStorage: () => pwaService.requestPersistentStorage(),\n  };\n}\n\n// Import React for the hooks (this will be removed by the bundler if not used)\nimport React from 'react';","size_bytes":9642},"client/src/components/subscription-analytics.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line } from 'recharts';\nimport { TrendingUp, Target, AlertTriangle, DollarSign, PieChart as PieIcon, BarChart3, Settings, Globe } from 'lucide-react';\nimport { SubscriptionEntry, SUBSCRIPTION_CATEGORIES } from '@shared/schema';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface SubscriptionAnalyticsProps {\n  subscriptions: SubscriptionEntry[];\n  allSubscriptions?: SubscriptionEntry[];\n  searchQuery?: string;\n  categoryFilter?: string;\n  statusFilter?: string;\n}\n\n// Color palette for charts\nconst COLORS = [\n  '#6366f1', '#8b5cf6', '#a855f7', '#c084fc', '#d8b4fe',\n  '#ec4899', '#f43f5e', '#ef4444', '#f97316', '#f59e0b',\n  '#eab308', '#84cc16', '#22c55e', '#10b981', '#14b8a6',\n  '#06b6d4', '#0ea5e9', '#3b82f6', '#6366f1'\n];\n\ninterface BudgetSettings {\n  [category: string]: number;\n}\n\ninterface CurrencySettings {\n  baseCurrency: string;\n  exchangeRates: { [currency: string]: number };\n}\n\nconst DEFAULT_CURRENCY_SETTINGS: CurrencySettings = {\n  baseCurrency: 'USD',\n  exchangeRates: {\n    'USD': 1.0,\n    'EUR': 0.85,\n    'GBP': 0.73,\n    'CAD': 1.36,\n    'AUD': 1.52,\n    'JPY': 149.5,\n  }\n};\n\nexport function SubscriptionAnalytics({ \n  subscriptions, \n  allSubscriptions = [], \n  searchQuery = '', \n  categoryFilter = '', \n  statusFilter = '' \n}: SubscriptionAnalyticsProps) {\n  const { toast } = useToast();\n  const [showBudgetModal, setShowBudgetModal] = useState(false);\n  const [showCurrencyModal, setShowCurrencyModal] = useState(false);\n  const [budgetSettings, setBudgetSettings] = useState<BudgetSettings>(() => {\n    // Load from localStorage\n    const saved = localStorage.getItem('subscription-budgets');\n    return saved ? JSON.parse(saved) : {};\n  });\n  \n  const [currencySettings, setCurrencySettings] = useState<CurrencySettings>(() => {\n    const saved = localStorage.getItem('subscription-currency-settings');\n    return saved ? JSON.parse(saved) : DEFAULT_CURRENCY_SETTINGS;\n  });\n  \n  const [viewMode, setViewMode] = useState<'overview' | 'categories' | 'trends'>('overview');\n\n  // Currency conversion helper\n  const convertToBaseCurrency = (amount: number, fromCurrency: string): number => {\n    const fromRate = currencySettings.exchangeRates[fromCurrency] || 1;\n    const baseCurrencyRate = currencySettings.exchangeRates[currencySettings.baseCurrency] || 1;\n    // Convert from source currency to USD, then to base currency\n    return (amount / fromRate) * baseCurrencyRate;\n  };\n\n  // Calculate category spending breakdown\n  const categoryAnalytics = useMemo(() => {\n    const activeSubscriptions = subscriptions.filter(s => s.isActive);\n    const categoryData: { [key: string]: { monthly: number, yearly: number, count: number, subscriptions: SubscriptionEntry[] } } = {};\n    \n    // Initialize all categories with zero spending\n    SUBSCRIPTION_CATEGORIES.forEach(category => {\n      categoryData[category] = { monthly: 0, yearly: 0, count: 0, subscriptions: [] };\n    });\n    \n    activeSubscriptions.forEach(sub => {\n      const category = sub.category || 'Other';\n      let monthlyAmount = sub.cost;\n      \n      // Normalize to monthly spending\n      switch (sub.billingCycle) {\n        case 'yearly':\n          monthlyAmount /= 12;\n          break;\n        case 'weekly':\n          monthlyAmount *= 4.33;\n          break;\n        case 'daily':\n          monthlyAmount *= 30;\n          break;\n      }\n      \n      // Convert to base currency\n      const convertedMonthlyAmount = convertToBaseCurrency(monthlyAmount, sub.currency);\n      \n      categoryData[category].monthly += convertedMonthlyAmount;\n      categoryData[category].yearly += convertedMonthlyAmount * 12;\n      categoryData[category].count += 1;\n      categoryData[category].subscriptions.push(sub);\n    });\n    \n    return categoryData;\n  }, [subscriptions, currencySettings]);\n\n  // Prepare chart data\n  const pieChartData = useMemo(() => {\n    return Object.entries(categoryAnalytics)\n      .filter(([_, data]) => data.monthly > 0)\n      .map(([category, data]) => ({\n        name: category,\n        value: data.monthly,\n        count: data.count\n      }))\n      .sort((a, b) => b.value - a.value);\n  }, [categoryAnalytics]);\n\n  const barChartData = useMemo(() => {\n    return Object.entries(categoryAnalytics)\n      .filter(([_, data]) => data.monthly > 0)\n      .map(([category, data]) => ({\n        category: category.length > 10 ? category.slice(0, 10) + '...' : category,\n        monthly: data.monthly,\n        yearly: data.yearly,\n        budget: budgetSettings[category] || 0,\n        over: budgetSettings[category] ? Math.max(0, data.monthly - budgetSettings[category]) : 0\n      }))\n      .sort((a, b) => b.monthly - a.monthly);\n  }, [categoryAnalytics, budgetSettings]);\n\n  // Calculate total spending\n  const totalSpending = useMemo(() => {\n    const monthly = Object.values(categoryAnalytics).reduce((sum, data) => sum + data.monthly, 0);\n    return {\n      monthly,\n      yearly: monthly * 12,\n      totalBudget: Object.values(budgetSettings).reduce((sum, budget) => sum + budget, 0)\n    };\n  }, [categoryAnalytics, budgetSettings]);\n\n  // Budget alerts\n  const budgetAlerts = useMemo(() => {\n    const alerts: { category: string, spending: number, budget: number, percentage: number }[] = [];\n    \n    Object.entries(categoryAnalytics).forEach(([category, data]) => {\n      const budget = budgetSettings[category];\n      if (budget && budget > 0 && data.monthly > 0) {\n        const percentage = (data.monthly / budget) * 100;\n        if (percentage >= 80) { // Alert at 80% or over budget\n          alerts.push({\n            category,\n            spending: data.monthly,\n            budget,\n            percentage\n          });\n        }\n      }\n    });\n    \n    return alerts.sort((a, b) => b.percentage - a.percentage);\n  }, [categoryAnalytics, budgetSettings]);\n\n  const formatCurrency = (amount: number, currency?: string) => {\n    const targetCurrency = currency || currencySettings.baseCurrency;\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: targetCurrency,\n    }).format(amount);\n  };\n\n  const saveBudgetSettings = (newBudgets: BudgetSettings) => {\n    setBudgetSettings(newBudgets);\n    localStorage.setItem('subscription-budgets', JSON.stringify(newBudgets));\n    toast({\n      title: \"Budget Settings Saved\",\n      description: \"Your budget limits have been updated successfully.\",\n    });\n  };\n\n  const saveCurrencySettings = (newSettings: CurrencySettings) => {\n    setCurrencySettings(newSettings);\n    localStorage.setItem('subscription-currency-settings', JSON.stringify(newSettings));\n    toast({\n      title: \"Currency Settings Saved\",\n      description: \"Your currency preferences have been updated successfully.\",\n    });\n  };\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-background border border-border rounded-lg p-3 shadow-lg\">\n          <p className=\"font-medium\">{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} style={{ color: entry.color }}>\n              {`${entry.dataKey === 'monthly' ? 'Monthly' : 'Budget'}: ${formatCurrency(entry.value)}`}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with View Mode Selector */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-xl font-semibold flex items-center gap-2\">\n            <TrendingUp className=\"w-5 h-5\" />\n            Spending Analytics\n          </h2>\n          <p className=\"text-muted-foreground text-sm\">\n            Detailed insights into your subscription spending patterns\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <Select value={viewMode} onValueChange={(value: any) => setViewMode(value)}>\n            <SelectTrigger className=\"w-32\" data-testid=\"analytics-view-mode\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"overview\">Overview</SelectItem>\n              <SelectItem value=\"categories\">Categories</SelectItem>\n              <SelectItem value=\"trends\">Trends</SelectItem>\n            </SelectContent>\n          </Select>\n          \n          <div className=\"flex gap-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              data-testid=\"currency-settings-button\"\n              onClick={() => toast({\n                title: \"Currency Settings\",\n                description: `Current base currency: ${currencySettings.baseCurrency}. Advanced currency management coming soon!`\n              })}\n            >\n              <Globe className=\"w-4 h-4 mr-2\" />\n              Currency ({currencySettings.baseCurrency})\n            </Button>\n            \n            <Dialog open={showBudgetModal} onOpenChange={setShowBudgetModal}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"budget-settings-button\">\n                  <Settings className=\"w-4 h-4 mr-2\" />\n                  Budgets\n                </Button>\n              </DialogTrigger>\n              <BudgetSettingsModal \n                budgetSettings={budgetSettings} \n                onSave={saveBudgetSettings} \n                categoryAnalytics={categoryAnalytics}\n              />\n            </Dialog>\n          </div>\n        </div>\n      </div>\n\n      {/* Budget Alerts */}\n      {budgetAlerts.length > 0 && (\n        <Card className=\"border-amber-200 bg-amber-50 dark:bg-amber-950\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-amber-800 dark:text-amber-200 flex items-center gap-2 text-sm\">\n              <AlertTriangle className=\"w-4 h-4\" />\n              Budget Alerts\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"pt-0\">\n            <div className=\"space-y-2\">\n              {budgetAlerts.map(alert => (\n                <div key={alert.category} className=\"flex justify-between items-center text-sm\">\n                  <span className=\"font-medium text-amber-800 dark:text-amber-200\">\n                    {alert.category}\n                  </span>\n                  <div className=\"text-right\">\n                    <span className={alert.percentage >= 100 ? 'text-red-600 font-medium' : 'text-amber-700 dark:text-amber-300'}>\n                      {formatCurrency(alert.spending)} / {formatCurrency(alert.budget)}\n                    </span>\n                    <span className=\"ml-2 text-xs text-amber-600 dark:text-amber-400\">\n                      ({Math.round(alert.percentage)}%)\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Overview Mode */}\n      {viewMode === 'overview' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Spending Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <DollarSign className=\"w-5 h-5\" />\n                Total Spending\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Monthly</span>\n                  <span className=\"text-2xl font-bold\" data-testid=\"total-monthly-spending\">\n                    {formatCurrency(totalSpending.monthly)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-muted-foreground\">Yearly</span>\n                  <span className=\"text-xl font-semibold text-muted-foreground\">\n                    {formatCurrency(totalSpending.yearly)}\n                  </span>\n                </div>\n                {totalSpending.totalBudget > 0 && (\n                  <div className=\"pt-2 border-t\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-muted-foreground\">Budget Usage</span>\n                      <span className={`font-medium ${\n                        totalSpending.monthly > totalSpending.totalBudget \n                          ? 'text-red-600' \n                          : 'text-green-600'\n                      }`}>\n                        {Math.round((totalSpending.monthly / totalSpending.totalBudget) * 100)}%\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2 mt-2\">\n                      <div \n                        className={`h-2 rounded-full ${\n                          totalSpending.monthly > totalSpending.totalBudget \n                            ? 'bg-red-500' \n                            : 'bg-green-500'\n                        }`}\n                        style={{ \n                          width: `${Math.min(100, (totalSpending.monthly / totalSpending.totalBudget) * 100)}%` \n                        }}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Category Pie Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <PieIcon className=\"w-5 h-5\" />\n                Spending by Category\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {pieChartData.length > 0 ? (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={pieChartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                    >\n                      {pieChartData.map((_, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip formatter={(value) => formatCurrency(Number(value))} />\n                  </PieChart>\n                </ResponsiveContainer>\n              ) : (\n                <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                  No active subscriptions to analyze\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Categories Mode */}\n      {viewMode === 'categories' && (\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Category Breakdown\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {barChartData.length > 0 ? (\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <BarChart data={barChartData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"category\" />\n                    <YAxis tickFormatter={(value) => formatCurrency(value)} />\n                    <Tooltip content={<CustomTooltip />} />\n                    <Bar dataKey=\"monthly\" name=\"Monthly Spending\" fill=\"#6366f1\" />\n                    <Bar dataKey=\"budget\" name=\"Budget\" fill=\"#e5e7eb\" opacity={0.6} />\n                  </BarChart>\n                </ResponsiveContainer>\n              ) : (\n                <div className=\"h-96 flex items-center justify-center text-muted-foreground\">\n                  No spending data available\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Category Details */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {Object.entries(categoryAnalytics)\n              .filter(([_, data]) => data.monthly > 0)\n              .sort(([, a], [, b]) => b.monthly - a.monthly)\n              .map(([category, data]) => {\n                const budget = budgetSettings[category] || 0;\n                const budgetUsage = budget > 0 ? (data.monthly / budget) * 100 : 0;\n                \n                return (\n                  <Card key={category} className=\"relative\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-sm font-medium\">{category}</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-xs text-muted-foreground\">Monthly</span>\n                          <span className=\"font-semibold\" data-testid={`category-${category}-monthly`}>\n                            {formatCurrency(data.monthly)}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-xs text-muted-foreground\">Subscriptions</span>\n                          <span className=\"text-sm\">{data.count}</span>\n                        </div>\n                        {budget > 0 && (\n                          <div className=\"pt-2 border-t\">\n                            <div className=\"flex justify-between items-center mb-1\">\n                              <span className=\"text-xs text-muted-foreground\">Budget</span>\n                              <span className={`text-xs ${budgetUsage >= 100 ? 'text-red-600' : budgetUsage >= 80 ? 'text-amber-600' : 'text-green-600'}`}>\n                                {Math.round(budgetUsage)}%\n                              </span>\n                            </div>\n                            <div className=\"w-full bg-muted rounded-full h-1.5\">\n                              <div \n                                className={`h-1.5 rounded-full ${\n                                  budgetUsage >= 100 ? 'bg-red-500' : budgetUsage >= 80 ? 'bg-amber-500' : 'bg-green-500'\n                                }`}\n                                style={{ width: `${Math.min(100, budgetUsage)}%` }}\n                              />\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n          </div>\n        </div>\n      )}\n\n      {/* Trends Mode */}\n      {viewMode === 'trends' && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Spending Trends</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n              <div className=\"text-center\">\n                <TrendingUp className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                <p>Trend analysis coming soon!</p>\n                <p className=\"text-sm\">We're working on historical spending trends.</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n\ntype BudgetSettingsModalProps = {\n  budgetSettings: BudgetSettings;\n  onSave: (budgets: BudgetSettings) => void;\n  categoryAnalytics: Record<string, { monthly: number; yearly: number; count: number; subscriptions: SubscriptionEntry[] }>;\n};\n\nfunction BudgetSettingsModal(props: BudgetSettingsModalProps) {\n  const { budgetSettings, onSave, categoryAnalytics } = props;\n  const [localBudgets, setLocalBudgets] = useState<BudgetSettings>(budgetSettings);\n\n  const handleSave = () => {\n    onSave(localBudgets);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  return (\n    <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n      <DialogHeader>\n        <DialogTitle className=\"flex items-center gap-2\">\n          <Target className=\"w-5 h-5\" />\n          Budget Settings\n        </DialogTitle>\n      </DialogHeader>\n      \n      <div className=\"space-y-4 py-4\">\n        <p className=\"text-sm text-muted-foreground\">\n          Set monthly budget limits for each category to track your spending goals.\n        </p>\n        \n        <div className=\"space-y-4\">\n          {SUBSCRIPTION_CATEGORIES.map(category => {\n            const currentSpending = categoryAnalytics[category]?.monthly || 0;\n            const hasSpending = currentSpending > 0;\n            \n            return (\n              <div key={category} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                <div className=\"flex-1\">\n                  <Label className=\"text-sm font-medium\">{category}</Label>\n                  {hasSpending && (\n                    <p className=\"text-xs text-muted-foreground\">\n                      Current: {formatCurrency(currentSpending)}\n                    </p>\n                  )}\n                </div>\n                <div className=\"w-32\">\n                  <Input\n                    type=\"number\"\n                    placeholder=\"0.00\"\n                    value={localBudgets[category] || ''}\n                    onChange={(e) => setLocalBudgets(prev => ({\n                      ...prev,\n                      [category]: parseFloat(e.target.value) || 0\n                    }))}\n                    className=\"text-right\"\n                    data-testid={`budget-input-${category}`}\n                  />\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        \n        <div className=\"flex justify-end gap-2 pt-4\">\n          <Button\n            variant=\"outline\" \n            onClick={() => setLocalBudgets({})}\n            data-testid=\"clear-budgets-button\"\n          >\n            Clear All\n          </Button>\n          <Button onClick={handleSave} data-testid=\"save-budgets-button\">\n            Save Budgets\n          </Button>\n        </div>\n      </div>\n    </DialogContent>\n  );\n}","size_bytes":23030},"ARCHITECTURE.md":{"content":"# SecureVault Offline - Architecture Guide\n\nThis document provides a comprehensive overview of SecureVault's technical architecture, design patterns, and implementation details for developers who want to understand or contribute to the codebase.\n\n## 📋 Table of Contents\n\n- [System Overview](#system-overview)\n- [Architecture Principles](#architecture-principles)\n- [Frontend Architecture](#frontend-architecture)\n- [Backend Architecture](#backend-architecture)\n- [Data Layer](#data-layer)\n- [Security Architecture](#security-architecture)\n- [State Management](#state-management)\n- [Component Architecture](#component-architecture)\n- [Build System](#build-system)\n- [Testing Architecture](#testing-architecture)\n- [Performance Considerations](#performance-considerations)\n- [Deployment Architecture](#deployment-architecture)\n\n## System Overview\n\nSecureVault Offline is built as a **client-side focused application** with an offline-first architecture. The system prioritizes user privacy by implementing zero-knowledge architecture where all sensitive data is encrypted locally and never transmitted to servers in plaintext.\n\n### High-Level Architecture\n\n```\n┌─────────────────────────────────────────────────────────────────┐\n│                        Browser Environment                        │\n├─────────────────────────────────────────────────────────────────┤\n│  React Frontend (TypeScript)                                     │\n│  ├── UI Components (shadcn/ui + Radix UI)                       │\n│  ├── State Management (React Context + TanStack Query)          │\n│  ├── Routing (Wouter)                                           │\n│  └── PWA Features (Service Worker + Manifest)                   │\n├─────────────────────────────────────────────────────────────────┤\n│  Client-Side Security Layer                                      │\n│  ├── Web Crypto API (AES-256-GCM)                              │\n│  ├── Key Derivation (PBKDF2)                                   │\n│  └── IndexedDB Encrypted Storage                               │\n├─────────────────────────────────────────────────────────────────┤\n│  Optional Express Backend (Minimal)                              │\n│  ├── Session Management                                         │\n│  ├── User Accounts (PostgreSQL)                                │\n│  └── API Endpoints                                             │\n└─────────────────────────────────────────────────────────────────┘\n```\n\n## Architecture Principles\n\n### 1. Privacy by Design\n- **Zero-Knowledge**: Server never sees user data in plaintext\n- **Client-Side Encryption**: All sensitive data encrypted before storage\n- **Local-First**: Primary data storage is browser IndexedDB\n- **No Telemetry**: No user tracking or analytics collection\n\n### 2. Offline-First\n- **IndexedDB Storage**: All data available offline\n- **Service Worker**: Background sync and caching\n- **Progressive Enhancement**: Works without network connectivity\n- **Sync Strategies**: Manual export/import for cross-device sync\n\n### 3. Security-First\n- **Modern Cryptography**: Web Crypto API with AES-256-GCM\n- **Key Derivation**: PBKDF2 with high iteration counts\n- **Memory Safety**: Secure key handling and cleanup\n- **Attack Surface Minimization**: Minimal server dependencies\n\n### 4. Developer Experience\n- **TypeScript**: Full type safety across the stack\n- **Modern Tooling**: Vite, ESBuild, Tailwind CSS\n- **Component Library**: Consistent UI with shadcn/ui\n- **Testing**: Comprehensive test coverage with modern tools\n\n## Frontend Architecture\n\n### Technology Stack\n\n```typescript\n// Core Framework\nReact 18              // Component framework with Concurrent Features\nTypeScript 5.x        // Type safety and developer experience\nVite                  // Build tool and development server\n\n// UI Framework  \nshadcn/ui             // Component library\nRadix UI              // Accessible primitives\nTailwind CSS          // Utility-first styling\nLucide React          // Icon library\n\n// State Management\nReact Context API     // Application state management\nTanStack Query        // Server state and caching\nReact Hook Form       // Form state management\n\n// Routing & Navigation\nWouter               // Lightweight routing library\n\n// Data & Validation\nZod                  // Runtime type validation\ndate-fns             // Date manipulation utilities\n```\n\n### Component Architecture\n\nSecureVault follows a hierarchical component structure:\n\n```\nsrc/\n├── components/          # Reusable UI components\n│   ├── ui/             # shadcn/ui components\n│   ├── forms/          # Form-specific components  \n│   ├── modals/         # Modal dialogs\n│   └── charts/         # Data visualization components\n├── pages/              # Route-level page components\n├── contexts/           # React Context providers\n├── hooks/              # Custom React hooks\n├── lib/               # Utility libraries\n└── types/             # TypeScript type definitions\n```\n\n### State Management Pattern\n\n```typescript\n// Global Application State\ninterface AppState {\n  auth: AuthState;        // Authentication status\n  vault: VaultState;      // Encrypted data management\n  ui: UIState;           // UI preferences and state\n  offline: OfflineState; // PWA and offline status\n}\n\n// Context Provider Pattern\nconst VaultProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [passwords, setPasswords] = useState<PasswordEntry[]>([]);\n  const [subscriptions, setSubscriptions] = useState<SubscriptionEntry[]>([]);\n  const [notes, setNotes] = useState<NoteEntry[]>([]);\n  const [expenses, setExpenses] = useState<ExpenseEntry[]>([]);\n  \n  // CRUD operations with encryption\n  const addPassword = async (password: Omit<PasswordEntry, 'id'>) => {\n    const encrypted = await encryptData(password, masterKey);\n    await vaultStorage.savePassword(encrypted);\n    setPasswords(prev => [...prev, password]);\n  };\n\n  return (\n    <VaultContext.Provider value={{ passwords, addPassword, /* ... */ }}>\n      {children}\n    </VaultContext.Provider>\n  );\n};\n```\n\n### Component Design Patterns\n\n#### 1. Compound Components\n```typescript\n// Modal with compound pattern\nexport const Modal = {\n  Root: ModalRoot,\n  Trigger: ModalTrigger,\n  Content: ModalContent,\n  Header: ModalHeader,\n  Body: ModalBody,\n  Footer: ModalFooter,\n};\n\n// Usage\n<Modal.Root>\n  <Modal.Trigger>Open Settings</Modal.Trigger>\n  <Modal.Content>\n    <Modal.Header>Settings</Modal.Header>\n    <Modal.Body>\n      {/* Content */}\n    </Modal.Body>\n  </Modal.Content>\n</Modal.Root>\n```\n\n#### 2. Render Props / Custom Hooks\n```typescript\n// Custom hook for data fetching with encryption\nconst useEncryptedData = <T>(storageKey: string) => {\n  const [data, setData] = useState<T[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const { masterKey } = useAuth();\n\n  const refetch = useCallback(async () => {\n    setIsLoading(true);\n    const encrypted = await vaultStorage.getData(storageKey);\n    const decrypted = await Promise.all(\n      encrypted.map(item => decryptData(item, masterKey))\n    );\n    setData(decrypted);\n    setIsLoading(false);\n  }, [storageKey, masterKey]);\n\n  useEffect(() => {\n    if (masterKey) {\n      refetch();\n    }\n  }, [refetch, masterKey]);\n\n  return { data, isLoading, refetch };\n};\n```\n\n## Backend Architecture\n\n### Minimal Express Server\n\nThe backend is intentionally minimal to maintain the privacy-focused architecture:\n\n```typescript\n// server/index.ts - Main server file\nconst app = express();\n\n// Middleware stack\napp.use(express.json({ limit: '10mb' }));\napp.use(session({\n  secret: process.env.SESSION_SECRET,\n  store: new PGStore(/* config */),\n  resave: false,\n  saveUninitialized: false\n}));\n\n// API Routes (minimal)\napp.use('/api/auth', authRoutes);     // User authentication\napp.use('/api/user', userRoutes);     // User preferences\napp.use('/api/export', exportRoutes); // Data export helpers\n\n// Static file serving\napp.use(express.static('dist'));\n\n// SPA fallback\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, 'dist', 'index.html'));\n});\n```\n\n### API Design Principles\n\n1. **Stateless**: Each request contains all necessary information\n2. **RESTful**: Standard HTTP methods and status codes\n3. **Minimal Data**: Only transmit encrypted or non-sensitive data\n4. **Versioned**: API versioning for future compatibility\n\n### Database Schema (Optional PostgreSQL)\n\n```typescript\n// shared/schema.ts - Database schema definitions\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(), // Never store plaintext\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  lastLoginAt: timestamp(\"last_login_at\"),\n  preferences: jsonb(\"preferences\"), // User preferences only\n});\n\n// Vault metadata (encrypted)\nexport const vaultMetadata = pgTable(\"vault_metadata\", {\n  id: varchar(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  encryptedData: text(\"encrypted_data\").notNull(), // All sensitive data encrypted\n  lastModified: timestamp(\"last_modified\").defaultNow(),\n});\n```\n\n## Data Layer\n\n### Client-Side Storage Architecture\n\n```typescript\n// lib/storage.ts - Storage abstraction layer\ninterface VaultStorage {\n  // Encrypted storage operations\n  savePassword(password: PasswordEntry): Promise<void>;\n  saveSubscription(subscription: SubscriptionEntry): Promise<void>;\n  saveNote(note: NoteEntry): Promise<void>;\n  saveExpense(expense: ExpenseEntry): Promise<void>;\n  \n  // Retrieval operations\n  getAllPasswords(): Promise<PasswordEntry[]>;\n  getAllSubscriptions(): Promise<SubscriptionEntry[]>;\n  getAllNotes(): Promise<NoteEntry[]>;\n  getAllExpenses(): Promise<ExpenseEntry[]>;\n  \n  // Bulk operations\n  exportVault(): Promise<EncryptedVaultData>;\n  importVault(data: EncryptedVaultData): Promise<void>;\n  \n  // Metadata operations\n  getVaultMetadata(): Promise<VaultMetadata>;\n  updateVaultMetadata(metadata: Partial<VaultMetadata>): Promise<void>;\n}\n\n// IndexedDB implementation\nclass IndexedDBVaultStorage implements VaultStorage {\n  private db: IDBDatabase;\n  private cryptoService: CryptoService;\n\n  async savePassword(password: PasswordEntry): Promise<void> {\n    const encrypted = await this.cryptoService.encrypt(\n      JSON.stringify(password),\n      this.masterKey\n    );\n    \n    const transaction = this.db.transaction(['passwords'], 'readwrite');\n    const store = transaction.objectStore('passwords');\n    await store.put({ id: password.id, data: encrypted });\n  }\n}\n```\n\n### Data Flow Architecture\n\n```\nUser Action → Component Event → Context Provider → Storage Layer → IndexedDB\n                                      ↓\nUser Interface ← Component Update ← State Update ← Decrypted Data ← IndexedDB\n```\n\n### Encryption Strategy\n\n```typescript\n// lib/crypto.ts - Cryptographic operations\nclass CryptoService {\n  // Key derivation from master password\n  async deriveKey(password: string, salt: Uint8Array): Promise<CryptoKey> {\n    const baseKey = await crypto.subtle.importKey(\n      'raw',\n      new TextEncoder().encode(password),\n      'PBKDF2',\n      false,\n      ['deriveBits', 'deriveKey']\n    );\n\n    return crypto.subtle.deriveKey(\n      {\n        name: 'PBKDF2',\n        salt: salt,\n        iterations: 100000,\n        hash: 'SHA-256'\n      },\n      baseKey,\n      { name: 'AES-GCM', length: 256 },\n      false,\n      ['encrypt', 'decrypt']\n    );\n  }\n\n  // Encryption with AES-GCM\n  async encrypt(data: string, key: CryptoKey): Promise<EncryptedData> {\n    const iv = crypto.getRandomValues(new Uint8Array(12));\n    const encoded = new TextEncoder().encode(data);\n    \n    const encrypted = await crypto.subtle.encrypt(\n      { name: 'AES-GCM', iv: iv },\n      key,\n      encoded\n    );\n\n    return {\n      data: new Uint8Array(encrypted),\n      iv: iv,\n      algorithm: 'AES-GCM'\n    };\n  }\n}\n```\n\n## Security Architecture\n\n### Threat Model\n\nSecureVault's security design addresses these threats:\n\n1. **Data Breach**: Server compromise cannot expose user data\n2. **Man-in-the-Middle**: Client-side encryption prevents data exposure\n3. **Browser Vulnerabilities**: Minimal attack surface with secure APIs\n4. **Physical Access**: Auto-lock and secure key handling\n5. **Social Engineering**: No customer support access to user data\n\n### Security Layers\n\n```\n┌─────────────────────────────────────┐\n│          Application Layer           │ ← Input validation, XSS prevention\n├─────────────────────────────────────┤\n│         Encryption Layer            │ ← AES-256-GCM, PBKDF2 key derivation\n├─────────────────────────────────────┤\n│          Storage Layer              │ ← IndexedDB with encrypted data only\n├─────────────────────────────────────┤\n│          Browser Layer              │ ← Content Security Policy, HTTPS\n├─────────────────────────────────────┤\n│          Network Layer              │ ← TLS 1.3, certificate pinning\n└─────────────────────────────────────┘\n```\n\n### Key Management\n\n```typescript\n// Secure key lifecycle management\nclass KeyManager {\n  private masterKey: CryptoKey | null = null;\n  private autoLockTimer: number | null = null;\n\n  async unlock(password: string): Promise<boolean> {\n    try {\n      const metadata = await this.getVaultMetadata();\n      this.masterKey = await this.deriveKey(password, metadata.salt);\n      \n      // Verify key correctness\n      await this.verifyKey();\n      \n      // Set auto-lock timer\n      this.setAutoLockTimer();\n      \n      return true;\n    } catch (error) {\n      this.lock(); // Clear any partial state\n      return false;\n    }\n  }\n\n  lock(): void {\n    // Secure key cleanup\n    this.masterKey = null;\n    \n    // Clear timers\n    if (this.autoLockTimer) {\n      clearTimeout(this.autoLockTimer);\n      this.autoLockTimer = null;\n    }\n    \n    // Clear sensitive UI state\n    this.clearSensitiveState();\n  }\n\n  private setAutoLockTimer(): void {\n    const timeout = 15 * 60 * 1000; // 15 minutes\n    this.autoLockTimer = setTimeout(() => this.lock(), timeout);\n  }\n}\n```\n\n## State Management\n\n### Context Architecture\n\n```typescript\n// Multi-layer context structure\nconst AppProviders: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <QueryClientProvider client={queryClient}>\n    <ThemeProvider>\n      <AuthProvider>\n        <VaultProvider>\n          <UIProvider>\n            <OfflineProvider>\n              {children}\n            </OfflineProvider>\n          </UIProvider>\n        </VaultProvider>\n      </AuthProvider>\n    </ThemeProvider>\n  </QueryClientProvider>\n);\n\n// Context composition with custom hooks\nexport const useSecureVault = () => {\n  const auth = useAuth();\n  const vault = useVault();\n  const ui = useUI();\n  \n  return {\n    ...auth,\n    ...vault,\n    ...ui,\n    isReady: auth.isUnlocked && vault.isLoaded\n  };\n};\n```\n\n### Data Synchronization\n\n```typescript\n// Optimistic updates with rollback\nconst useOptimisticMutation = <T>(\n  mutationFn: (data: T) => Promise<void>,\n  queryKey: string[]\n) => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn,\n    onMutate: async (newData) => {\n      // Cancel outgoing refetches\n      await queryClient.cancelQueries({ queryKey });\n      \n      // Snapshot previous value\n      const previousData = queryClient.getQueryData(queryKey);\n      \n      // Optimistically update\n      queryClient.setQueryData(queryKey, (old: T[]) => [...old, newData]);\n      \n      return { previousData };\n    },\n    onError: (err, newData, context) => {\n      // Rollback on error\n      queryClient.setQueryData(queryKey, context?.previousData);\n    },\n    onSettled: () => {\n      // Always refetch after error or success\n      queryClient.invalidateQueries({ queryKey });\n    }\n  });\n};\n```\n\n## Component Architecture\n\n### Design System Structure\n\n```typescript\n// Component hierarchy and patterns\nsrc/components/\n├── ui/                    # Base UI components (shadcn/ui)\n│   ├── button.tsx\n│   ├── input.tsx\n│   ├── modal.tsx\n│   └── ...\n├── forms/                 # Form-specific components\n│   ├── PasswordForm/\n│   ├── SubscriptionForm/\n│   └── FormField/\n├── layout/               # Layout components\n│   ├── Header/\n│   ├── Sidebar/\n│   └── MainLayout/\n├── features/             # Feature-specific components\n│   ├── PasswordManager/\n│   ├── SubscriptionTracker/\n│   ├── NotesEditor/\n│   └── ExpenseTracker/\n└── charts/               # Data visualization\n    ├── PieChart/\n    ├── BarChart/\n    └── AnalyticsDashboard/\n```\n\n### Component Patterns\n\n#### Higher-Order Components (HOCs)\n```typescript\n// Security wrapper HOC\nconst withVaultAccess = <P extends object>(\n  Component: React.ComponentType<P>\n) => {\n  return (props: P) => {\n    const { isUnlocked } = useAuth();\n    \n    if (!isUnlocked) {\n      return <AccessDenied />;\n    }\n    \n    return <Component {...props} />;\n  };\n};\n\n// Usage\nexport default withVaultAccess(PasswordManager);\n```\n\n#### Render Props Pattern\n```typescript\n// Encryption status render prop\nconst EncryptionStatus: React.FC<{\n  children: (status: EncryptionState) => React.ReactNode;\n}> = ({ children }) => {\n  const [status, setStatus] = useState<EncryptionState>('idle');\n  \n  useEffect(() => {\n    // Monitor encryption status\n  }, []);\n  \n  return <>{children(status)}</>;\n};\n\n// Usage\n<EncryptionStatus>\n  {(status) => (\n    <div className={`status-${status}`}>\n      Encryption: {status}\n    </div>\n  )}\n</EncryptionStatus>\n```\n\n## Build System\n\n### Development Build Pipeline\n\n```typescript\n// vite.config.ts - Development configuration\nexport default defineConfig({\n  plugins: [\n    react(),\n    // Replit-specific plugins\n    replitDevBanner(),\n    replitCartographer(),\n    replitRuntimeErrorModal(),\n  ],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './client/src'),\n      '@shared': path.resolve(__dirname, './shared'),\n      '@assets': path.resolve(__dirname, './attached_assets'),\n    },\n  },\n  server: {\n    host: '0.0.0.0',\n    port: 5000,\n    hmr: true,\n  },\n  build: {\n    outDir: 'dist',\n    rollupOptions: {\n      input: {\n        main: path.resolve(__dirname, 'client/index.html'),\n      },\n    },\n  },\n});\n```\n\n### Production Build Optimization\n\n```typescript\n// Production build configuration\nconst productionConfig = {\n  // Code splitting strategies\n  build: {\n    rollupOptions: {\n      output: {\n        manualChunks: {\n          // Vendor chunks\n          'vendor-react': ['react', 'react-dom'],\n          'vendor-ui': ['@radix-ui/react-dialog', '@radix-ui/react-select'],\n          'vendor-crypto': ['crypto-js'],\n          \n          // Feature chunks\n          'feature-passwords': ['./src/pages/passwords'],\n          'feature-subscriptions': ['./src/pages/subscriptions'],\n          'feature-notes': ['./src/pages/notes'],\n          'feature-expenses': ['./src/pages/expenses'],\n        },\n      },\n    },\n  },\n  \n  // Bundle analysis and optimization\n  plugins: [\n    bundleAnalyzer({\n      analyzerMode: 'static',\n      openAnalyzer: false,\n    }),\n  ],\n};\n```\n\n## Testing Architecture\n\n### Testing Strategy\n\n```typescript\n// Testing pyramid approach\ntests/\n├── unit/              # Component and function tests\n├── integration/       # Feature integration tests  \n├── e2e/              # End-to-end user workflows\n└── security/         # Cryptographic and security tests\n\n// Test configuration\n// vitest.config.ts\nexport default defineConfig({\n  test: {\n    environment: 'jsdom',\n    setupFiles: ['./tests/setup.ts'],\n    coverage: {\n      reporter: ['text', 'lcov', 'html'],\n      thresholds: {\n        global: {\n          branches: 80,\n          functions: 80,\n          lines: 80,\n          statements: 80,\n        },\n      },\n    },\n  },\n});\n```\n\n### Security Testing\n\n```typescript\n// Cryptographic operation tests\ndescribe('CryptoService', () => {\n  describe('encryption/decryption', () => {\n    it('should encrypt and decrypt data correctly', async () => {\n      const service = new CryptoService();\n      const testData = 'sensitive information';\n      const password = 'secure-password';\n      \n      const encrypted = await service.encrypt(testData, password);\n      expect(encrypted.data).not.toEqual(testData);\n      expect(encrypted.iv).toHaveLength(12); // GCM IV length\n      \n      const decrypted = await service.decrypt(encrypted, password);\n      expect(decrypted).toEqual(testData);\n    });\n\n    it('should fail with wrong password', async () => {\n      const service = new CryptoService();\n      const encrypted = await service.encrypt('test', 'password1');\n      \n      await expect(\n        service.decrypt(encrypted, 'password2')\n      ).rejects.toThrow('Decryption failed');\n    });\n  });\n});\n```\n\n## Performance Considerations\n\n### Client-Side Optimization\n\n1. **Code Splitting**: Route-based and feature-based splitting\n2. **Lazy Loading**: Components loaded on demand\n3. **Memoization**: React.memo and useMemo for expensive operations\n4. **Virtual Scrolling**: For large lists of passwords/subscriptions\n5. **IndexedDB Optimization**: Batched operations and indexing\n\n### Memory Management\n\n```typescript\n// Secure memory cleanup\nclass SecureMemoryManager {\n  private sensitiveData: Map<string, any> = new Map();\n  \n  store(key: string, data: any): void {\n    this.sensitiveData.set(key, data);\n  }\n  \n  retrieve(key: string): any {\n    return this.sensitiveData.get(key);\n  }\n  \n  clear(): void {\n    // Secure cleanup of sensitive data\n    for (const [key, value] of this.sensitiveData) {\n      if (typeof value === 'string') {\n        // Overwrite string data\n        for (let i = 0; i < value.length; i++) {\n          value[i] = '\\0';\n        }\n      }\n      \n      this.sensitiveData.delete(key);\n    }\n  }\n}\n```\n\n### Database Performance\n\n```typescript\n// IndexedDB optimization strategies\nclass OptimizedStorage {\n  // Batch operations for better performance\n  async saveBatch<T>(storeName: string, items: T[]): Promise<void> {\n    const transaction = this.db.transaction([storeName], 'readwrite');\n    const store = transaction.objectStore(storeName);\n    \n    // Process in chunks to avoid blocking\n    const chunkSize = 100;\n    for (let i = 0; i < items.length; i += chunkSize) {\n      const chunk = items.slice(i, i + chunkSize);\n      await Promise.all(chunk.map(item => store.put(item)));\n    }\n  }\n  \n  // Indexed queries for better performance\n  async queryByCategory(category: string): Promise<PasswordEntry[]> {\n    const transaction = this.db.transaction(['passwords'], 'readonly');\n    const store = transaction.objectStore('passwords');\n    const index = store.index('category');\n    \n    return new Promise((resolve, reject) => {\n      const results: PasswordEntry[] = [];\n      const request = index.openCursor(IDBKeyRange.only(category));\n      \n      request.onsuccess = (event) => {\n        const cursor = (event.target as IDBRequest).result;\n        if (cursor) {\n          results.push(cursor.value);\n          cursor.continue();\n        } else {\n          resolve(results);\n        }\n      };\n      \n      request.onerror = () => reject(request.error);\n    });\n  }\n}\n```\n\n## Deployment Architecture\n\n### Production Environment\n\n```yaml\n# docker-compose.yml for production deployment\nversion: '3.8'\n\nservices:\n  securevault:\n    build: \n      context: .\n      dockerfile: Dockerfile.production\n    ports:\n      - \"443:5000\"\n    environment:\n      - NODE_ENV=production\n      - SESSION_SECRET=${SESSION_SECRET}\n      - DATABASE_URL=${DATABASE_URL}\n    volumes:\n      - ./ssl:/app/ssl:ro\n      - ./logs:/app/logs\n    restart: unless-stopped\n    \n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./ssl:/etc/nginx/ssl:ro\n    depends_on:\n      - securevault\n    restart: unless-stopped\n      \n  postgres:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: ${DB_NAME}\n      POSTGRES_USER: ${DB_USER}\n      POSTGRES_PASSWORD: ${DB_PASSWORD}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./backups:/backups\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n```\n\n### Security Headers Configuration\n\n```typescript\n// Security middleware for production\nconst securityMiddleware = (app: Express) => {\n  // Content Security Policy\n  app.use((req, res, next) => {\n    res.setHeader('Content-Security-Policy', [\n      \"default-src 'self'\",\n      \"script-src 'self' 'unsafe-inline'\",\n      \"style-src 'self' 'unsafe-inline'\",\n      \"img-src 'self' data: blob:\",\n      \"font-src 'self'\",\n      \"connect-src 'self'\",\n      \"worker-src 'self'\",\n    ].join('; '));\n    \n    next();\n  });\n  \n  // Additional security headers\n  app.use((req, res, next) => {\n    res.setHeader('X-Frame-Options', 'DENY');\n    res.setHeader('X-Content-Type-Options', 'nosniff');\n    res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');\n    res.setHeader('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');\n    \n    next();\n  });\n};\n```\n\n---\n\nThis architecture guide provides the foundation for understanding SecureVault's technical implementation. For specific implementation details, refer to the source code and inline documentation.\n\n**Next Steps:**\n- [Setup Guide](SETUP.md) for development environment\n- [Contributing Guide](CONTRIBUTING.md) for development practices\n- [API Documentation](API.md) for backend integration\n\n---\n\n*Last updated: September 2024*","size_bytes":26988},"CONTRIBUTING.md":{"content":"# Contributing to SecureVault Offline\n\nThank you for your interest in contributing to SecureVault Offline! We welcome contributions from developers of all skill levels. This guide will help you get started with contributing to our privacy-focused password manager.\n\n## 📋 Table of Contents\n\n- [Code of Conduct](#code-of-conduct)\n- [Getting Started](#getting-started)\n- [Development Setup](#development-setup)\n- [How to Contribute](#how-to-contribute)\n- [Pull Request Process](#pull-request-process)\n- [Coding Standards](#coding-standards)\n- [Testing Guidelines](#testing-guidelines)\n- [Documentation](#documentation)\n- [Security Considerations](#security-considerations)\n- [Community and Support](#community-and-support)\n\n## Code of Conduct\n\nThis project adheres to a code of conduct that we expect all contributors to follow. Please read [the full text](CODE_OF_CONDUCT.md) so that you can understand what actions will and will not be tolerated.\n\n### Our Values\n- **Respect**: Treat all contributors with respect and kindness\n- **Inclusivity**: Welcome developers from all backgrounds and experience levels\n- **Privacy First**: Always prioritize user privacy and security\n- **Quality**: Maintain high code quality and thorough testing\n- **Collaboration**: Work together to build the best possible product\n\n## Getting Started\n\n### Prerequisites\n\nBefore contributing, ensure you have the following installed:\n\n- **Node.js** 18.0.0 or higher\n- **npm** 8.0.0 or higher\n- **Git** 2.20.0 or higher\n- A modern web browser for testing\n- A code editor with TypeScript support (VS Code recommended)\n\n### First-Time Setup\n\n1. **Fork the repository** on GitHub\n2. **Clone your fork** locally:\n   ```bash\n   git clone https://github.com/your-username/securevault-offline.git\n   cd securevault-offline\n   ```\n3. **Add upstream remote**:\n   ```bash\n   git remote add upstream https://github.com/original-owner/securevault-offline.git\n   ```\n4. **Install dependencies**:\n   ```bash\n   npm install\n   ```\n5. **Start development server**:\n   ```bash\n   npm run dev\n   ```\n6. **Verify everything works** by opening http://localhost:5000\n\n## Development Setup\n\n### Project Structure Overview\n\n```\nsecurevault/\n├── client/                 # React frontend\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── contexts/       # React context providers\n│   │   ├── hooks/          # Custom React hooks\n│   │   ├── lib/            # Utility libraries\n│   │   ├── pages/          # Page components\n│   │   └── styles/         # Global styles\n├── server/                 # Express backend\n├── shared/                 # Shared types and schemas\n├── extension/             # Browser extension (optional)\n└── docs/                  # Documentation\n```\n\n### Environment Setup\n\nCreate a `.env` file in the root directory:\n\n```env\nNODE_ENV=development\nPORT=5000\nSESSION_SECRET=your-secure-development-secret\n```\n\n### Available Scripts\n\n```bash\n# Development\nnpm run dev              # Start development server\nnpm run build           # Build for production\nnpm start              # Start production server\n\n# Code Quality  \nnpm run lint            # Run ESLint\nnpm run lint:fix        # Fix ESLint errors automatically\nnpm run format          # Format code with Prettier\nnpm run type-check      # Run TypeScript type checking\n\n# Testing\nnpm test               # Run test suite\nnpm run test:watch     # Run tests in watch mode\nnpm run test:coverage  # Run tests with coverage report\n\n# Database (if using)\nnpm run db:generate    # Generate database migrations\nnpm run db:push        # Push schema changes to database\nnpm run db:studio      # Open database studio\n```\n\n## How to Contribute\n\n### Types of Contributions\n\nWe welcome several types of contributions:\n\n1. **🐛 Bug Reports**: Help us identify and fix issues\n2. **✨ Feature Requests**: Suggest new functionality\n3. **📝 Documentation**: Improve or add to our documentation\n4. **🔧 Code Contributions**: Submit bug fixes or new features\n5. **🎨 UI/UX Improvements**: Enhance the user experience\n6. **🧪 Testing**: Add or improve test coverage\n7. **🌐 Translations**: Help make SecureVault accessible globally\n\n### Before You Start\n\n1. **Check existing issues** to avoid duplicating work\n2. **Create an issue** for discussion before major changes\n3. **Comment on issues** you'd like to work on\n4. **Ask questions** if anything is unclear\n\n### Finding Good First Issues\n\nLook for issues labeled:\n- `good first issue` - Perfect for newcomers\n- `help wanted` - We'd appreciate community help\n- `documentation` - Improve our docs\n- `bug` - Fix existing problems\n- `enhancement` - Add new features\n\n## Pull Request Process\n\n### Before Submitting\n\n1. **Create a feature branch**:\n   ```bash\n   git checkout -b feature/your-feature-name\n   ```\n\n2. **Make your changes** following our coding standards\n\n3. **Test your changes** thoroughly:\n   ```bash\n   npm test\n   npm run type-check\n   npm run lint\n   ```\n\n4. **Update documentation** if needed\n\n5. **Commit your changes** with meaningful messages:\n   ```bash\n   git commit -m \"feat: add password strength indicator\n   \n   - Add real-time password strength evaluation\n   - Include visual strength meter component\n   - Update password generation defaults\n   \n   Closes #123\"\n   ```\n\n### Commit Message Format\n\nWe follow the [Conventional Commits](https://www.conventionalcommits.org/) specification:\n\n```\ntype(scope): description\n\n[optional body]\n\n[optional footer]\n```\n\n**Types:**\n- `feat`: New features\n- `fix`: Bug fixes\n- `docs`: Documentation changes\n- `style`: Code formatting (no functional changes)\n- `refactor`: Code refactoring\n- `test`: Adding or updating tests\n- `chore`: Maintenance tasks\n\n**Examples:**\n```\nfeat(auth): implement biometric authentication\nfix(ui): resolve modal close button accessibility\ndocs(api): update endpoint documentation\ntest(crypto): add encryption algorithm tests\n```\n\n### Submitting Your Pull Request\n\n1. **Push your branch**:\n   ```bash\n   git push origin feature/your-feature-name\n   ```\n\n2. **Create a pull request** on GitHub with:\n   - Clear, descriptive title\n   - Detailed description of changes\n   - Screenshots for UI changes\n   - Testing instructions\n   - Related issue numbers\n\n3. **Address review feedback** promptly and professionally\n\n### Pull Request Template\n\n```markdown\n## Description\nBrief description of changes made.\n\n## Type of Change\n- [ ] Bug fix (non-breaking change that fixes an issue)\n- [ ] New feature (non-breaking change that adds functionality)\n- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)\n- [ ] Documentation update\n\n## Testing\n- [ ] I have added tests that prove my fix is effective or that my feature works\n- [ ] I have run the existing test suite and all tests pass\n- [ ] I have tested this change manually\n\n## Screenshots (if applicable)\n[Add screenshots here]\n\n## Checklist\n- [ ] My code follows the project's coding standards\n- [ ] I have performed a self-review of my code\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] I have made corresponding changes to the documentation\n- [ ] My changes generate no new warnings or errors\n```\n\n## Coding Standards\n\n### TypeScript Guidelines\n\n- **Use strict TypeScript**: Enable all strict type checking options\n- **Prefer type safety**: Use `unknown` over `any`, define proper interfaces\n- **Use meaningful names**: Variables and functions should be self-documenting\n- **Keep functions focused**: One responsibility per function\n\n```typescript\n// Good\ninterface UserPreferences {\n  theme: 'light' | 'dark' | 'system';\n  autoLockMinutes: number;\n  enableNotifications: boolean;\n}\n\nconst validateUserPreferences = (prefs: unknown): UserPreferences => {\n  // Implementation with proper validation\n};\n\n// Avoid\nconst validatePrefs = (data: any) => {\n  // Implementation\n};\n```\n\n### React Best Practices\n\n- **Use functional components** with hooks\n- **Custom hooks** for reusable logic\n- **Proper error boundaries** for error handling\n- **Accessible components** with proper ARIA attributes\n- **Performance optimization** with useMemo/useCallback when needed\n\n```tsx\n// Good\nconst PasswordStrengthIndicator: React.FC<{ password: string }> = ({ password }) => {\n  const strength = useMemo(() => calculateStrength(password), [password]);\n  \n  return (\n    <div \n      role=\"progressbar\" \n      aria-label={`Password strength: ${strength.label}`}\n      aria-valuenow={strength.score}\n      aria-valuemin={0}\n      aria-valuemax={4}\n    >\n      <div className={`strength-bar strength-${strength.level}`} />\n      <span className=\"sr-only\">{strength.label}</span>\n    </div>\n  );\n};\n```\n\n### CSS and Styling\n\n- **Use Tailwind CSS classes** for styling\n- **Custom CSS** only when Tailwind is insufficient\n- **Responsive design** with mobile-first approach\n- **Dark mode support** for all components\n- **Consistent spacing** using Tailwind's spacing scale\n\n```tsx\n// Good\n<div className=\"p-4 bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-shadow\">\n  <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n    {title}\n  </h2>\n</div>\n```\n\n### Security Guidelines\n\n- **Never log sensitive data** (passwords, tokens, personal information)\n- **Validate all inputs** on both client and server\n- **Use proper encryption** for sensitive data storage\n- **Follow OWASP guidelines** for web application security\n- **Regular dependency updates** to avoid known vulnerabilities\n\n```typescript\n// Good\nconst encryptData = async (data: string, key: CryptoKey): Promise<EncryptedData> => {\n  const iv = crypto.getRandomValues(new Uint8Array(12));\n  const encrypted = await crypto.subtle.encrypt(\n    { name: 'AES-GCM', iv },\n    key,\n    new TextEncoder().encode(data)\n  );\n  \n  return {\n    encrypted: new Uint8Array(encrypted),\n    iv\n  };\n};\n\n// Never do this\nconsole.log('User password:', userPassword); // NEVER LOG PASSWORDS\n```\n\n## Testing Guidelines\n\n### Testing Philosophy\n\n- **Test behavior, not implementation**\n- **Write tests first** for new features (TDD encouraged)\n- **Test edge cases** and error conditions\n- **Keep tests simple** and focused\n- **Mock external dependencies** appropriately\n\n### Test Types\n\n1. **Unit Tests**: Individual functions and components\n2. **Integration Tests**: Component interactions\n3. **E2E Tests**: Complete user workflows\n4. **Security Tests**: Encryption and authentication flows\n\n### Example Test Structure\n\n```typescript\ndescribe('PasswordGenerator', () => {\n  describe('generatePassword', () => {\n    it('generates password with specified length', () => {\n      const password = generatePassword({ length: 16 });\n      expect(password).toHaveLength(16);\n    });\n\n    it('includes required character types', () => {\n      const password = generatePassword({\n        length: 20,\n        includeNumbers: true,\n        includeSymbols: true\n      });\n      \n      expect(password).toMatch(/\\d/); // Contains numbers\n      expect(password).toMatch(/[!@#$%^&*]/); // Contains symbols\n    });\n\n    it('throws error for invalid length', () => {\n      expect(() => generatePassword({ length: -1 }))\n        .toThrow('Password length must be positive');\n    });\n  });\n});\n```\n\n## Documentation\n\n### Documentation Standards\n\n- **Keep README up to date** with new features\n- **Document all public APIs** with JSDoc comments\n- **Include code examples** in documentation\n- **Update changelog** for notable changes\n- **Write clear, concise explanations**\n\n### JSDoc Comments\n\n```typescript\n/**\n * Encrypts sensitive data using AES-GCM encryption\n * \n * @param data - The plaintext data to encrypt\n * @param masterPassword - User's master password for key derivation\n * @returns Promise that resolves to encrypted data with IV\n * \n * @example\n * ```typescript\n * const encrypted = await encryptUserData('sensitive info', 'masterpass123');\n * console.log(encrypted.data); // Encrypted Uint8Array\n * ```\n */\nconst encryptUserData = async (\n  data: string, \n  masterPassword: string\n): Promise<EncryptedData> => {\n  // Implementation\n};\n```\n\n## Security Considerations\n\n### Security-First Development\n\nWhen contributing to SecureVault, security is paramount. Always consider:\n\n1. **Data Exposure**: Never expose sensitive data in logs, errors, or debugging\n2. **Encryption Standards**: Use only approved encryption methods and libraries\n3. **Input Validation**: Validate and sanitize all user inputs\n4. **Dependency Security**: Regularly update dependencies and check for vulnerabilities\n5. **Browser Security**: Leverage browser security features appropriately\n\n### Security Review Process\n\nAll security-related changes require additional review:\n\n1. **Crypto changes** must be reviewed by core maintainers\n2. **Authentication flows** require thorough testing\n3. **Data storage** changes need privacy impact assessment\n4. **API endpoints** must include proper security headers\n\n## Community and Support\n\n### Communication Channels\n\n- **GitHub Issues**: Bug reports and feature requests\n- **GitHub Discussions**: General questions and community chat\n- **Discord Server**: Real-time chat with contributors (link in README)\n- **Email**: security@securevault.app for security-related issues\n\n### Getting Help\n\n- **Stuck on something?** Create a discussion or ask in Discord\n- **Found a security issue?** Email us privately at security@securevault.app\n- **Need review feedback?** Tag maintainers in your PR or ask in discussions\n\n### Recognition\n\nContributors are recognized in several ways:\n\n- **Contributors file**: All contributors are listed in CONTRIBUTORS.md\n- **Release notes**: Significant contributions are mentioned in release announcements\n- **GitHub insights**: Contribution graphs and statistics\n- **Special thanks**: Outstanding contributions may receive special recognition\n\n## Release Process\n\nWhile most contributors won't be involved in releases, here's our process:\n\n1. **Feature freeze** before major releases\n2. **Security audit** for all releases\n3. **Comprehensive testing** across browsers and devices\n4. **Documentation updates** for new features\n5. **Release notes** with contributor recognition\n\n## Questions?\n\nDon't hesitate to reach out if you have questions:\n\n- Create a [GitHub Discussion](https://github.com/yourusername/securevault-offline/discussions)\n- Join our [Discord Server](discord-link)\n- Email us at contribute@securevault.app\n\n---\n\n**Thank you for contributing to SecureVault Offline!** \n\nYour contributions help make digital privacy and security accessible to everyone. We appreciate your time and effort in making this project better.\n\n---\n\n*Last updated: September 2024*","size_bytes":14772},"README.md":{"content":"# SecureVault Offline\n\n<div align=\"center\">\n\n![SecureVault Logo](https://img.shields.io/badge/🔐-SecureVault-blue?style=for-the-badge)\n\n**A comprehensive offline-first password and subscription manager with client-side encryption**\n\n[![TypeScript](https://img.shields.io/badge/TypeScript-007ACC?style=flat&logo=typescript&logoColor=white)](https://www.typescriptlang.org/)\n[![React](https://img.shields.io/badge/React-20232A?style=flat&logo=react&logoColor=61DAFB)](https://reactjs.org/)\n[![Tailwind CSS](https://img.shields.io/badge/Tailwind_CSS-38B2AC?style=flat&logo=tailwind-css&logoColor=white)](https://tailwindcss.com/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n[🚀 Demo](#demo) • [📖 Documentation](#documentation) • [🛠️ Installation](#installation) • [🤝 Contributing](#contributing)\n\n</div>\n\n## 📋 Table of Contents\n\n- [Overview](#overview)\n- [✨ Features](#features)\n- [🏗️ Architecture](#architecture)  \n- [🚀 Quick Start](#quick-start)\n- [📦 Installation](#installation)\n- [🔧 Configuration](#configuration)\n- [📱 Usage](#usage)\n- [🛡️ Security](#security)\n- [🤝 Contributing](#contributing)\n- [📚 Documentation](#documentation)\n- [🐛 Troubleshooting](#troubleshooting)\n- [📄 License](#license)\n\n## Overview\n\nSecureVault Offline is a modern, privacy-focused password and subscription manager built with **offline-first architecture**. All sensitive data is encrypted client-side using Web Crypto API and stored locally in IndexedDB, ensuring complete user privacy and security. The application features a comprehensive suite of productivity tools including password management, subscription tracking with analytics, rich note-taking with markdown support, expense tracking with visual analytics, and task reminders.\n\n### 🎯 Core Principles\n\n- **🔒 Privacy First**: Zero-knowledge architecture - your data never leaves your device unencrypted\n- **📱 Offline-First**: Full functionality without internet connection\n- **🔐 Client-Side Encryption**: AES-256-GCM encryption with PBKDF2 key derivation\n- **⚡ Modern Stack**: React 18, TypeScript, Tailwind CSS, shadcn/ui components\n- **🎨 Beautiful UI**: Professional design with dark/light mode support\n\n## ✨ Features\n\n### 🔑 Password Management\n- **Secure Storage**: Client-side encrypted password vault\n- **Password Generator**: Customizable strong password generation\n- **Auto-Fill Ready**: Browser extension integration\n- **Breach Detection**: Password strength analysis and weak password alerts\n- **Categories & Tags**: Organize passwords with flexible categorization\n- **Import/Export**: Support for popular password managers (CSV format)\n\n### 💳 Subscription Tracking\n- **Comprehensive Tracking**: Monitor all your recurring subscriptions\n- **Visual Analytics**: Interactive charts showing spending patterns\n- **Renewal Alerts**: Customizable reminder notifications\n- **Cost Analysis**: Track monthly, yearly spending with currency support\n- **Category Insights**: Detailed breakdown by service type\n- **Payment History**: Complete subscription lifecycle management\n\n### 📝 Notes & Knowledge Management  \n- **Rich Text Editor**: Full markdown support with live preview\n- **Syntax Highlighting**: Code blocks with language-specific highlighting\n- **Organization**: Notebooks and tags for structured note-taking\n- **Search**: Powerful full-text search across all notes\n- **Templates**: Pre-built templates for common note types\n- **Export Options**: Markdown export for portability\n\n### 💰 Expense Tracking\n- **Visual Analytics**: Interactive pie charts and bar graphs\n- **Smart Categorization**: 15+ expense categories with custom tags\n- **Recurring Expenses**: Track and predict recurring costs\n- **Multi-Currency Support**: Handle expenses in different currencies\n- **Advanced Filtering**: Filter by date, category, tags, and amount\n- **Duplicate Detection**: Smart duplicate expense prevention\n\n### ⏰ Task & Reminder System\n- **Due Date Tracking**: Never miss important deadlines\n- **Smart Notifications**: Customizable reminder alerts\n- **Priority Levels**: Organize tasks by importance\n- **Progress Tracking**: Mark tasks complete with timestamps\n- **Integration**: Connect with other app sections for workflows\n\n### 🛡️ Security Features\n- **Master Password**: Single authentication point with auto-lock\n- **Encryption**: AES-256-GCM with random IV generation\n- **Key Derivation**: PBKDF2 with 100,000+ iterations\n- **Secure Export**: Encrypted backup for cross-device transfer\n- **Biometric Support**: Device keychain integration when available\n- **Session Management**: Automatic vault locking for security\n\n### 📱 Progressive Web App\n- **Install Anywhere**: Works on desktop, mobile, and tablets\n- **Offline Sync**: Full functionality without internet\n- **Service Worker**: Background sync and caching\n- **Responsive Design**: Optimized for all screen sizes\n- **Native Feel**: App-like experience with proper splash screens\n\n## 🏗️ Architecture\n\n### Frontend Stack\n- **React 18** with TypeScript for type safety and modern development\n- **Wouter** for lightweight client-side routing  \n- **TanStack Query** for server state management\n- **shadcn/ui** components built on Radix UI primitives\n- **Tailwind CSS** for utility-first styling with custom design system\n\n### Backend & Data\n- **Express.js** minimal API server with TypeScript\n- **IndexedDB** for encrypted local data storage\n- **Web Crypto API** for client-side encryption operations\n- **Drizzle ORM** with PostgreSQL schema definitions\n- **Zod** for runtime type validation and schema validation\n\n### Security Architecture\n```\nUser Input → Master Password → PBKDF2 (100k iterations) → Encryption Key\n                                                           ↓\nData → AES-256-GCM Encryption → IndexedDB Storage → Local Device Only\n```\n\n### Project Structure\n```\nsecurevault/\n├── client/                 # React frontend application\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   ├── contexts/       # React context providers\n│   │   ├── hooks/          # Custom React hooks\n│   │   ├── lib/            # Utility libraries\n│   │   ├── pages/          # Route components\n│   │   └── styles/         # Global styles and themes\n├── server/                 # Express backend server\n│   ├── index.ts           # Server entry point\n│   ├── routes.ts          # API route definitions\n│   └── storage.ts         # Data storage utilities\n├── shared/                 # Shared types and schemas\n│   └── schema.ts          # Zod schemas and TypeScript types\n├── extension/             # Browser extension (optional)\n└── docs/                  # Documentation files\n```\n\n## 🚀 Quick Start\n\n### Prerequisites\n- **Node.js** 18.0.0 or higher\n- **npm** 8.0.0 or higher\n- Modern web browser with IndexedDB support\n\n### 1-Minute Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/securevault-offline.git\ncd securevault-offline\n\n# Install dependencies\nnpm install\n\n# Start development server\nnpm run dev\n\n# Open your browser to http://localhost:5000\n```\n\nThat's it! 🎉 Your SecureVault is now running locally.\n\n## 📦 Installation\n\n### Development Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/securevault-offline.git\ncd securevault-offline\n\n# Install all dependencies\nnpm install\n\n# Start development server with hot reload\nnpm run dev\n```\n\n### Production Build\n\n```bash\n# Build for production\nnpm run build\n\n# Start production server\nnpm start\n```\n\n### Docker Installation (Optional)\n\n```bash\n# Build Docker image\ndocker build -t securevault-offline .\n\n# Run container\ndocker run -p 5000:5000 securevault-offline\n```\n\n### Environment Setup\n\nCreate a `.env` file in the root directory:\n\n```env\n# Development settings\nNODE_ENV=development\nPORT=5000\n\n# Session management\nSESSION_SECRET=your-secure-session-secret-here\n\n# Optional: Database URL (for user accounts)\nDATABASE_URL=postgresql://username:password@localhost:5432/securevault\n```\n\n## 🔧 Configuration\n\n### Application Settings\n\nThe application includes several configurable options:\n\n- **Auto-lock Timer**: Set vault auto-lock duration (default: 15 minutes)\n- **Password Generation**: Customize default password length and complexity\n- **Theme Settings**: Light/dark mode with system preference detection\n- **Backup Frequency**: Automatic encrypted backup scheduling\n- **Notification Settings**: Configure reminder alerts and renewal notifications\n\n### Advanced Configuration\n\nFor advanced users, additional settings are available in `client/src/lib/config.ts`:\n\n```typescript\nexport const APP_CONFIG = {\n  encryption: {\n    algorithm: 'AES-GCM',\n    keyDerivation: {\n      algorithm: 'PBKDF2',\n      iterations: 100000,\n      hash: 'SHA-256'\n    }\n  },\n  storage: {\n    dbName: 'SecureVault',\n    version: 1\n  },\n  ui: {\n    autoLockMinutes: 15,\n    theme: 'system'\n  }\n};\n```\n\n## 📱 Usage\n\n### Getting Started\n\n1. **Create Your Vault**: Set a strong master password (this cannot be recovered!)\n2. **Import Data**: Use our CSV templates to import existing passwords and subscriptions\n3. **Add Items**: Start adding passwords, subscriptions, notes, and expenses\n4. **Explore Analytics**: View your spending patterns and subscription insights\n5. **Stay Organized**: Use categories, tags, and notebooks to organize your data\n\n### Key Workflows\n\n#### Password Management\n```\nAdd Password → Enter Details → Generate Strong Password → Save → Auto-Categorize\n```\n\n#### Subscription Tracking  \n```\nAdd Subscription → Set Billing Info → Configure Alerts → View Analytics → Track Renewals\n```\n\n#### Expense Tracking\n```\nAdd Expense → Categorize → Tag → View Charts → Filter & Analyze → Export Reports\n```\n\n### Browser Extension\n\nInstall our browser extension for seamless auto-fill functionality:\n\n1. Download from Chrome Web Store or Firefox Add-ons\n2. Connect to your local SecureVault instance\n3. Enjoy one-click password filling and generation\n\n## 🛡️ Security\n\n### Encryption Details\n\n- **Algorithm**: AES-256-GCM (Galois/Counter Mode)\n- **Key Derivation**: PBKDF2 with SHA-256, 100,000+ iterations\n- **IV Generation**: Cryptographically secure random IV for each encryption\n- **Salt**: Random salt per vault for key derivation\n- **Storage**: Encrypted data stored only in local IndexedDB\n\n### Security Best Practices\n\n1. **Master Password**: Use a unique, strong master password (20+ characters recommended)\n2. **Regular Backups**: Export encrypted backups regularly\n3. **Browser Security**: Keep your browser updated for latest security features\n4. **Physical Security**: Use device lock screens and trusted devices only\n5. **Network Safety**: App works offline - no data transmitted over networks\n\n### Security Audit\n\n- ✅ Client-side encryption with Web Crypto API\n- ✅ Zero-knowledge architecture (we never see your data)\n- ✅ No telemetry or analytics collection\n- ✅ No third-party trackers or scripts\n- ✅ Offline-first design (no network dependencies)\n- ✅ Regular security updates and dependency management\n\n## 🤝 Contributing\n\nWe welcome contributions from the community! Please see our [Contributing Guide](CONTRIBUTING.md) for detailed information on how to get started.\n\n### Quick Contribution Guide\n\n1. **Fork the repository** on GitHub\n2. **Create a feature branch**: `git checkout -b feature/amazing-feature`\n3. **Make your changes** and add tests if applicable\n4. **Commit your changes**: `git commit -m 'Add amazing feature'`\n5. **Push to the branch**: `git push origin feature/amazing-feature`\n6. **Open a Pull Request** with a detailed description\n\n### Development Guidelines\n\n- Follow TypeScript best practices and maintain type safety\n- Use ESLint and Prettier for code formatting (configs included)\n- Write meaningful commit messages following conventional commits\n- Add tests for new features and bug fixes\n- Update documentation when adding new features\n- Ensure responsive design works across all screen sizes\n\n### Code Style\n\nWe use automated formatting with Prettier and linting with ESLint:\n\n```bash\n# Format code\nnpm run format\n\n# Lint code\nnpm run lint\n\n# Type checking\nnpm run type-check\n```\n\n## 📚 Documentation\n\n### Additional Documentation\n\n- [📋 Setup Guide](SETUP.md) - Detailed installation and configuration\n- [🏗️ Architecture Guide](ARCHITECTURE.md) - Technical architecture deep dive\n- [🔌 API Documentation](API.md) - Backend API reference\n- [🎨 Component Library](COMPONENTS.md) - UI component documentation\n- [🔒 Security Details](SECURITY.md) - Comprehensive security documentation\n\n### Helpful Resources\n\n- [Password Security Best Practices](docs/password-security.md)\n- [Data Import/Export Guide](docs/data-management.md)\n- [Browser Extension Setup](docs/extension-setup.md)\n- [Troubleshooting Common Issues](docs/troubleshooting.md)\n- [Keyboard Shortcuts](docs/shortcuts.md)\n\n## 🐛 Troubleshooting\n\n### Common Issues\n\n**🔴 \"Cannot connect to server\"**\n- Ensure the development server is running on port 5000\n- Check that no other application is using port 5000\n- Verify your firewall settings allow localhost connections\n\n**🔴 \"Master password incorrect\"**  \n- Master passwords are case-sensitive and cannot be recovered\n- If you've forgotten it, you'll need to reset your vault (data will be lost)\n- Use the \"Reset Vault\" option in Settings > Advanced\n\n**🔴 \"Data not syncing across devices\"**\n- SecureVault is designed for single-device use by default\n- Use the Export/Import feature to manually sync data\n- Consider the browser extension for cross-browser access\n\n**🔴 \"Browser not supported\"**\n- Requires modern browser with IndexedDB and Web Crypto API support\n- Recommended: Chrome 80+, Firefox 75+, Safari 14+, Edge 80+\n\n### Getting Help\n\n- 📖 Check our [Documentation](docs/)\n- 🐛 [Report Issues](https://github.com/yourusername/securevault-offline/issues)\n- 💬 [Join Discussions](https://github.com/yourusername/securevault-offline/discussions)\n- 📧 Email us at support@securevault.app\n\n## 📊 Sample Data\n\nWe've included comprehensive sample data files to help you test all features:\n\n- `sample_data_passwords.csv` - 25 sample password entries\n- `sample_data_subscriptions.csv` - 30 sample subscription entries  \n- `sample_data_notes.csv` - 10 detailed note entries with markdown\n- `sample_data_expenses.csv` - 35 sample expense entries with analytics data\n\nImport these files to immediately see the full power of SecureVault's analytics and organization features.\n\n## 🗺️ Roadmap\n\n### Upcoming Features\n\n- **🔄 Cross-Device Sync**: Encrypted sync across devices\n- **📊 Advanced Analytics**: More detailed insights and reporting\n- **🔍 Advanced Search**: Full-text search across all data types\n- **📱 Mobile Apps**: Native iOS and Android applications\n- **🔐 Hardware Key Support**: FIDO2/WebAuthn integration\n- **🌐 Multi-Language**: Internationalization support\n- **📈 Data Insights**: AI-powered spending and security recommendations\n\n### Version History\n\n- **v2.0.0** - Added Expenses and Reminders sections with visual analytics\n- **v1.5.0** - Added Notes section with rich markdown editor\n- **v1.0.0** - Initial release with Password and Subscription management\n\n## 🏆 Acknowledgments\n\n- **shadcn/ui** for the beautiful component library\n- **Radix UI** for accessible primitives\n- **Lucide** for the comprehensive icon set\n- **Web Crypto API** for secure client-side encryption\n- **IndexedDB** for local data storage capabilities\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n---\n\n<div align=\"center\">\n\n**Built with ❤️ for privacy and security**\n\n[⭐ Star on GitHub](https://github.com/yourusername/securevault-offline) • [🐛 Report Bug](https://github.com/yourusername/securevault-offline/issues) • [✨ Request Feature](https://github.com/yourusername/securevault-offline/issues)\n\n**SecureVault Offline** - Your data, your device, your privacy.\n\n</div>","size_bytes":16251},"SETUP.md":{"content":"# SecureVault Offline - Setup Guide\n\nThis comprehensive setup guide will help you get SecureVault Offline running in your development environment, whether you're contributing to the project or setting it up for your own use.\n\n## 📋 Table of Contents\n\n- [Prerequisites](#prerequisites)\n- [Quick Start](#quick-start)\n- [Detailed Installation](#detailed-installation)\n- [Environment Configuration](#environment-configuration)\n- [Database Setup](#database-setup)\n- [Development Tools](#development-tools)\n- [Production Deployment](#production-deployment)\n- [Docker Setup](#docker-setup)\n- [Browser Extension](#browser-extension)\n- [Troubleshooting](#troubleshooting)\n- [Next Steps](#next-steps)\n\n## Prerequisites\n\n### System Requirements\n\n- **Operating System**: Windows 10+, macOS 10.15+, or Linux (Ubuntu 18.04+)\n- **Node.js**: Version 18.0.0 or higher ([Download](https://nodejs.org/))\n- **npm**: Version 8.0.0 or higher (comes with Node.js)\n- **Git**: Version 2.20.0 or higher ([Download](https://git-scm.com/))\n- **Modern Browser**: Chrome 80+, Firefox 75+, Safari 14+, or Edge 80+\n\n### Development Environment (Recommended)\n\n- **Visual Studio Code** with the following extensions:\n  - TypeScript and JavaScript Language Features\n  - ES7+ React/Redux/React-Native snippets\n  - Tailwind CSS IntelliSense\n  - Prettier - Code formatter\n  - ESLint\n  - GitLens\n- **Terminal**: Use your preferred terminal or VS Code's integrated terminal\n\n### Verify Prerequisites\n\nRun these commands to verify your setup:\n\n```bash\n# Check Node.js version\nnode --version\n# Should output v18.0.0 or higher\n\n# Check npm version  \nnpm --version\n# Should output 8.0.0 or higher\n\n# Check Git version\ngit --version\n# Should output 2.20.0 or higher\n```\n\n## Quick Start\n\nGet up and running in 5 minutes:\n\n```bash\n# 1. Clone the repository\ngit clone https://github.com/yourusername/securevault-offline.git\ncd securevault-offline\n\n# 2. Install dependencies\nnpm install\n\n# 3. Start development server\nnpm run dev\n\n# 4. Open your browser\n# Navigate to http://localhost:5000\n```\n\nThat's it! Your SecureVault should now be running locally. 🎉\n\n## Detailed Installation\n\n### Step 1: Clone the Repository\n\n```bash\n# Clone via HTTPS\ngit clone https://github.com/yourusername/securevault-offline.git\n\n# Or clone via SSH (if you have SSH keys set up)\ngit clone git@github.com:yourusername/securevault-offline.git\n\n# Navigate to project directory\ncd securevault-offline\n```\n\n### Step 2: Install Dependencies\n\nSecureVault uses npm for dependency management:\n\n```bash\n# Install all dependencies (client, server, and shared)\nnpm install\n\n# This will install:\n# - React and related libraries\n# - TypeScript and build tools\n# - UI components (shadcn/ui, Radix UI)\n# - Styling (Tailwind CSS)\n# - Backend dependencies (Express, etc.)\n```\n\n**Note**: The installation may take 2-5 minutes depending on your internet connection.\n\n### Step 3: Environment Setup\n\nCreate environment files for configuration:\n\n```bash\n# Copy the example environment file\ncp .env.example .env\n\n# Edit the environment file\nnano .env  # or use your preferred editor\n```\n\n### Step 4: Verify Installation\n\n```bash\n# Check if all dependencies installed correctly\nnpm list --depth=0\n\n# Run type checking\nnpm run type-check\n\n# Run linting\nnpm run lint\n```\n\n### Step 5: Start Development Server\n\n```bash\n# Start the development server\nnpm run dev\n\n# You should see output similar to:\n# > rest-express@1.0.0 dev\n# > NODE_ENV=development tsx server/index.ts\n# 3:40:15 PM [express] serving on port 5000\n```\n\nOpen your browser and navigate to `http://localhost:5000` to see SecureVault running.\n\n## Environment Configuration\n\n### Environment Variables\n\nCreate a `.env` file in the project root with the following variables:\n\n```env\n# Development Configuration\nNODE_ENV=development\nPORT=5000\n\n# Session Management\nSESSION_SECRET=your-secure-random-session-secret-min-32-chars\n\n# Database Configuration (Optional)\n# Uncomment if you want to use PostgreSQL for user accounts\n# DATABASE_URL=postgresql://username:password@localhost:5432/securevault\n\n# Security Settings\nENCRYPTION_ITERATIONS=100000\nAUTO_LOCK_MINUTES=15\n\n# Development Settings\nENABLE_LOGGING=true\nLOG_LEVEL=info\n\n# PWA Settings\nPWA_ENABLED=true\nOFFLINE_ENABLED=true\n```\n\n### Generating Secure Session Secret\n\nFor production or secure development, generate a proper session secret:\n\n```bash\n# Generate a secure random string (32+ characters)\nnode -e \"console.log(require('crypto').randomBytes(32).toString('hex'))\"\n\n# Use this output as your SESSION_SECRET\n```\n\n### Environment-Specific Configurations\n\n#### Development (.env.development)\n```env\nNODE_ENV=development\nPORT=5000\nENABLE_LOGGING=true\nLOG_LEVEL=debug\n```\n\n#### Production (.env.production)\n```env\nNODE_ENV=production\nPORT=5000\nENABLE_LOGGING=false\nLOG_LEVEL=error\nSESSION_SECRET=your-production-secret-here\n```\n\n## Database Setup\n\nSecureVault primarily uses IndexedDB for client-side storage, but you can optionally set up PostgreSQL for user account management.\n\n### IndexedDB (Default - No Setup Required)\n\nIndexedDB is automatically available in modern browsers and requires no setup. SecureVault will:\n\n- Create the database on first use\n- Handle all encryption/decryption client-side\n- Store data only in the user's browser\n\n### PostgreSQL Setup (Optional)\n\nIf you want to enable user accounts and server-side features:\n\n#### Using Local PostgreSQL\n\n1. **Install PostgreSQL** on your system\n2. **Create a database**:\n   ```sql\n   CREATE DATABASE securevault;\n   CREATE USER securevault_user WITH PASSWORD 'secure_password';\n   GRANT ALL PRIVILEGES ON DATABASE securevault TO securevault_user;\n   ```\n3. **Update your .env file**:\n   ```env\n   DATABASE_URL=postgresql://securevault_user:secure_password@localhost:5432/securevault\n   ```\n\n#### Using Neon Database (Cloud)\n\n1. **Sign up** at [Neon](https://neon.tech)\n2. **Create a new project** and database\n3. **Copy the connection string** to your `.env`:\n   ```env\n   DATABASE_URL=postgresql://username:password@ep-cool-cloud-123456.us-east-1.aws.neon.tech/dbname?sslmode=require\n   ```\n\n#### Database Schema Setup\n\nRun database migrations to set up the schema:\n\n```bash\n# Generate migration files\nnpm run db:generate\n\n# Push schema to database\nnpm run db:push\n\n# Open database studio (optional)\nnpm run db:studio\n```\n\n## Development Tools\n\n### Code Quality Tools\n\nSecureVault includes several tools to maintain code quality:\n\n```bash\n# Linting with ESLint\nnpm run lint          # Check for issues\nnpm run lint:fix      # Automatically fix issues\n\n# Code formatting with Prettier\nnpm run format        # Format all code\n\n# TypeScript type checking\nnpm run type-check    # Verify types across the project\n\n# Run all quality checks\nnpm run check-all     # Lint, format, and type-check\n```\n\n### Testing Setup\n\nInstall and run the test suite:\n\n```bash\n# Run all tests\nnpm test\n\n# Run tests in watch mode (for development)\nnpm run test:watch\n\n# Run tests with coverage report\nnpm run test:coverage\n\n# Run specific test file\nnpm test -- PasswordGenerator.test.ts\n```\n\n### Building for Production\n\nTest the production build locally:\n\n```bash\n# Create production build\nnpm run build\n\n# Start production server\nnpm start\n\n# Or build and start in one command\nnpm run build && npm start\n```\n\n## Production Deployment\n\n### Building for Production\n\n```bash\n# Install production dependencies only\nnpm ci --only=production\n\n# Build the application\nnpm run build\n\n# Start the production server\nNODE_ENV=production npm start\n```\n\n### Environment Configuration for Production\n\nCreate a `.env.production` file:\n\n```env\nNODE_ENV=production\nPORT=5000\nSESSION_SECRET=your-very-secure-session-secret-here\nDATABASE_URL=your-production-database-url\nENABLE_LOGGING=false\nLOG_LEVEL=error\n```\n\n### Deployment Platforms\n\n#### Vercel Deployment\n```bash\n# Install Vercel CLI\nnpm i -g vercel\n\n# Deploy to Vercel\nvercel --prod\n```\n\n#### Railway Deployment\n1. Connect your GitHub repository to Railway\n2. Set environment variables in Railway dashboard\n3. Deploy automatically on push\n\n#### DigitalOcean App Platform\n1. Connect your GitHub repository\n2. Configure build and run commands:\n   - Build Command: `npm run build`\n   - Run Command: `npm start`\n3. Set environment variables\n\n## Docker Setup\n\nRun SecureVault in a Docker container:\n\n### Using Docker Compose (Recommended)\n\nCreate a `docker-compose.yml` file:\n\n```yaml\nversion: '3.8'\n\nservices:\n  securevault:\n    build: .\n    ports:\n      - \"5000:5000\"\n    environment:\n      - NODE_ENV=production\n      - SESSION_SECRET=your-session-secret\n      - DATABASE_URL=postgresql://user:pass@db:5432/securevault\n    depends_on:\n      - db\n    volumes:\n      - ./data:/app/data\n\n  db:\n    image: postgres:15\n    environment:\n      - POSTGRES_DB=securevault\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=pass\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n\nvolumes:\n  postgres_data:\n```\n\nRun with Docker Compose:\n\n```bash\n# Start all services\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f\n\n# Stop services\ndocker-compose down\n```\n\n### Using Docker Only\n\n```bash\n# Build the Docker image\ndocker build -t securevault-offline .\n\n# Run the container\ndocker run -p 5000:5000 \\\n  -e NODE_ENV=production \\\n  -e SESSION_SECRET=your-session-secret \\\n  securevault-offline\n```\n\n## Browser Extension\n\nThe SecureVault browser extension provides auto-fill functionality:\n\n### Building the Extension\n\n```bash\n# Navigate to extension directory\ncd extension\n\n# Install extension dependencies\nnpm install\n\n# Build the extension\nnpm run build\n\n# The built extension will be in the `build` directory\n```\n\n### Installing in Chrome\n\n1. Open Chrome and navigate to `chrome://extensions/`\n2. Enable \"Developer mode\" in the top right\n3. Click \"Load unpacked\"\n4. Select the `extension/build` directory\n\n### Installing in Firefox\n\n1. Open Firefox and navigate to `about:debugging#/runtime/this-firefox`\n2. Click \"Load Temporary Add-on\"\n3. Navigate to `extension/build` and select `manifest.json`\n\n## Troubleshooting\n\n### Common Issues\n\n#### Port 5000 Already in Use\n\n```bash\n# Kill the process using port 5000\nlsof -ti:5000 | xargs kill -9\n\n# Or use a different port\nPORT=3000 npm run dev\n```\n\n#### Node Version Issues\n\n```bash\n# Update Node.js using nvm (recommended)\nnvm install 18\nnvm use 18\n\n# Verify version\nnode --version\n```\n\n#### Database Connection Issues\n\n```bash\n# Test database connection\nnode -e \"\nconst { Pool } = require('pg');\nconst pool = new Pool({ connectionString: process.env.DATABASE_URL });\npool.query('SELECT NOW()', (err, res) => {\n  console.log(err ? err.message : 'Database connected successfully');\n  process.exit();\n});\n\"\n```\n\n#### Dependency Installation Issues\n\n```bash\n# Clear npm cache\nnpm cache clean --force\n\n# Remove node_modules and reinstall\nrm -rf node_modules package-lock.json\nnpm install\n\n# Update npm to latest version\nnpm install -g npm@latest\n```\n\n#### Build Issues\n\n```bash\n# Clear TypeScript cache\nnpx tsc --build --clean\n\n# Remove build artifacts\nrm -rf dist build\n\n# Rebuild everything\nnpm run build\n```\n\n### Performance Issues\n\n#### Slow Development Server\n\n```bash\n# Increase Node.js memory limit\nNODE_OPTIONS=\"--max-old-space-size=4096\" npm run dev\n\n# Use faster build tool settings\nexport NODE_ENV=development\nnpm run dev\n```\n\n#### Large Bundle Size\n\n```bash\n# Analyze bundle size\nnpm run build\nnpm run analyze\n\n# Check for unnecessary dependencies\nnpm run bundle-analyzer\n```\n\n### Getting Help\n\nIf you encounter issues not covered here:\n\n1. **Check the logs** for detailed error messages\n2. **Search existing issues** on GitHub\n3. **Create a new issue** with:\n   - Your operating system and version\n   - Node.js and npm versions\n   - Complete error messages\n   - Steps to reproduce the problem\n\n## Next Steps\n\nNow that you have SecureVault running:\n\n### For Users\n1. **Import your data** using the CSV files in the repository\n2. **Set up your vault** with a strong master password\n3. **Explore all features**: passwords, subscriptions, notes, expenses\n4. **Install the browser extension** for auto-fill functionality\n\n### For Developers\n1. **Read the [Architecture Guide](ARCHITECTURE.md)** to understand the codebase\n2. **Review [Contributing Guidelines](CONTRIBUTING.md)** for development practices\n3. **Set up your development environment** with linting and formatting\n4. **Run the test suite** to ensure everything works correctly\n5. **Start contributing** by picking up a \"good first issue\"\n\n### Security Considerations\n1. **Use HTTPS** in production (required for PWA features)\n2. **Set secure session secrets** (32+ random characters)\n3. **Keep dependencies updated** regularly\n4. **Enable CSP headers** for additional security\n5. **Regular security audits** with `npm audit`\n\n---\n\n**Need more help?** Check out our other documentation files:\n- [README.md](README.md) - Project overview and features\n- [ARCHITECTURE.md](ARCHITECTURE.md) - Technical architecture\n- [CONTRIBUTING.md](CONTRIBUTING.md) - Development guidelines\n\n**Have questions?** Join our community:\n- [GitHub Discussions](https://github.com/yourusername/securevault-offline/discussions)\n- [Discord Server](discord-invite-link)\n- Email: support@securevault.app\n\n---\n\n*Last updated: September 2024*","size_bytes":13272},"client/src/pages/expenses.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { useVault } from '@/contexts/vault-context';\nimport { ExpenseEntry, EXPENSE_CATEGORIES } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Plus, \n  Edit, \n  Trash2, \n  Search, \n  DollarSign, \n  Tag, \n  Calendar, \n  Filter,\n  PieChart as PieIcon,\n  BarChart3,\n  TrendingUp,\n  Receipt,\n  Archive,\n  Repeat,\n  AlertCircle\n} from 'lucide-react';\nimport { format } from 'date-fns';\nimport { PieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\n// Color palette for charts\nconst COLORS = ['#6366f1', '#8b5cf6', '#06b6d4', '#10b981', '#f59e0b', '#ef4444', '#ec4899', '#84cc16', '#f97316', '#6b7280'];\n\nexport default function Expenses() {\n  const { expenses, addExpense, updateExpense, deleteExpense, searchQuery, setSearchQuery } = useVault();\n  const { toast } = useToast();\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [editingExpense, setEditingExpense] = useState<ExpenseEntry | null>(null);\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  const [showRecurringOnly, setShowRecurringOnly] = useState(false);\n  const [viewMode, setViewMode] = useState<'overview' | 'categories' | 'trends'>('overview');\n  const [dateFilter, setDateFilter] = useState<'all' | 'month' | 'week' | 'year'>('month');\n\n  // Form state for add/edit modal\n  const [formData, setFormData] = useState({\n    title: '',\n    amount: '',\n    currency: 'USD',\n    category: '',\n    date: new Date().toISOString().split('T')[0],\n    notes: '',\n    isRecurring: false,\n    recurringFrequency: 'monthly' as 'daily' | 'weekly' | 'monthly' | 'yearly',\n    nextDueDate: '',\n    tags: [] as string[],\n  });\n  \n  const [newTag, setNewTag] = useState('');\n\n  // Get all unique tags from expenses\n  const allTags = useMemo(() => {\n    const tagSet = new Set<string>();\n    expenses.forEach(expense => {\n      expense.tags.forEach(tag => tagSet.add(tag));\n    });\n    return Array.from(tagSet).sort();\n  }, [expenses]);\n\n  // Filter expenses based on various criteria\n  const filteredExpenses = useMemo(() => {\n    return expenses.filter(expense => {\n      // Search filter\n      const matchesSearch = !searchQuery || \n        expense.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        expense.category.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        expense.notes?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        expense.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));\n\n      // Category filter\n      const matchesCategory = selectedCategory === 'all' || expense.category === selectedCategory;\n      \n      // Tag filter\n      const matchesTags = selectedTags.length === 0 || \n        selectedTags.some(tag => expense.tags.includes(tag));\n\n      // Recurring filter\n      const matchesRecurring = !showRecurringOnly || expense.isRecurring;\n\n      // Date filter\n      let matchesDate = true;\n      const expenseDate = new Date(expense.date);\n      const now = new Date();\n\n      switch (dateFilter) {\n        case 'week':\n          const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n          matchesDate = expenseDate >= weekAgo;\n          break;\n        case 'month':\n          matchesDate = expenseDate.getMonth() === now.getMonth() && \n                       expenseDate.getFullYear() === now.getFullYear();\n          break;\n        case 'year':\n          matchesDate = expenseDate.getFullYear() === now.getFullYear();\n          break;\n        case 'all':\n        default:\n          matchesDate = true;\n          break;\n      }\n\n      return matchesSearch && matchesCategory && matchesTags && matchesRecurring && matchesDate;\n    });\n  }, [expenses, searchQuery, selectedCategory, selectedTags, showRecurringOnly, dateFilter]);\n\n  // Sort expenses by date (newest first)\n  const sortedExpenses = useMemo(() => {\n    return [...filteredExpenses].sort((a, b) => \n      new Date(b.date).getTime() - new Date(a.date).getTime()\n    );\n  }, [filteredExpenses]);\n\n  // Calculate analytics data\n  const analytics = useMemo(() => {\n    const categoryTotals: Record<string, number> = {};\n    const monthlyTotals: Record<string, number> = {};\n    let totalAmount = 0;\n\n    filteredExpenses.forEach(expense => {\n      // Category breakdown\n      categoryTotals[expense.category] = (categoryTotals[expense.category] || 0) + expense.amount;\n      \n      // Monthly breakdown\n      const monthKey = format(new Date(expense.date), 'MMM yyyy');\n      monthlyTotals[monthKey] = (monthlyTotals[monthKey] || 0) + expense.amount;\n      \n      totalAmount += expense.amount;\n    });\n\n    // Pie chart data\n    const pieChartData = Object.entries(categoryTotals).map(([category, amount]) => ({\n      name: category,\n      value: amount,\n      percentage: (amount / totalAmount) * 100\n    })).sort((a, b) => b.value - a.value);\n\n    // Bar chart data (last 6 months)\n    const barChartData = Object.entries(monthlyTotals)\n      .sort(([a], [b]) => new Date(a).getTime() - new Date(b).getTime())\n      .slice(-6)\n      .map(([month, amount]) => ({\n        month: month.split(' ')[0], // Just month name\n        amount: amount\n      }));\n\n    return {\n      totalAmount,\n      categoryTotals,\n      monthlyTotals,\n      pieChartData,\n      barChartData,\n      averageExpense: totalAmount / filteredExpenses.length || 0,\n      recurringExpenses: filteredExpenses.filter(e => e.isRecurring).length\n    };\n  }, [filteredExpenses]);\n\n  // Smart duplicate detection\n  const detectPotentialDuplicate = (newExpense: Omit<ExpenseEntry, 'id' | 'createdAt' | 'updatedAt'>) => {\n    const similar = expenses.filter(existing => {\n      const titleSimilar = existing.title.toLowerCase().includes(newExpense.title.toLowerCase()) ||\n                          newExpense.title.toLowerCase().includes(existing.title.toLowerCase());\n      const amountSimilar = Math.abs(existing.amount - newExpense.amount) < 0.01;\n      const categorySame = existing.category === newExpense.category;\n      const dateSimilar = Math.abs(new Date(existing.date).getTime() - new Date(newExpense.date).getTime()) < 24 * 60 * 60 * 1000; // Within 24 hours\n\n      return (titleSimilar || (amountSimilar && categorySame)) && dateSimilar;\n    });\n\n    return similar.length > 0 ? similar[0] : null;\n  };\n\n  const handleAddExpense = async () => {\n    if (!formData.title.trim() || !formData.amount || !formData.category) {\n      toast({\n        title: \"Error\",\n        description: \"Title, amount, and category are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const amount = parseFloat(formData.amount);\n    if (isNaN(amount) || amount <= 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid positive amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const newExpense = {\n      title: formData.title.trim(),\n      amount,\n      currency: formData.currency,\n      category: formData.category,\n      date: new Date(formData.date),\n      notes: formData.notes,\n      isRecurring: formData.isRecurring,\n      recurringFrequency: formData.isRecurring ? formData.recurringFrequency : undefined,\n      nextDueDate: formData.isRecurring && formData.nextDueDate ? new Date(formData.nextDueDate) : undefined,\n      tags: formData.tags,\n    };\n\n    // Check for potential duplicates\n    const potentialDuplicate = detectPotentialDuplicate(newExpense);\n    if (potentialDuplicate && !confirm(\n      `Similar expense found: \"${potentialDuplicate.title}\" ($${potentialDuplicate.amount}) on ${format(new Date(potentialDuplicate.date), 'MMM dd, yyyy')}. Add anyway?`\n    )) {\n      return;\n    }\n\n    try {\n      await addExpense(newExpense);\n      \n      // Reset form\n      setFormData({\n        title: '',\n        amount: '',\n        currency: 'USD',\n        category: '',\n        date: new Date().toISOString().split('T')[0],\n        notes: '',\n        isRecurring: false,\n        recurringFrequency: 'monthly',\n        nextDueDate: '',\n        tags: [],\n      });\n      setShowAddModal(false);\n\n      toast({\n        title: \"Success\",\n        description: \"Expense added successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add expense\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleEditExpense = (expense: ExpenseEntry) => {\n    setEditingExpense(expense);\n    setFormData({\n      title: expense.title,\n      amount: expense.amount.toString(),\n      currency: expense.currency,\n      category: expense.category,\n      date: format(new Date(expense.date), 'yyyy-MM-dd'),\n      notes: expense.notes || '',\n      isRecurring: expense.isRecurring,\n      recurringFrequency: expense.recurringFrequency || 'monthly',\n      nextDueDate: expense.nextDueDate ? format(new Date(expense.nextDueDate), 'yyyy-MM-dd') : '',\n      tags: [...expense.tags],\n    });\n  };\n\n  const handleUpdateExpense = async () => {\n    if (!editingExpense || !formData.title.trim() || !formData.amount || !formData.category) {\n      toast({\n        title: \"Error\", \n        description: \"Title, amount, and category are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const amount = parseFloat(formData.amount);\n    if (isNaN(amount) || amount <= 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid positive amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await updateExpense(editingExpense.id, {\n        title: formData.title.trim(),\n        amount,\n        currency: formData.currency,\n        category: formData.category,\n        date: new Date(formData.date),\n        notes: formData.notes,\n        isRecurring: formData.isRecurring,\n        recurringFrequency: formData.isRecurring ? formData.recurringFrequency : undefined,\n        nextDueDate: formData.isRecurring && formData.nextDueDate ? new Date(formData.nextDueDate) : undefined,\n        tags: formData.tags,\n      });\n\n      setEditingExpense(null);\n      setFormData({\n        title: '',\n        amount: '',\n        currency: 'USD',\n        category: '',\n        date: new Date().toISOString().split('T')[0],\n        notes: '',\n        isRecurring: false,\n        recurringFrequency: 'monthly',\n        nextDueDate: '',\n        tags: [],\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Expense updated successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update expense\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteExpense = async (id: string, title: string) => {\n    if (!confirm(`Are you sure you want to delete \"${title}\"?`)) {\n      return;\n    }\n\n    try {\n      await deleteExpense(id);\n      toast({\n        title: \"Success\",\n        description: \"Expense deleted successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete expense\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const addTag = () => {\n    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {\n      setFormData(prev => ({\n        ...prev,\n        tags: [...prev.tags, newTag.trim()]\n      }));\n      setNewTag('');\n    }\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    setFormData(prev => ({\n      ...prev,\n      tags: prev.tags.filter(tag => tag !== tagToRemove)\n    }));\n  };\n\n  const toggleTagFilter = (tag: string) => {\n    setSelectedTags(prev => \n      prev.includes(tag) \n        ? prev.filter(t => t !== tag)\n        : [...prev, tag]\n    );\n  };\n\n  const clearFilters = () => {\n    setSelectedCategory('all');\n    setSelectedTags([]);\n    setShowRecurringOnly(false);\n    setDateFilter('month');\n    setSearchQuery('');\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  const renderExpenseModal = () => (\n    <Dialog open={showAddModal || !!editingExpense} onOpenChange={(open) => {\n      if (!open) {\n        setShowAddModal(false);\n        setEditingExpense(null);\n        setFormData({\n          title: '',\n          amount: '',\n          currency: 'USD',\n          category: '',\n          date: new Date().toISOString().split('T')[0],\n          notes: '',\n          isRecurring: false,\n          recurringFrequency: 'monthly',\n          nextDueDate: '',\n          tags: [],\n        });\n        setNewTag('');\n      }\n    }}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Receipt className=\"w-5 h-5\" />\n            {editingExpense ? 'Edit Expense' : 'Add New Expense'}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Title and Amount */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"title\">Title *</Label>\n              <Input\n                id=\"title\"\n                data-testid=\"input-expense-title\"\n                value={formData.title}\n                onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n                placeholder=\"Enter expense title...\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"amount\">Amount *</Label>\n              <Input\n                id=\"amount\"\n                type=\"number\"\n                step=\"0.01\"\n                data-testid=\"input-expense-amount\"\n                value={formData.amount}\n                onChange={(e) => setFormData(prev => ({ ...prev, amount: e.target.value }))}\n                placeholder=\"0.00\"\n              />\n            </div>\n          </div>\n\n          {/* Category and Currency */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"category\">Category *</Label>\n              <Select \n                value={formData.category} \n                onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}\n              >\n                <SelectTrigger data-testid=\"select-expense-category\">\n                  <SelectValue placeholder=\"Select category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {EXPENSE_CATEGORIES.map(category => (\n                    <SelectItem key={category} value={category}>{category}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"currency\">Currency</Label>\n              <Select \n                value={formData.currency} \n                onValueChange={(value) => setFormData(prev => ({ ...prev, currency: value }))}\n              >\n                <SelectTrigger data-testid=\"select-expense-currency\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"USD\">USD ($)</SelectItem>\n                  <SelectItem value=\"EUR\">EUR (€)</SelectItem>\n                  <SelectItem value=\"GBP\">GBP (£)</SelectItem>\n                  <SelectItem value=\"CAD\">CAD ($)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Date */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"date\">Date *</Label>\n            <Input\n              id=\"date\"\n              type=\"date\"\n              data-testid=\"input-expense-date\"\n              value={formData.date}\n              onChange={(e) => setFormData(prev => ({ ...prev, date: e.target.value }))}\n            />\n          </div>\n\n          {/* Recurring Options */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center space-x-2\">\n              <input\n                type=\"checkbox\"\n                data-testid=\"checkbox-expense-recurring\"\n                checked={formData.isRecurring}\n                onChange={(e) => setFormData(prev => ({ ...prev, isRecurring: e.target.checked }))}\n                className=\"rounded\"\n              />\n              <Label className=\"flex items-center gap-2\">\n                <Repeat className=\"w-4 h-4\" />\n                Make this a recurring expense\n              </Label>\n            </div>\n            \n            {formData.isRecurring && (\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Frequency</Label>\n                  <Select \n                    value={formData.recurringFrequency} \n                    onValueChange={(value: any) => setFormData(prev => ({ ...prev, recurringFrequency: value }))}\n                  >\n                    <SelectTrigger data-testid=\"select-expense-frequency\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"daily\">Daily</SelectItem>\n                      <SelectItem value=\"weekly\">Weekly</SelectItem>\n                      <SelectItem value=\"monthly\">Monthly</SelectItem>\n                      <SelectItem value=\"yearly\">Yearly</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Next Due Date</Label>\n                  <Input\n                    type=\"date\"\n                    data-testid=\"input-expense-next-due\"\n                    value={formData.nextDueDate}\n                    onChange={(e) => setFormData(prev => ({ ...prev, nextDueDate: e.target.value }))}\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Tags */}\n          <div className=\"space-y-2\">\n            <Label>Tags</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                data-testid=\"input-expense-tag\"\n                value={newTag}\n                onChange={(e) => setNewTag(e.target.value)}\n                placeholder=\"Add a tag...\"\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter') {\n                    e.preventDefault();\n                    addTag();\n                  }\n                }}\n                className=\"flex-1\"\n              />\n              <Button \n                type=\"button\"\n                onClick={addTag}\n                data-testid=\"button-add-expense-tag\"\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                <Tag className=\"w-4 h-4 mr-1\" />\n                Add\n              </Button>\n            </div>\n            {formData.tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-2\">\n                {formData.tags.map(tag => (\n                  <Badge \n                    key={tag} \n                    variant=\"secondary\" \n                    className=\"cursor-pointer\"\n                    onClick={() => removeTag(tag)}\n                    data-testid={`badge-expense-tag-${tag}`}\n                  >\n                    {tag} ×\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Notes */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"notes\">Notes</Label>\n            <Textarea\n              id=\"notes\"\n              data-testid=\"textarea-expense-notes\"\n              value={formData.notes}\n              onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}\n              placeholder=\"Optional notes about this expense...\"\n              className=\"min-h-20\"\n            />\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex justify-end gap-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => {\n                setShowAddModal(false);\n                setEditingExpense(null);\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"button\"\n              data-testid=\"button-save-expense\"\n              onClick={editingExpense ? handleUpdateExpense : handleAddExpense}\n            >\n              {editingExpense ? 'Update Expense' : 'Add Expense'}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n            <DollarSign className=\"w-6 h-6\" />\n            Expenses\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Track and analyze your spending patterns\n          </p>\n        </div>\n        <Button onClick={() => setShowAddModal(true)} data-testid=\"button-add-expense\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Expense\n        </Button>\n      </div>\n\n      {/* Analytics Tabs */}\n      <Tabs value={viewMode} onValueChange={(value: any) => setViewMode(value)}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"overview\" data-testid=\"tab-expenses-overview\">\n            <PieIcon className=\"w-4 h-4 mr-2\" />\n            Overview\n          </TabsTrigger>\n          <TabsTrigger value=\"categories\" data-testid=\"tab-expenses-categories\">\n            <BarChart3 className=\"w-4 h-4 mr-2\" />\n            Categories\n          </TabsTrigger>\n          <TabsTrigger value=\"trends\" data-testid=\"tab-expenses-trends\">\n            <TrendingUp className=\"w-4 h-4 mr-2\" />\n            Trends\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Total Spent</p>\n                    <p className=\"text-xl font-bold\" data-testid=\"total-spent\">\n                      {formatCurrency(analytics.totalAmount)}\n                    </p>\n                  </div>\n                  <DollarSign className=\"w-8 h-8 text-green-500\" />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Total Expenses</p>\n                    <p className=\"text-xl font-bold\" data-testid=\"total-expenses\">\n                      {filteredExpenses.length}\n                    </p>\n                  </div>\n                  <Receipt className=\"w-8 h-8 text-blue-500\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Average Expense</p>\n                    <p className=\"text-xl font-bold\" data-testid=\"average-expense\">\n                      {formatCurrency(analytics.averageExpense)}\n                    </p>\n                  </div>\n                  <BarChart3 className=\"w-8 h-8 text-purple-500\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Recurring</p>\n                    <p className=\"text-xl font-bold\" data-testid=\"recurring-expenses\">\n                      {analytics.recurringExpenses}\n                    </p>\n                  </div>\n                  <Repeat className=\"w-8 h-8 text-orange-500\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Pie Chart */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <PieIcon className=\"w-5 h-5\" />\n                Spending by Category\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {analytics.pieChartData.length > 0 ? (\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={analytics.pieChartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      label={({ name, percentage }) => `${name} ${percentage.toFixed(1)}%`}\n                    >\n                      {analytics.pieChartData.map((_, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip formatter={(value) => formatCurrency(Number(value))} />\n                  </PieChart>\n                </ResponsiveContainer>\n              ) : (\n                <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                  No expenses to analyze\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Categories Tab */}\n        <TabsContent value=\"categories\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Category Breakdown\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {analytics.pieChartData.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {analytics.pieChartData.map((item, index) => (\n                    <div key={item.name} className=\"flex items-center justify-between p-3 rounded-lg border\">\n                      <div className=\"flex items-center gap-3\">\n                        <div \n                          className=\"w-4 h-4 rounded-full\"\n                          style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                        />\n                        <span className=\"font-medium\">{item.name}</span>\n                      </div>\n                      <div className=\"flex items-center gap-4\">\n                        <span className=\"text-sm text-muted-foreground\">\n                          {item.percentage.toFixed(1)}%\n                        </span>\n                        <span className=\"font-bold\">\n                          {formatCurrency(item.value)}\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                  No expenses to analyze\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Trends Tab */}\n        <TabsContent value=\"trends\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"w-5 h-5\" />\n                Monthly Trends\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {analytics.barChartData.length > 0 ? (\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <BarChart data={analytics.barChartData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis tickFormatter={(value) => formatCurrency(value)} />\n                    <Tooltip formatter={(value) => formatCurrency(Number(value))} />\n                    <Bar dataKey=\"amount\" fill=\"#6366f1\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              ) : (\n                <div className=\"h-96 flex items-center justify-center text-muted-foreground\">\n                  Not enough data for trend analysis\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Search and Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base flex items-center gap-2\">\n            <Filter className=\"w-4 h-4\" />\n            Search & Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Search */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            <Input\n              data-testid=\"input-expenses-search\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder=\"Search expenses by title, category, or tags...\"\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Filter Controls */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {/* Category Filter */}\n            <div className=\"space-y-2\">\n              <Label>Category</Label>\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger data-testid=\"select-category-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {EXPENSE_CATEGORIES.map(category => (\n                    <SelectItem key={category} value={category}>{category}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Date Filter */}\n            <div className=\"space-y-2\">\n              <Label>Time Period</Label>\n              <Select value={dateFilter} onValueChange={(value: any) => setDateFilter(value)}>\n                <SelectTrigger data-testid=\"select-date-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Time</SelectItem>\n                  <SelectItem value=\"week\">This Week</SelectItem>\n                  <SelectItem value=\"month\">This Month</SelectItem>\n                  <SelectItem value=\"year\">This Year</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Quick Filters */}\n            <div className=\"space-y-2\">\n              <Label>Quick Filters</Label>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant={showRecurringOnly ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  data-testid=\"button-filter-recurring\"\n                  onClick={() => setShowRecurringOnly(!showRecurringOnly)}\n                >\n                  <Repeat className=\"w-4 h-4 mr-1\" />\n                  Recurring\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  data-testid=\"button-clear-filters\"\n                  onClick={clearFilters}\n                >\n                  Clear All\n                </Button>\n              </div>\n            </div>\n\n            {/* Stats */}\n            <div className=\"space-y-2\">\n              <Label>Expenses</Label>\n              <div className=\"text-sm text-muted-foreground\">\n                Showing {sortedExpenses.length} of {expenses.length} expenses\n              </div>\n            </div>\n          </div>\n\n          {/* Tag Filters */}\n          {allTags.length > 0 && (\n            <div className=\"space-y-2\">\n              <Label>Filter by Tags</Label>\n              <div className=\"flex flex-wrap gap-2\">\n                {allTags.map(tag => (\n                  <Badge\n                    key={tag}\n                    variant={selectedTags.includes(tag) ? \"default\" : \"outline\"}\n                    className=\"cursor-pointer\"\n                    onClick={() => toggleTagFilter(tag)}\n                    data-testid={`filter-tag-${tag}`}\n                  >\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Expenses List */}\n      {sortedExpenses.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <Archive className=\"w-12 h-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">No Expenses Found</h3>\n            <p className=\"text-muted-foreground text-center mb-4\">\n              {expenses.length === 0 \n                ? \"Get started by adding your first expense\"\n                : \"Try adjusting your search or filter criteria\"\n              }\n            </p>\n            {expenses.length === 0 && (\n              <Button onClick={() => setShowAddModal(true)} data-testid=\"button-create-first-expense\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Your First Expense\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {sortedExpenses.map(expense => (\n            <Card key={expense.id} className=\"cursor-pointer transition-shadow hover:shadow-md\">\n              <CardHeader className=\"pb-2\">\n                <div className=\"flex items-start justify-between\">\n                  <CardTitle className=\"text-base line-clamp-1\" data-testid={`expense-title-${expense.id}`}>\n                    {expense.title}\n                  </CardTitle>\n                  <div className=\"flex gap-1\">\n                    {expense.isRecurring && (\n                      <div className=\"p-1\">\n                        <Repeat className=\"w-3 h-3 text-orange-500\" />\n                      </div>\n                    )}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      data-testid={`button-edit-${expense.id}`}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleEditExpense(expense);\n                      }}\n                      className=\"p-1 h-auto\"\n                    >\n                      <Edit className=\"w-3 h-3\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      data-testid={`button-delete-${expense.id}`}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDeleteExpense(expense.id, expense.title);\n                      }}\n                      className=\"p-1 h-auto text-destructive hover:text-destructive\"\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    {expense.category}\n                  </Badge>\n                  <Calendar className=\"w-3 h-3\" />\n                  {format(new Date(expense.date), 'MMM dd, yyyy')}\n                </div>\n              </CardHeader>\n\n              <CardContent className=\"pt-2\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <span className=\"text-lg font-bold text-green-600\" data-testid={`expense-amount-${expense.id}`}>\n                    {formatCurrency(expense.amount)}\n                  </span>\n                  <span className=\"text-xs text-muted-foreground\">\n                    {expense.currency}\n                  </span>\n                </div>\n\n                {expense.notes && (\n                  <p className=\"text-sm text-muted-foreground line-clamp-2 mb-2\" data-testid={`expense-notes-${expense.id}`}>\n                    {expense.notes}\n                  </p>\n                )}\n                \n                {expense.tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-1\">\n                    {expense.tags.slice(0, 3).map(tag => (\n                      <Badge key={tag} variant=\"outline\" className=\"text-xs\" data-testid={`expense-tag-${expense.id}-${tag}`}>\n                        {tag}\n                      </Badge>\n                    ))}\n                    {expense.tags.length > 3 && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        +{expense.tags.length - 3} more\n                      </Badge>\n                    )}\n                  </div>\n                )}\n\n                {expense.isRecurring && expense.nextDueDate && (\n                  <div className=\"flex items-center gap-1 mt-2 text-xs text-muted-foreground\">\n                    <AlertCircle className=\"w-3 h-3\" />\n                    Next: {format(new Date(expense.nextDueDate), 'MMM dd, yyyy')}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {renderExpenseModal()}\n    </div>\n  );\n}","size_bytes":38613},"client/src/pages/notes.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { useVault } from '@/contexts/vault-context';\nimport { NoteEntry, NOTE_NOTEBOOKS } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Plus, \n  Edit, \n  Trash2, \n  Search, \n  BookOpen, \n  Tag, \n  Pin, \n  Calendar,\n  Filter,\n  StickyNote,\n  Archive,\n  Eye,\n  FileText\n} from 'lucide-react';\nimport { format } from 'date-fns';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport rehypeHighlight from 'rehype-highlight';\nimport 'highlight.js/styles/github-dark.css';\n\nexport default function Notes() {\n  const { notes, addNote, updateNote, deleteNote, searchQuery, setSearchQuery } = useVault();\n  const { toast } = useToast();\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [editingNote, setEditingNote] = useState<NoteEntry | null>(null);\n  const [selectedNotebook, setSelectedNotebook] = useState<string>('all');\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  const [showPinnedOnly, setShowPinnedOnly] = useState(false);\n\n  // Form state for add/edit modal\n  const [formData, setFormData] = useState({\n    title: '',\n    content: '',\n    notebook: 'Default',\n    tags: [] as string[],\n    isPinned: false,\n  });\n  \n  const [newTag, setNewTag] = useState('');\n\n  // Get all unique tags from notes\n  const allTags = useMemo(() => {\n    const tagSet = new Set<string>();\n    notes.forEach(note => {\n      note.tags.forEach(tag => tagSet.add(tag));\n    });\n    return Array.from(tagSet).sort();\n  }, [notes]);\n\n  // Filter notes based on search, notebook, tags, and pinned status\n  const filteredNotes = useMemo(() => {\n    return notes.filter(note => {\n      // Search filter\n      const matchesSearch = !searchQuery || \n        note.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        note.content.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        note.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));\n\n      // Notebook filter\n      const matchesNotebook = selectedNotebook === 'all' || note.notebook === selectedNotebook;\n      \n      // Tag filter\n      const matchesTags = selectedTags.length === 0 || \n        selectedTags.some(tag => note.tags.includes(tag));\n\n      // Pinned filter\n      const matchesPinned = !showPinnedOnly || note.isPinned;\n\n      return matchesSearch && matchesNotebook && matchesTags && matchesPinned;\n    });\n  }, [notes, searchQuery, selectedNotebook, selectedTags, showPinnedOnly]);\n\n  // Sort notes: pinned first, then by updated date\n  const sortedNotes = useMemo(() => {\n    return [...filteredNotes].sort((a, b) => {\n      if (a.isPinned && !b.isPinned) return -1;\n      if (!a.isPinned && b.isPinned) return 1;\n      return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();\n    });\n  }, [filteredNotes]);\n\n  const handleAddNote = async () => {\n    if (!formData.title.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Title is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await addNote({\n        title: formData.title.trim(),\n        content: formData.content,\n        notebook: formData.notebook,\n        tags: formData.tags,\n        isPinned: formData.isPinned,\n      });\n\n      setFormData({\n        title: '',\n        content: '',\n        notebook: 'Default',\n        tags: [],\n        isPinned: false,\n      });\n      setShowAddModal(false);\n\n      toast({\n        title: \"Success\",\n        description: \"Note added successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add note\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleEditNote = (note: NoteEntry) => {\n    setEditingNote(note);\n    setFormData({\n      title: note.title,\n      content: note.content,\n      notebook: note.notebook,\n      tags: [...note.tags],\n      isPinned: note.isPinned,\n    });\n  };\n\n  const handleUpdateNote = async () => {\n    if (!editingNote || !formData.title.trim()) {\n      toast({\n        title: \"Error\", \n        description: \"Title is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await updateNote(editingNote.id, {\n        title: formData.title.trim(),\n        content: formData.content,\n        notebook: formData.notebook,\n        tags: formData.tags,\n        isPinned: formData.isPinned,\n      });\n\n      setEditingNote(null);\n      setFormData({\n        title: '',\n        content: '',\n        notebook: 'Default',\n        tags: [],\n        isPinned: false,\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Note updated successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update note\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteNote = async (id: string, title: string) => {\n    if (!confirm(`Are you sure you want to delete \"${title}\"?`)) {\n      return;\n    }\n\n    try {\n      await deleteNote(id);\n      toast({\n        title: \"Success\",\n        description: \"Note deleted successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete note\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const togglePinNote = async (note: NoteEntry) => {\n    try {\n      await updateNote(note.id, { isPinned: !note.isPinned });\n      toast({\n        title: \"Success\",\n        description: note.isPinned ? \"Note unpinned\" : \"Note pinned\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update note\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const addTag = () => {\n    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {\n      setFormData(prev => ({\n        ...prev,\n        tags: [...prev.tags, newTag.trim()]\n      }));\n      setNewTag('');\n    }\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    setFormData(prev => ({\n      ...prev,\n      tags: prev.tags.filter(tag => tag !== tagToRemove)\n    }));\n  };\n\n  const toggleTagFilter = (tag: string) => {\n    setSelectedTags(prev => \n      prev.includes(tag) \n        ? prev.filter(t => t !== tag)\n        : [...prev, tag]\n    );\n  };\n\n  const clearFilters = () => {\n    setSelectedNotebook('all');\n    setSelectedTags([]);\n    setShowPinnedOnly(false);\n    setSearchQuery('');\n  };\n\n  const renderNoteModal = () => (\n    <Dialog open={showAddModal || !!editingNote} onOpenChange={(open) => {\n      if (!open) {\n        setShowAddModal(false);\n        setEditingNote(null);\n        setFormData({\n          title: '',\n          content: '',\n          notebook: 'Default',\n          tags: [],\n          isPinned: false,\n        });\n        setNewTag('');\n      }\n    }}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <StickyNote className=\"w-5 h-5\" />\n            {editingNote ? 'Edit Note' : 'Add New Note'}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Title */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Title *</Label>\n            <Input\n              id=\"title\"\n              data-testid=\"input-note-title\"\n              value={formData.title}\n              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n              placeholder=\"Enter note title...\"\n              className=\"text-lg\"\n            />\n          </div>\n\n          {/* Notebook and Pin */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"notebook\">Notebook</Label>\n              <Select \n                value={formData.notebook} \n                onValueChange={(value) => setFormData(prev => ({ ...prev, notebook: value }))}\n              >\n                <SelectTrigger data-testid=\"select-note-notebook\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {NOTE_NOTEBOOKS.map(notebook => (\n                    <SelectItem key={notebook} value={notebook}>{notebook}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  data-testid=\"checkbox-note-pinned\"\n                  checked={formData.isPinned}\n                  onChange={(e) => setFormData(prev => ({ ...prev, isPinned: e.target.checked }))}\n                  className=\"rounded\"\n                />\n                <Pin className=\"w-4 h-4\" />\n                Pin this note\n              </Label>\n            </div>\n          </div>\n\n          {/* Tags */}\n          <div className=\"space-y-2\">\n            <Label>Tags</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                data-testid=\"input-note-tag\"\n                value={newTag}\n                onChange={(e) => setNewTag(e.target.value)}\n                placeholder=\"Add a tag...\"\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter') {\n                    e.preventDefault();\n                    addTag();\n                  }\n                }}\n                className=\"flex-1\"\n              />\n              <Button \n                type=\"button\"\n                onClick={addTag}\n                data-testid=\"button-add-tag\"\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                <Tag className=\"w-4 h-4 mr-1\" />\n                Add\n              </Button>\n            </div>\n            {formData.tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-2\">\n                {formData.tags.map(tag => (\n                  <Badge \n                    key={tag} \n                    variant=\"secondary\" \n                    className=\"cursor-pointer\"\n                    onClick={() => removeTag(tag)}\n                    data-testid={`badge-tag-${tag}`}\n                  >\n                    {tag} ×\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Content with Markdown Editor */}\n          <div className=\"space-y-2\">\n            <Label>Content</Label>\n            <Tabs defaultValue=\"edit\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"edit\" className=\"flex items-center gap-2\" data-testid=\"tab-edit\">\n                  <FileText className=\"w-4 h-4\" />\n                  Edit\n                </TabsTrigger>\n                <TabsTrigger value=\"preview\" className=\"flex items-center gap-2\" data-testid=\"tab-preview\">\n                  <Eye className=\"w-4 h-4\" />\n                  Preview\n                </TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"edit\" className=\"space-y-2\">\n                <Textarea\n                  data-testid=\"textarea-note-content\"\n                  value={formData.content}\n                  onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}\n                  placeholder=\"Write your note content here using Markdown...\n\n# Heading 1\n## Heading 2\n\n**Bold text** and *italic text*\n\n- Bullet point\n- Another item\n\n1. Numbered list\n2. Second item\n\n`inline code`\n\n```javascript\n// Code block\nconsole.log('Hello, world!');\n```\n\n[Link](https://example.com)\n\n> Blockquote\n\n---\n\n**Tables:**\n| Column 1 | Column 2 |\n|----------|----------|\n| Data 1   | Data 2   |\n\"\n                  className=\"min-h-64 font-mono text-sm resize-none\"\n                />\n                <div className=\"text-xs text-muted-foreground\">\n                  <strong>Markdown Support:</strong> Headers (#), **bold**, *italic*, `code`, lists (-, 1.), \n                  [links](url), &gt; quotes, tables, code blocks ```lang, and more\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"preview\" className=\"space-y-2\">\n                <div \n                  className=\"min-h-64 p-4 border rounded-md bg-background prose prose-sm dark:prose-invert max-w-none\"\n                  data-testid=\"markdown-preview\"\n                >\n                  {formData.content ? (\n                    <ReactMarkdown \n                      remarkPlugins={[remarkGfm]}\n                      rehypePlugins={[rehypeHighlight]}\n                    >\n                      {formData.content}\n                    </ReactMarkdown>\n                  ) : (\n                    <div className=\"text-muted-foreground italic\">\n                      Nothing to preview. Write some content in the Edit tab.\n                    </div>\n                  )}\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex justify-end gap-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => {\n                setShowAddModal(false);\n                setEditingNote(null);\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"button\"\n              data-testid=\"button-save-note\"\n              onClick={editingNote ? handleUpdateNote : handleAddNote}\n            >\n              {editingNote ? 'Update Note' : 'Add Note'}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n            <BookOpen className=\"w-6 h-6\" />\n            Notes\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Organize your thoughts with encrypted notes\n          </p>\n        </div>\n        <Button onClick={() => setShowAddModal(true)} data-testid=\"button-add-note\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Note\n        </Button>\n      </div>\n\n      {/* Search and Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-base flex items-center gap-2\">\n            <Filter className=\"w-4 h-4\" />\n            Search & Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Search */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            <Input\n              data-testid=\"input-notes-search\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder=\"Search notes by title, content, or tags...\"\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Filter Controls */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {/* Notebook Filter */}\n            <div className=\"space-y-2\">\n              <Label>Notebook</Label>\n              <Select value={selectedNotebook} onValueChange={setSelectedNotebook}>\n                <SelectTrigger data-testid=\"select-notebook-filter\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Notebooks</SelectItem>\n                  {NOTE_NOTEBOOKS.map(notebook => (\n                    <SelectItem key={notebook} value={notebook}>{notebook}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Quick Filters */}\n            <div className=\"space-y-2\">\n              <Label>Quick Filters</Label>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant={showPinnedOnly ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  data-testid=\"button-filter-pinned\"\n                  onClick={() => setShowPinnedOnly(!showPinnedOnly)}\n                >\n                  <Pin className=\"w-4 h-4 mr-1\" />\n                  Pinned\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  data-testid=\"button-clear-filters\"\n                  onClick={clearFilters}\n                >\n                  Clear All\n                </Button>\n              </div>\n            </div>\n\n            {/* Stats */}\n            <div className=\"space-y-2\">\n              <Label>Notes</Label>\n              <div className=\"text-sm text-muted-foreground\">\n                Showing {sortedNotes.length} of {notes.length} notes\n              </div>\n            </div>\n          </div>\n\n          {/* Tag Filters */}\n          {allTags.length > 0 && (\n            <div className=\"space-y-2\">\n              <Label>Filter by Tags</Label>\n              <div className=\"flex flex-wrap gap-2\">\n                {allTags.map(tag => (\n                  <Badge\n                    key={tag}\n                    variant={selectedTags.includes(tag) ? \"default\" : \"outline\"}\n                    className=\"cursor-pointer\"\n                    onClick={() => toggleTagFilter(tag)}\n                    data-testid={`filter-tag-${tag}`}\n                  >\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Notes Grid */}\n      {sortedNotes.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <Archive className=\"w-12 h-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-medium mb-2\">No Notes Found</h3>\n            <p className=\"text-muted-foreground text-center mb-4\">\n              {notes.length === 0 \n                ? \"Get started by creating your first note\"\n                : \"Try adjusting your search or filter criteria\"\n              }\n            </p>\n            {notes.length === 0 && (\n              <Button onClick={() => setShowAddModal(true)} data-testid=\"button-create-first-note\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Your First Note\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {sortedNotes.map(note => (\n            <Card key={note.id} className={`cursor-pointer transition-shadow hover:shadow-md ${note.isPinned ? 'ring-2 ring-amber-200' : ''}`}>\n              <CardHeader className=\"pb-2\">\n                <div className=\"flex items-start justify-between\">\n                  <CardTitle className=\"text-base line-clamp-2 flex items-center gap-2\">\n                    {note.isPinned && <Pin className=\"w-4 h-4 text-amber-500 flex-shrink-0\" />}\n                    <span data-testid={`note-title-${note.id}`}>{note.title}</span>\n                  </CardTitle>\n                  <div className=\"flex gap-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      data-testid={`button-pin-${note.id}`}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        togglePinNote(note);\n                      }}\n                      className=\"p-1 h-auto\"\n                    >\n                      <Pin className={`w-3 h-3 ${note.isPinned ? 'text-amber-500' : 'text-muted-foreground'}`} />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      data-testid={`button-edit-${note.id}`}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleEditNote(note);\n                      }}\n                      className=\"p-1 h-auto\"\n                    >\n                      <Edit className=\"w-3 h-3\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      data-testid={`button-delete-${note.id}`}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDeleteNote(note.id, note.title);\n                      }}\n                      className=\"p-1 h-auto text-destructive hover:text-destructive\"\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                  <BookOpen className=\"w-3 h-3\" />\n                  {note.notebook}\n                  <Calendar className=\"w-3 h-3 ml-2\" />\n                  {format(new Date(note.updatedAt), 'MMM d, yyyy')}\n                </div>\n              </CardHeader>\n\n              <CardContent className=\"pt-2\">\n                {note.content && (\n                  <p className=\"text-sm text-muted-foreground line-clamp-4 mb-3\" data-testid={`note-content-${note.id}`}>\n                    {note.content}\n                  </p>\n                )}\n                \n                {note.tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-1\">\n                    {note.tags.slice(0, 3).map(tag => (\n                      <Badge key={tag} variant=\"secondary\" className=\"text-xs\" data-testid={`note-tag-${note.id}-${tag}`}>\n                        {tag}\n                      </Badge>\n                    ))}\n                    {note.tags.length > 3 && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        +{note.tags.length - 3} more\n                      </Badge>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {renderNoteModal()}\n    </div>\n  );\n}","size_bytes":22875},"client/src/pages/reminders.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { useVault } from '@/contexts/vault-context';\nimport { ReminderEntry, REMINDER_CATEGORIES, REMINDER_COLORS } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Plus, \n  Edit, \n  Trash2, \n  Search, \n  Calendar, \n  Clock, \n  Bell, \n  Tag,\n  Filter,\n  CheckCircle2,\n  Circle,\n  AlertCircle,\n  CalendarDays,\n  Grid,\n  List,\n  Palette,\n  BellRing,\n  Repeat,\n  ChevronRight\n} from 'lucide-react';\nimport { format, isToday, isTomorrow, isPast, isThisWeek, startOfDay } from 'date-fns';\n\nexport default function Reminders() {\n  const { reminders, addReminder, updateReminder, deleteReminder, searchQuery, setSearchQuery } = useVault();\n  const { toast } = useToast();\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [editingReminder, setEditingReminder] = useState<ReminderEntry | null>(null);\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [selectedPriority, setSelectedPriority] = useState<string>('all');\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  const [showCompletedOnly, setShowCompletedOnly] = useState(false);\n  const [showOverdueOnly, setShowOverdueOnly] = useState(false);\n  const [viewMode, setViewMode] = useState<'calendar' | 'list'>('list');\n  const [dateFilter, setDateFilter] = useState<'all' | 'today' | 'week' | 'month'>('all');\n\n  // Form state for add/edit modal\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    dueDate: new Date().toISOString().split('T')[0],\n    dueTime: '',\n    priority: 'medium' as 'low' | 'medium' | 'high' | 'urgent',\n    category: 'Personal',\n    isCompleted: false,\n    isRecurring: false,\n    recurringFrequency: 'weekly' as 'daily' | 'weekly' | 'monthly' | 'yearly',\n    tags: [] as string[],\n    color: '#6366f1',\n    notificationEnabled: true,\n    subscriptionId: '',\n  });\n  \n  const [newTag, setNewTag] = useState('');\n\n  // Get all unique tags from reminders\n  const allTags = useMemo(() => {\n    const tagSet = new Set<string>();\n    reminders.forEach(reminder => {\n      reminder.tags.forEach(tag => tagSet.add(tag));\n    });\n    return Array.from(tagSet).sort();\n  }, [reminders]);\n\n  // Filter reminders based on various criteria\n  const filteredReminders = useMemo(() => {\n    return reminders.filter(reminder => {\n      // Search filter\n      const matchesSearch = !searchQuery || \n        reminder.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        reminder.description?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        reminder.category.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        reminder.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));\n\n      // Category filter\n      const matchesCategory = selectedCategory === 'all' || reminder.category === selectedCategory;\n      \n      // Priority filter\n      const matchesPriority = selectedPriority === 'all' || reminder.priority === selectedPriority;\n      \n      // Tag filter\n      const matchesTags = selectedTags.length === 0 || \n        selectedTags.some(tag => reminder.tags.includes(tag));\n\n      // Completed filter\n      const matchesCompleted = !showCompletedOnly || reminder.isCompleted;\n\n      // Overdue filter\n      const matchesOverdue = !showOverdueOnly || (isPast(new Date(reminder.dueDate)) && !reminder.isCompleted);\n\n      // Date filter\n      let matchesDate = true;\n      const reminderDate = new Date(reminder.dueDate);\n      const now = new Date();\n\n      switch (dateFilter) {\n        case 'today':\n          matchesDate = isToday(reminderDate);\n          break;\n        case 'week':\n          matchesDate = isThisWeek(reminderDate);\n          break;\n        case 'month':\n          matchesDate = reminderDate.getMonth() === now.getMonth() && \n                       reminderDate.getFullYear() === now.getFullYear();\n          break;\n        case 'all':\n        default:\n          matchesDate = true;\n          break;\n      }\n\n      return matchesSearch && matchesCategory && matchesPriority && matchesTags && matchesCompleted && matchesOverdue && matchesDate;\n    });\n  }, [reminders, searchQuery, selectedCategory, selectedPriority, selectedTags, showCompletedOnly, showOverdueOnly, dateFilter]);\n\n  // Sort reminders by due date and priority\n  const sortedReminders = useMemo(() => {\n    return [...filteredReminders].sort((a, b) => {\n      // First, sort by completion status (incomplete first)\n      if (a.isCompleted !== b.isCompleted) {\n        return a.isCompleted ? 1 : -1;\n      }\n      \n      // Then by due date\n      const dateComparison = new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime();\n      if (dateComparison !== 0) {\n        return dateComparison;\n      }\n      \n      // Finally by priority\n      const priorityOrder = { urgent: 0, high: 1, medium: 2, low: 3 };\n      return priorityOrder[a.priority] - priorityOrder[b.priority];\n    });\n  }, [filteredReminders]);\n\n  // Group reminders by date for calendar view\n  const groupedReminders = useMemo(() => {\n    const groups: { [key: string]: ReminderEntry[] } = {};\n    \n    sortedReminders.forEach(reminder => {\n      const dateKey = format(new Date(reminder.dueDate), 'yyyy-MM-dd');\n      if (!groups[dateKey]) {\n        groups[dateKey] = [];\n      }\n      groups[dateKey].push(reminder);\n    });\n    \n    return groups;\n  }, [sortedReminders]);\n\n  // Get stats for the current view\n  const viewStats = useMemo(() => {\n    const today = startOfDay(new Date());\n    \n    return {\n      total: filteredReminders.length,\n      completed: filteredReminders.filter(r => r.isCompleted).length,\n      overdue: filteredReminders.filter(r => isPast(new Date(r.dueDate)) && !r.isCompleted).length,\n      dueToday: filteredReminders.filter(r => isToday(new Date(r.dueDate)) && !r.isCompleted).length,\n      dueTomorrow: filteredReminders.filter(r => isTomorrow(new Date(r.dueDate)) && !r.isCompleted).length,\n      thisWeek: filteredReminders.filter(r => isThisWeek(new Date(r.dueDate)) && !r.isCompleted).length,\n    };\n  }, [filteredReminders]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      const reminderData = {\n        title: formData.title,\n        description: formData.description || undefined,\n        dueDate: new Date(formData.dueDate + (formData.dueTime ? `T${formData.dueTime}` : 'T09:00')),\n        dueTime: formData.dueTime || undefined,\n        priority: formData.priority,\n        category: formData.category,\n        isCompleted: formData.isCompleted,\n        isRecurring: formData.isRecurring,\n        recurringFrequency: formData.isRecurring ? formData.recurringFrequency : undefined,\n        nextReminderDate: formData.isRecurring ? calculateNextReminderDate(new Date(formData.dueDate), formData.recurringFrequency) : undefined,\n        tags: formData.tags,\n        color: formData.color,\n        notificationEnabled: formData.notificationEnabled,\n        subscriptionId: formData.subscriptionId || undefined,\n      };\n\n      if (editingReminder) {\n        await updateReminder(editingReminder.id, reminderData);\n        toast({\n          title: \"Reminder updated\",\n          description: \"Your reminder has been updated successfully.\",\n        });\n      } else {\n        await addReminder(reminderData);\n        toast({\n          title: \"Reminder created\",\n          description: \"Your reminder has been created successfully.\",\n        });\n      }\n\n      resetForm();\n      setShowAddModal(false);\n      setEditingReminder(null);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save reminder. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      title: '',\n      description: '',\n      dueDate: new Date().toISOString().split('T')[0],\n      dueTime: '',\n      priority: 'medium',\n      category: 'Personal',\n      isCompleted: false,\n      isRecurring: false,\n      recurringFrequency: 'weekly',\n      tags: [],\n      color: '#6366f1',\n      notificationEnabled: true,\n      subscriptionId: '',\n    });\n    setNewTag('');\n  };\n\n  const calculateNextReminderDate = (currentDate: Date, frequency: 'daily' | 'weekly' | 'monthly' | 'yearly'): Date => {\n    const nextDate = new Date(currentDate);\n    switch (frequency) {\n      case 'daily':\n        nextDate.setDate(nextDate.getDate() + 1);\n        break;\n      case 'weekly':\n        nextDate.setDate(nextDate.getDate() + 7);\n        break;\n      case 'monthly':\n        nextDate.setMonth(nextDate.getMonth() + 1);\n        break;\n      case 'yearly':\n        nextDate.setFullYear(nextDate.getFullYear() + 1);\n        break;\n    }\n    return nextDate;\n  };\n\n  const handleEdit = (reminder: ReminderEntry) => {\n    setEditingReminder(reminder);\n    setFormData({\n      title: reminder.title,\n      description: reminder.description || '',\n      dueDate: format(new Date(reminder.dueDate), 'yyyy-MM-dd'),\n      dueTime: reminder.dueTime || '',\n      priority: reminder.priority,\n      category: reminder.category,\n      isCompleted: reminder.isCompleted,\n      isRecurring: reminder.isRecurring,\n      recurringFrequency: reminder.recurringFrequency || 'weekly',\n      tags: [...reminder.tags],\n      color: reminder.color,\n      notificationEnabled: reminder.notificationEnabled,\n      subscriptionId: reminder.subscriptionId || '',\n    });\n    setShowAddModal(true);\n  };\n\n  const handleDelete = async (reminder: ReminderEntry) => {\n    try {\n      await deleteReminder(reminder.id);\n      toast({\n        title: \"Reminder deleted\",\n        description: \"Your reminder has been deleted successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete reminder. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const toggleComplete = async (reminder: ReminderEntry) => {\n    try {\n      await updateReminder(reminder.id, { \n        isCompleted: !reminder.isCompleted,\n        completedAt: !reminder.isCompleted ? new Date() : undefined,\n      });\n      \n      if (!reminder.isCompleted) {\n        toast({\n          title: \"Reminder completed\",\n          description: `\"${reminder.title}\" has been marked as completed.`,\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update reminder. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const addTag = () => {\n    if (newTag.trim() && !formData.tags.includes(newTag.trim())) {\n      setFormData(prev => ({\n        ...prev,\n        tags: [...prev.tags, newTag.trim()],\n      }));\n      setNewTag('');\n    }\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    setFormData(prev => ({\n      ...prev,\n      tags: prev.tags.filter(tag => tag !== tagToRemove),\n    }));\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';\n      case 'high': return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200';\n      case 'medium': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';\n      case 'low': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';\n    }\n  };\n\n  const getDateLabel = (date: Date) => {\n    if (isToday(date)) return 'Today';\n    if (isTomorrow(date)) return 'Tomorrow';\n    if (isPast(date)) return 'Overdue';\n    return format(date, 'MMM dd, yyyy');\n  };\n\n  const renderReminderCard = (reminder: ReminderEntry) => (\n    <Card key={reminder.id} className={`transition-all hover:shadow-md ${reminder.isCompleted ? 'opacity-60' : ''}`} data-testid={`card-reminder-${reminder.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-start space-x-3 flex-1\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"p-0 h-auto hover:bg-transparent\"\n              onClick={() => toggleComplete(reminder)}\n              data-testid={`button-complete-${reminder.id}`}\n            >\n              {reminder.isCompleted ? (\n                <CheckCircle2 className=\"h-5 w-5 text-green-600\" />\n              ) : (\n                <Circle className=\"h-5 w-5 text-gray-400\" />\n              )}\n            </Button>\n            \n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center space-x-2 mb-1\">\n                <h3 className={`font-medium ${reminder.isCompleted ? 'line-through text-gray-500' : ''}`} data-testid={`text-title-${reminder.id}`}>\n                  {reminder.title}\n                </h3>\n                <Badge variant=\"outline\" className={getPriorityColor(reminder.priority)} data-testid={`badge-priority-${reminder.id}`}>\n                  {reminder.priority}\n                </Badge>\n                {isPast(new Date(reminder.dueDate)) && !reminder.isCompleted && (\n                  <Badge variant=\"destructive\" data-testid={`badge-overdue-${reminder.id}`}>\n                    <AlertCircle className=\"h-3 w-3 mr-1\" />\n                    Overdue\n                  </Badge>\n                )}\n              </div>\n              \n              {reminder.description && (\n                <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\" data-testid={`text-description-${reminder.id}`}>\n                  {reminder.description}\n                </p>\n              )}\n              \n              <div className=\"flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400\">\n                <div className=\"flex items-center space-x-1\">\n                  <Calendar className=\"h-4 w-4\" />\n                  <span data-testid={`text-date-${reminder.id}`}>{getDateLabel(new Date(reminder.dueDate))}</span>\n                </div>\n                \n                {reminder.dueTime && (\n                  <div className=\"flex items-center space-x-1\">\n                    <Clock className=\"h-4 w-4\" />\n                    <span data-testid={`text-time-${reminder.id}`}>{reminder.dueTime}</span>\n                  </div>\n                )}\n                \n                <Badge variant=\"outline\" data-testid={`badge-category-${reminder.id}`}>{reminder.category}</Badge>\n                \n                {reminder.isRecurring && (\n                  <div className=\"flex items-center space-x-1\">\n                    <Repeat className=\"h-4 w-4\" />\n                    <span>Recurring</span>\n                  </div>\n                )}\n                \n                {reminder.notificationEnabled && (\n                  <Bell className=\"h-4 w-4\" />\n                )}\n              </div>\n              \n              {reminder.tags.length > 0 && (\n                <div className=\"flex flex-wrap gap-1 mt-2\">\n                  {reminder.tags.map(tag => (\n                    <Badge key={tag} variant=\"secondary\" className=\"text-xs\" data-testid={`badge-tag-${tag}-${reminder.id}`}>\n                      <Tag className=\"h-3 w-3 mr-1\" />\n                      {tag}\n                    </Badge>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-1 ml-2\">\n            <div \n              className=\"w-3 h-3 rounded-full border border-gray-300\"\n              style={{ backgroundColor: reminder.color }}\n              data-testid={`color-indicator-${reminder.id}`}\n            />\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => handleEdit(reminder)} data-testid={`button-edit-${reminder.id}`}>\n              <Edit className=\"h-4 w-4\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => handleDelete(reminder)} data-testid={`button-delete-${reminder.id}`}>\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Reminders</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">Manage your tasks and reminders</p>\n        </div>\n        \n        <Dialog open={showAddModal} onOpenChange={setShowAddModal}>\n          <DialogTrigger asChild>\n            <Button onClick={resetForm} data-testid=\"button-add-reminder\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Reminder\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>{editingReminder ? 'Edit Reminder' : 'Add New Reminder'}</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"col-span-2\">\n                  <Label htmlFor=\"title\">Title</Label>\n                  <Input\n                    id=\"title\"\n                    value={formData.title}\n                    onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n                    placeholder=\"Enter reminder title\"\n                    required\n                    data-testid=\"input-title\"\n                  />\n                </div>\n                \n                <div className=\"col-span-2\">\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"Enter reminder description (optional)\"\n                    rows={3}\n                    data-testid=\"input-description\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"dueDate\">Due Date</Label>\n                  <Input\n                    id=\"dueDate\"\n                    type=\"date\"\n                    value={formData.dueDate}\n                    onChange={(e) => setFormData(prev => ({ ...prev, dueDate: e.target.value }))}\n                    required\n                    data-testid=\"input-due-date\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"dueTime\">Due Time (Optional)</Label>\n                  <Input\n                    id=\"dueTime\"\n                    type=\"time\"\n                    value={formData.dueTime}\n                    onChange={(e) => setFormData(prev => ({ ...prev, dueTime: e.target.value }))}\n                    data-testid=\"input-due-time\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"priority\">Priority</Label>\n                  <Select value={formData.priority} onValueChange={(value: any) => setFormData(prev => ({ ...prev, priority: value }))}>\n                    <SelectTrigger data-testid=\"select-priority\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"urgent\">Urgent</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"category\">Category</Label>\n                  <Select value={formData.category} onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}>\n                    <SelectTrigger data-testid=\"select-category\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {REMINDER_CATEGORIES.map(category => (\n                        <SelectItem key={category} value={category}>{category}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"col-span-2\">\n                  <Label htmlFor=\"color\">Color</Label>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    {REMINDER_COLORS.map(color => (\n                      <button\n                        key={color}\n                        type=\"button\"\n                        className={`w-6 h-6 rounded-full border-2 ${formData.color === color ? 'border-gray-800 dark:border-gray-200' : 'border-gray-300'}`}\n                        style={{ backgroundColor: color }}\n                        onClick={() => setFormData(prev => ({ ...prev, color }))}\n                        data-testid={`color-option-${color}`}\n                      />\n                    ))}\n                  </div>\n                </div>\n                \n                <div className=\"col-span-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"isRecurring\"\n                      checked={formData.isRecurring}\n                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isRecurring: !!checked }))}\n                      data-testid=\"checkbox-recurring\"\n                    />\n                    <Label htmlFor=\"isRecurring\">Recurring reminder</Label>\n                  </div>\n                </div>\n                \n                {formData.isRecurring && (\n                  <div>\n                    <Label htmlFor=\"frequency\">Frequency</Label>\n                    <Select value={formData.recurringFrequency} onValueChange={(value: any) => setFormData(prev => ({ ...prev, recurringFrequency: value }))}>\n                      <SelectTrigger data-testid=\"select-frequency\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"daily\">Daily</SelectItem>\n                        <SelectItem value=\"weekly\">Weekly</SelectItem>\n                        <SelectItem value=\"monthly\">Monthly</SelectItem>\n                        <SelectItem value=\"yearly\">Yearly</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n                \n                <div className=\"col-span-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"notificationEnabled\"\n                      checked={formData.notificationEnabled}\n                      onCheckedChange={(checked) => setFormData(prev => ({ ...prev, notificationEnabled: !!checked }))}\n                      data-testid=\"checkbox-notifications\"\n                    />\n                    <Label htmlFor=\"notificationEnabled\">Enable notifications</Label>\n                  </div>\n                </div>\n                \n                <div className=\"col-span-2\">\n                  <Label htmlFor=\"tags\">Tags</Label>\n                  <div className=\"flex flex-wrap gap-2 mb-2\">\n                    {formData.tags.map(tag => (\n                      <Badge key={tag} variant=\"secondary\" className=\"text-xs\" data-testid={`form-tag-${tag}`}>\n                        {tag}\n                        <button\n                          type=\"button\"\n                          onClick={() => removeTag(tag)}\n                          className=\"ml-1 hover:text-red-600\"\n                        >\n                          ×\n                        </button>\n                      </Badge>\n                    ))}\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      value={newTag}\n                      onChange={(e) => setNewTag(e.target.value)}\n                      placeholder=\"Add a tag\"\n                      onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}\n                      data-testid=\"input-new-tag\"\n                    />\n                    <Button type=\"button\" onClick={addTag} size=\"sm\" data-testid=\"button-add-tag\">\n                      Add\n                    </Button>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowAddModal(false);\n                    setEditingReminder(null);\n                    resetForm();\n                  }}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" data-testid=\"button-save\">\n                  {editingReminder ? 'Update' : 'Create'} Reminder\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n        <Card data-testid=\"card-stat-total\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <CalendarDays className=\"h-4 w-4 text-blue-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Total</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"stat-total\">{viewStats.total}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"card-stat-completed\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Completed</p>\n                <p className=\"text-2xl font-bold text-green-600\" data-testid=\"stat-completed\">{viewStats.completed}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"card-stat-overdue\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <AlertCircle className=\"h-4 w-4 text-red-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Overdue</p>\n                <p className=\"text-2xl font-bold text-red-600\" data-testid=\"stat-overdue\">{viewStats.overdue}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"card-stat-today\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"h-4 w-4 text-orange-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Due Today</p>\n                <p className=\"text-2xl font-bold text-orange-600\" data-testid=\"stat-today\">{viewStats.dueToday}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"card-stat-tomorrow\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <ChevronRight className=\"h-4 w-4 text-blue-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Tomorrow</p>\n                <p className=\"text-2xl font-bold text-blue-600\" data-testid=\"stat-tomorrow\">{viewStats.dueTomorrow}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"card-stat-week\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Calendar className=\"h-4 w-4 text-purple-600\" />\n              <div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">This Week</p>\n                <p className=\"text-2xl font-bold text-purple-600\" data-testid=\"stat-week\">{viewStats.thisWeek}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters and Search */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <div>\n              <Label>Search</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search reminders...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <Label>Category</Label>\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger data-testid=\"select-filter-category\">\n                  <SelectValue placeholder=\"All categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  {REMINDER_CATEGORIES.map(category => (\n                    <SelectItem key={category} value={category}>{category}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label>Priority</Label>\n              <Select value={selectedPriority} onValueChange={setSelectedPriority}>\n                <SelectTrigger data-testid=\"select-filter-priority\">\n                  <SelectValue placeholder=\"All priorities\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Priorities</SelectItem>\n                  <SelectItem value=\"urgent\">Urgent</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label>Date Range</Label>\n              <Select value={dateFilter} onValueChange={(value: any) => setDateFilter(value)}>\n                <SelectTrigger data-testid=\"select-filter-date\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Time</SelectItem>\n                  <SelectItem value=\"today\">Today</SelectItem>\n                  <SelectItem value=\"week\">This Week</SelectItem>\n                  <SelectItem value=\"month\">This Month</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div className=\"flex flex-wrap items-center gap-4 mt-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"showCompleted\"\n                checked={showCompletedOnly}\n                onCheckedChange={(checked) => setShowCompletedOnly(!!checked)}\n                data-testid=\"checkbox-filter-completed\"\n              />\n              <Label htmlFor=\"showCompleted\" className=\"text-sm\">Show completed only</Label>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"showOverdue\"\n                checked={showOverdueOnly}\n                onCheckedChange={(checked) => setShowOverdueOnly(!!checked)}\n                data-testid=\"checkbox-filter-overdue\"\n              />\n              <Label htmlFor=\"showOverdue\" className=\"text-sm\">Show overdue only</Label>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant={viewMode === 'list' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setViewMode('list')}\n                data-testid=\"button-view-list\"\n              >\n                <List className=\"h-4 w-4 mr-1\" />\n                List\n              </Button>\n              <Button\n                variant={viewMode === 'calendar' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setViewMode('calendar')}\n                data-testid=\"button-view-calendar\"\n              >\n                <Grid className=\"h-4 w-4 mr-1\" />\n                Calendar\n              </Button>\n            </div>\n            \n            {allTags.length > 0 && (\n              <div className=\"flex flex-wrap gap-1\">\n                <Label className=\"text-sm text-gray-600 dark:text-gray-400\">Tags:</Label>\n                {allTags.map(tag => (\n                  <Badge\n                    key={tag}\n                    variant={selectedTags.includes(tag) ? 'default' : 'outline'}\n                    className=\"cursor-pointer text-xs\"\n                    onClick={() => {\n                      setSelectedTags(prev => \n                        prev.includes(tag) \n                          ? prev.filter(t => t !== tag)\n                          : [...prev, tag]\n                      );\n                    }}\n                    data-testid={`filter-tag-${tag}`}\n                  >\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Reminders Display */}\n      {sortedReminders.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <CalendarDays className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100 mb-2\">No reminders found</h3>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n              {reminders.length === 0 \n                ? \"Get started by creating your first reminder.\"\n                : \"Try adjusting your filters to see more reminders.\"\n              }\n            </p>\n            <Button onClick={() => setShowAddModal(true)} data-testid=\"button-create-first\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Your First Reminder\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {viewMode === 'list' ? (\n            <div className=\"space-y-3\">\n              {sortedReminders.map(renderReminderCard)}\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              {Object.entries(groupedReminders)\n                .sort(([a], [b]) => new Date(a).getTime() - new Date(b).getTime())\n                .map(([dateKey, dateReminders]) => (\n                  <div key={dateKey}>\n                    <h3 className=\"text-lg font-medium mb-3 flex items-center\">\n                      <Calendar className=\"h-4 w-4 mr-2\" />\n                      {getDateLabel(new Date(dateKey))}\n                      <Badge variant=\"outline\" className=\"ml-2\">{dateReminders.length}</Badge>\n                    </h3>\n                    <div className=\"grid gap-3\">\n                      {dateReminders.map(renderReminderCard)}\n                    </div>\n                  </div>\n                ))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":36497}},"version":1}